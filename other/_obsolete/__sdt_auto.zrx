/* REXX __sdt_auto.zrx by the reverend (build 37)                             */
/*-       built by rev-builder version 1.3a on 17 Oct 2003 at 12:59:29       -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- --------------------*/ _g.!sname="__sdt_auto.zrx" /*-------------------- -*/
/*- --------------*/ _g.!sbuild=37; _g.!sdate="2003-10-17" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

globals=_setglobals()
call _timeout 60
call zocsynctime 500
call on halt name _halt

if _synchronize()\="command" then call _error "please start at the command prompt."

/* load ini variables */
   load="sf red_ships bust_clear bname"
   sl=_ini_load_settings()
   do i=1 to _dwords(sl,";")
    s=_dword(sl,i,";")
    globals=globals||" !"||s
    interpret '!'||s||'="!"||s'
   end;
   f=0; l=""
   do i=1 to words(load)
    s=word(load,i)
    x="!"||s
    interpret s||"=_ini.!settings.x"
    interpret 'if '||s||'="##UNDEF##" then do; l=l s; f=1; end'
   end; if f then call _error "missing config variable(s):"||l; drop load s sl x f l

/* define constants */
   prods="Fuel Ore;Organics;Equipment"

/* define idle prompts */
   idl.1="INACTIVITY WARNING"
   idl.2="entered sector."
   idl.3="activated"
   idl_n=3

/* define prompts */
   pmt.1="(?=Help)? :"
   pmt_n=1

/* define messages */
   msg.1="::"
   msg.2=" Success!"
   msg.3=" Busted!"
   msg.4=" at this port!"
   msg.5="You leave the port."
   msg.6="turns left."
   msg.7="experience"
   msg.8=" ------- -------- -------" /* port trade / commerce report */
   msg.9=" ------- ------- -------"  /* port steal                   */
   msg_n=9

/* build waitmux string */
   muxline=idl.1
   do i=2 to idl_n
    muxline=muxline||"|"||idl.i
   end /*do*/
   do i=1 to pmt_n
    muxline=muxline||"|"||pmt.i
   end /*do*/
   do i=1 to msg_n
    muxline=muxline||"|"||msg.i
   end /*do*/

/* define some game variables */
   parse value _getinfo("sect;turns;creds;hlds;ore;org;equ;col;gtorp;aln;exp;ship;shiptype") with sector ";" turns ";" creds ";" holds ";" ore ";" org ";" equ ";" colos ";" gtorp ";" align ";" exp ";" shipnum ";" shiptype
   now=_getservertime("stamp")
   call _getbusts bname, now-bust_clear*86400
   shipnum_list=""
   shiploc_list=""
   holdmax_list=""
   plannum_list=""

/* pick ships */
   list=_pickships("choose ships to SDT with:",redships)
   do i=1 to _dwords(shiplist,";")
    line=_dword(list,i,";")
    shipnum_list=shipnum_list||" "||_dword(line,1,",")
    shiploc_list=shiploc_list||" "||_dword(line,2,",")
    holdmax_list=holdmax_list||" 0"
    plannum_list=plannum_liat||" 0"
   end /*do*/
   shipnum_list=strip(shipnum_list)
   shiploc_list=strip(shiploc_list)
   holdmax_list=strip(holdmax_list)

/* main loop */
   state=""
   i=1
   done=0
   do while \done

    ans=zocwaitmux(muxline)
    line=strip(_lastline())

    select

     when ans=0 then call zocsend "#"
     when ans=1 then do
      parse var line temp "Report Sector " sec ": " e_name "'s " e_ship " entered sector."
      if temp="" | temp="Deployed Fighters " then do
       call zocsend "'danger in "||sec||" "||e_name||" ("||_abbrv_words(e_ship,3)||")^M"
      end /*if*/
     end /*when*/
     when ans=2 then nop

     when ans=0 + idl_n then do /* command prompt */
      parse var line . "TL=" timeleft "]:[" sector "]" .
     end /*when*/

     when ans=0 + idl_n + pmt_n then do /* script command */
      parse var line c . "-" t . m . p " ::"
      p=zocstring("REPLACE",p," : ",";")
      t=strip(lower(t))
      m=lower(m)
      if left(p,1)=";" then p=substr(p,2)
      select
       when t="cmd" & c="R" & m="bust_clr" then call _bust_tool "BUST_CLR", sector, _getservertime("stampt2"), bname
       when t="cmd" & c="R" & m="status"   then call zocsend "'rev-msg : status : "||ship.1||" "||ship.2||" ::^M"
       when t="msg" & c="R" & m="status"   then do
        n1=word(p,1)
        n2=word(p,2)
        avail.=1
        avail.n1=0
        avail.n2=0
       end /*when*/
       when t="cmd" & c="R" & m="setup"    then do
        call zocsend "'rev-msg : setup : ships : "||shipnum_list||" ::^M"
        call zocsend "'rev-msg : setup : planets : "||plannum_list||" ::^M"
       end /*when*/
       otherwise nop
      end /*select*/
     end /*when*/
     when ans=1 + idl_n + pmt_n then do /* success */
      call zocsend "'success "||sector||"^Mltnl3^Mq<pr^Ms3^M"
     end /*when*/
     when ans=2 + idl_n + pmt_n then do /* busted */
      stamp=_getservertime("stamp")
      call zocsend "'rev-cmd : bust_clr : "||sector||" : "||stamp||" ::^M"
      call zocsend "ttrev-cmd : bust_clr : "||sector||" : "||stamp||" ::^M^Mq"
      call _bust_tool "BUST_ADD", sector, stamp, bname
     end /*when*/
     when ans=3 + idl_n + pmt_n then do /* not enough products */
      call zocsend "'negotiate "||sector||"^M"
     end /*when*/
     when ans=4 + idl_n + pmt_n then do /* zero steal */
     end /*when*/
     when ans=5 + idl_n + pmt_n then do /* turns left */
     end /*when*/
     when ans=6 + idl_n + pmt_n then do /* experience */
     end /*when*/
     when ans=7 + idl_n + pmt_n then do /* port statistics */
      line=strip(_grabit("^M"))
      do while line\=""
       parse var line prod "  " type amount percent "%" onboard
       percent=strip(percent)
       line=strip(_grabit("^M"))
      end /*do*/
     end /*when*/
     when ans=8 + idl_n + pmt_n then do /* port statistics */
      line=strip(_grabit("^M"))
      do while line\=""
       parse var line prod "  " type amount ondock onboard .
       line=strip(_grabit("^M"))
      end /*do*/
     end /*when*/

     otherwise nop
    end /*select*/
   end /*do*/

exit

/* STEAL WITH CN9 ALL KEYS
Command [TL=00:00:00]:[2967] (?=Help)? : P


Enter your choice [T] ? R
<Thievery>

[Pause]

(R)ob this port, (S)teal product or (Q)uit (?=Help) S


Which product? (1)Fuel Ore, (2)Organics or (3)Equipment (Q=Quit) ? 3


How many holds of Equipment to swipe? [85]
You start your droids loading the cargo and Success!

Command [TL=00:00:00]:[2967] (?=Help)? :
*/

/* TRADE WITH CN9 ALL KEYS
Command [TL=00:00:00]:[2967] (?=Help)? : P


Enter your choice [T] ? T
<Port>

How many holds of Equipment do you want to sell [85]?
Agreed, 85 units.

Your offer [12,602] ?
You drive a hard bargain, but we'll take them.

How many holds of Fuel Ore do you want to buy [85]? 0


How many holds of Organics do you want to buy [85]? 0


Command [TL=00:00:00]:[2967] (?=Help)? :
*/

/* DUMP WITH CN9 ALL KEYS
Command [TL=00:00:00]:[2967] (?=Help)? : L
<Preparing ship to land on planet surface>
Planet command (?=help) [D] T
<Take/Leave Products>

Display planet? No
(L)eave or (T)ake Product? [T] L
Which product are you leaving?

(1)Ore, (2)Org or (3)Equipment ? 3
How many holds of Equipment do you want to leave ([85] on board) ?
You unload the Equipment from your ship.
Planet command (?=help) [D] Q


Command [TL=00:00:00]:[2967] (?=Help)? :
*/

/* NEGOTIATE WITH CN9 ALL KEYS
Command [TL=00:00:00]:[742] (?=Help)? : P


Enter your choice [T] ? N
<Negotiate Planetary TradeAgreement>

Negotiate agreement with which planet <Q to abort> ? 6


How many units of Equipment do you want to sell [408]?
Agreed, 408 units.

Your offer [52,498]?
You insult my intelligence, but we'll buy them anyway.

Command [TL=00:00:00]:[742] (?=Help)? :
*/

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.4 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. (globals)

     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwt. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _bust. _vs. _vn. _vi. _mcic. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. _msg _msg. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _synchronize v.5 **/
    _synchronize: procedure expose (globals)

     synchw=_synchronize_vars("w")
     synchr=_synchronize_vars("r")

     call zocsend "&&"
     ans=_waitmux("&&|Pausing is")
     select
      when ans=0 then return "unknown_text_entry"
      when ans=1 then nop
      when ans=640 then return "timeout"
      otherwise nop
     end /*select*/

     ans=_waitmux(synchw)
     select
      when ans=640 then rslt="timeout"
      when ans>0 then do
       if _wait("Pausing is")=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=_dword(synchr,ans+1,";")

     select
      when rslt="computer" then do
       call zocsend "q"
       ans=_waitmux("Command [","Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=_waitmux("Command [","Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
    exit

/** _ini_load_settings v.1 **/
    _ini_load_settings: procedure expose (globals)

     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("WindowTitle") with . '="' gname '"'

     lpath=_get_log_path()
     spath=_get_script_path()
     dpath=_get_download_path()

     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then gname=_setgame()
     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then exit
     dname=dosfname(lpath||gname||"_data.ini")

     _ini.="##UNDEF##"

     sectionlist=""
     if _fileopenr(dname) then do
      insection=0
      do while \_fileeof(dname)
       line=strip(linein(dname))
       if _ini_is_section(line) then do
        insection=1
        parse var line "[" section "]"
        section=strip(section)
        if sectionlist="" then sectionlist=section; else sectionlist=sectionlist||";"||section
       end /*if*/
       else do
        if insection then do
         parse var line k "=" v
         v=_ini_format_value(v)
         k="!"||section||".!"||strip(k)
         if k\="!"||section||".!" then _ini.k=strip(v)
        end /*if*/
       end /*else*/
      end /*while*/
      call _fileclose dname
     end /*if*/

     call _iniv "!settings", "!ldefault", ldefault
     call _iniv "!settings", "!lpath",  lpath
     call _iniv "!settings", "!spath",  spath
     call _iniv "!settings", "!dpath",  dpath
     call _iniv "!settings", "!dname",  dname
     call _iniv "!settings", "!gname",  gname
     call _iniv "!settings", "!lname",  lpath||gname||"_log.txt"
     call _iniv "!settings", "!fname",  lpath||gname||"_figs.txt"
     call _iniv "!settings", "!vname",  lpath||gname||"_voids.txt"
     call _iniv "!settings", "!vwname", lpath||gname||"_view.txt"
     call _iniv "!settings", "!pname",  lpath||gname||".prt"
     call _iniv "!settings", "!sname",  lpath||gname||".sct"
     call _iniv "!settings", "!rpname", lpath||gname||"_ref.prt"
     call _iniv "!settings", "!rsname", lpath||gname||"_ref.sct"
     call _iniv "!settings", "!mname",  lpath||gname||".map"
     call _iniv "!settings", "!zname",  lpath||gname||".ztm"
     call _iniv "!settings", "!nfname", lpath||gname||"_nearfig.txt"

    return sectionlist

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _getinfo v.5 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=32*1024
     call zocreceivebuf bufflen
     call zocsend "/"
     if _wait("Sect ")=640 then call _error "timeout"
     if _wait("Ship ")=640 then call _error "timeout"
     if _wait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, "  ~;", d2c(0)||d2c(10)||d2c(13)||d2c(179)),1)
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     buff2=strip(_dword(buff,1,"~"))
     do i=2 to _dwords(buff,"~")
      buff2=buff2||";"||strip(_dword(buff,i,"~"))
     end
     buff=buff2
     drop buff2

     /* analyze buffer */
     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/
     c=c+1
     vr.c="all"
     vl.c=buff

     /* set gobal vars */
     _qs.!corp=0
     do i=1 to c
      tag="!"||upper(vr.i)
      _qs.tag=vl.i
     end /*do*/

     /* pass our requested stats */
     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _getservertime v.7 **/
    _getservertime: procedure expose (globals)

     /* get real date/time values */
        parse value date("N") with . . year
        parse value date("O") with . "/" month "/" day
        sod=time("S")
        parse value time("N") with hr ":" mn ":" sc
        doy=date("D")
        base=date("B")
        leapyear=abs((year//4=0)-1)
        base=base-_baseday.2000
        base_sec=base*86400+sod

     /* get game date/time values */
        if _g.!timediff="_G.!TIMEDIFF" then do
         if _sendwait("ct","(?=Help)? T")=640 then call _error "timeout"
         if _waitmux(", "||year+11||"|, "||year+12||"|, "||year+13)=640 then call _error "timeout"
         parse value _lastline() with g_hr ":" g_min ":" g_sec g_ampm . g_month g_day ", " g_year .
         call zocsend "q"
         g_year=g_year-12
         if g_ampm="PM" & g_hr\=12 then g_hr=g_hr+12
         g_month=lower(g_month)
         do i=12 to 1 by -1
          if g_month=_dword(_monthnames,i,";") then leave
         end /*do*/
         g_month=i
         parse value _calc_base_date(g_year, g_month, g_day, g_hr, g_min, g_sec) with g_base ";" g_doy ";" g_sod ";" g_base_sec
         _g.!timediff=base_sec-g_base_sec
        end /*if*/
        else do
         g_base_sec=base_sec-_g.!timediff
         g_sod=g_base_sec//86400
         g_base=g_base_sec%86400
         do i=2000 to 2008
          if (_baseday.i-_baseday.2000)<=g_base then g_year=i
         end /*do*/
         g_doy=g_base-_baseday.g_year+_baseday.2000
        end /*else*/

     select
      when arg(1)="seconds"   then rslt=g_sod
      when arg(1)="minutes"   then rslt=g_sod%60
      when arg(1)="hours"     then rslt=g_sod%3600
      when arg(1)="stamp_old" then rslt=g_year-2000||copies("0",3-length(g_doy))||g_doy||copies("0",5-length(g_sod))||g_sod
      when arg(1)="stamp"     then rslt=g_base_sec
      otherwise                    rslt=g_base_sec
     end /*select*/
    return rslt

/** _getbusts v.2 **/
    _getbusts: procedure expose (globals)
     fname=arg(1)
     if arg(2,"E") then safedate=arg(2)
                   else safedate=0
     _bust.=0
     max=0

     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=linein(fname)
       parse var line cmd . sector . stamp .
       if lower(sector)\="all" & sector\="" then max=max(max,sector)
       select
        when cmd="BUST_CLR" & (lower(sector)="all" | sector=0) then do
         do i=1 to max
          if stamp>abs(_bust.i) & _bust.i\=0 then _bust.i=-stamp
         end /*do*/
        end /*when*/
        when abs(_bust.sector)>stamp then nop
        when cmd="BUST_ADD" & safedate=0     then _bust.sector=stamp
        when cmd="BUST_ADD" & safedate>stamp then _bust.sector=-stamp
        when cmd="BUST_CLR"                  then _bust.sector=-stamp
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname
     end /*if*/

     call _newline _ansi("bt;fwh")
     call zocwriteln "BUST LIST:"
     count=0
     earliest=999999999
     do i=1 to max
      if _bust.i>0 then do
       count=count+1
       call zocwrite _pad(i,6,"R")
       earliest=min(earliest,_bust.i)
       if count//12=0 then call zocwriteln
      end /*if*/
     end /*do*/
     if count//12>0 then call zocwriteln

    return earliest

/** _pickships v.4 **/
    _pickships: procedure expose (globals)
     msg=arg(1)
     if msg="" then msg="choose ships:"
     shiplist=arg(2)
     buflen=16*1024

     /* get current ship from CZQ list */
     call zocreceivebuf buflen
     call zocsend "czq"
     if zocwait("<Active Ship Scan>")=640 then call _error "timeout"
     if zocwait("(?=Help)? :")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(0)||d2c(10))
     if length(buff)=buflen then call _error "buffer overflow"
     i=pos("----------",buff)
     if i>0 then i=pos(d2c(13),buff,i)+1
     if i>1 then j=pos(d2c(13),buff,i)
     c=0
     do while i>0 & j>0
      line=strip(substr(buff,i,j-i))
      if line="" then leave
      parse var line shipnum shiploc
      if pos("+",shiploc)>0 then do
       c=c+1
       plus=pos("+",line)
       current.c=1
       line=left(line,plus-1)||" "||substr(line,plus+1)
       parse var line shipnum.c shiploc.c line
       shipname.c=left(line,20)
       line=substr(line,21)
       if right(shipname.c,4)="Corp" then shipname.c=left(shipname.c,length(shipname.c)-5)
       parse var line figs.c shields.c hops.c shiptype.c
       shipname.c=strip(shipname.c)
       shiptype.c=strip(shiptype.c)
       if pos("T",figs.c)>0 then figs.c=strip(translate(figs.c," ", "T"))*1000
       if pos("T",shields.c)>0 then shields.c=strip(translate(shields.c," ", "T"))*1000
       if shiplist\="" then do
        found=0
        do k=1 to _dwords(shiplist,";")
         if pos(lower(strip(_dword(shiplist,k,";"))),lower(shiptype.c))>0 then found=1
         if found then leave
        end /*do*/
        if \found then c=c-1
       end /*if*/
      end /*if*/
      i=j+1
      j=pos(d2c(13),buff,i)
     end /*do*/

     /* get ships from XQ */
     call zocreceivebuf buflen
     call zocsend "x^Mzqzn"
     if zocwait("<Transport to Ship>")=640 then call _error "timeout"
     if zocwait("(?=Help)? :")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(0)||d2c(10))
     if length(buff)=buflen then call _error "buffer overflow"
     i=pos("----------",buff)
     if i>0 then i=pos(d2c(13),buff,i)+1
     if i>1 then j=pos(d2c(13),buff,i)
     do while i>0 & j>0
      line=strip(substr(buff,i,j-i))
      if line="" then leave
      c=c+1
      current.c=0
      parse var line shipnum.c shiploc.c line
      shipname.c=left(line,20)
      line=substr(line,21)
      if right(shipname.c,4)="Corp" then shipname.c=left(shipname.c,length(shipname.c)-5)
      parse var line figs.c shields.c hops.c shiptype.c
      shipname.c=strip(shipname.c)
      shiptype.c=strip(shiptype.c)
      if pos("T",figs.c)>0 then figs.c=strip(translate(figs.c," ", "T"))*1000
      if pos("T",shields.c)>0 then shields.c=strip(translate(shields.c," ", "T"))*1000
      if shiplist\="" then do
       found=0
       do k=1 to _dwords(shiplist,";")
        if pos(lower(_dword(shiplist,k,";")),lower(shiptype.c))>0 then found=1
        if found then leave
       end /*do*/
       if \found then c=c-1
      end /*if*/
      i=j+1
      j=pos(d2c(13),buff,i)
     end /*do*/

     /* sort ship list by ship number */
     do i=1 to c
      do j=i+1 to c
       if shipnum.i>shipnum.j then do
        temp=shipnum.i
        shipnum.i=shipnum.j
        shipnum.j=temp
        temp=shiploc.i
        shiploc.i=shiploc.j
        shiploc.j=temp
        temp=shipname.i
        shipname.i=shipname.j
        shipname.j=temp
        temp=shiptype.i
        shiptype.i=shiptype.j
        shiptype.j=temp
        temp=figs.i
        figs.i=figs.j
        figs.j=temp
        temp=shields.i
        shields.i=shields.j
        shields.j=temp
        temp=current.i
        current.i=current.j
        current.j=temp
       end /*if*/
      end /*do*/
     end /*do*/

     /* pick ships */
     menu=""
     do i=1 to c
      menu=menu||";"||_pad(shipnum.i,3,"R")
      menu=menu||_pad(shiploc.i,6,"R")
      menu=menu||"  "||shiptype.i
      if current.i then menu=menu||" **"
      num=shiploc.i
      if _bust.num>0 then menu=menu||" B"
      if num=lra then menu=menu||" L"
     end /*do*/
     menu=substr(menu,2)
     ans=_mrequestlist(msg,menu,";","c")
     rslt=""
     do i=1 to c
      if _dword(ans,i,";") then rslt=rslt||";"||shipnum.i||","||shiploc.i||","||shiptype.i||","||shipname.i
     end /*do*/
     rslt=substr(rslt,2)
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _abbrv_words v.1 **/
    _abbrv_words: procedure expose (globals)
     rslt=""
     if \arg(2,"E") then len=4
     else len=arg(2)
     do i=1 to words(arg(1))
      w=word(arg(1),i)
      select
       when len<1 then nop
       when len=1 then rslt=rslt||" "||left(w,1)
       when len>2 then rslt=rslt||" "||left(w,1)||strip(left(_space(translate(substr(w,2),"          ","aeiouAEIOU"),0),len-1))
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(rslt)
    return rslt

/** _bust_tool v.1 **/
    _bust_tool: procedure expose (globals)
     cmd=arg(1)
     sector=arg(2)
     stamp=arg(3)
     fname=arg(4)
     note=arg(5)
     msg=upper(cmd)||" : "||_pad(sector,5,"R")||" : "||stamp
     if note\="" then msg=msg||" : "||note
     if _fileopenw(fname) then do
      call lineout fname, msg
      call _fileclose fname
     end /*if*/
     else call _error "unable to open file "||fname||"."
    return

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if _wait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _synchronize_vars v.1 **/
    _synchronize_vars: procedure expose (globals)
     select
      when arg(1)="w" then rslt="Pausing",
                              ||"|Command [",
                              ||"|Citadel command",
                              ||"|Planet command",
                              ||"|<StarDock>",
                              ||"|ship to sell",
                              ||"|Still interested ?",
                              ||"|wish to buy? (A,B,C,Q,?)",
                              ||"|<Galactic Bank>",
                              ||"|<Hardware Emporium>",
                              ||"|<Shipyards>",
                              ||"|<Tavern>",
                              ||"|Enter your choice [T] ?",
                              ||"|do you want to sell [",
                              ||"|do you want to buy [",
                              ||"|Computer command",
                              ||"|Corporate command",
                              ||"|Colonists? [T]",
                              ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]",
                              ||"|`",
                              ||"|F: ",
                              ||"|'",
                              ||"|S: ",
                              ||"|M: ",
                              ||"|P: "
      when arg(1)="r" then rslt="unknown;command;citadel;planet;stardock;ship_sell;ship_sell_interested;class_0",
                             ||";bank;hardware;shipyards;tavern;port_menu;port_haggle;port_haggle;computer",
                             ||";corporate;terra;stop_in_this_sector?;fedcom_text_entry_1;fedcom_text_entry_2",
                             ||";subspace_text_entry_1;subspace_text_entry_2;mail_text_entry;private_text_entry",
                             ||";corporate_cit;computer_cit;unknown_text_entry" /* <-- these unmatched in the wait string above */
      when arg(1)="command" then rslt=" ; ;qq;q;q;qqq;nqq;q;qq;qq;qq;qq;q;0^Mz0^Mz0^M;0^Mz0^Mz0^M;q;q;q;y;^H;^M;^H;^M;^M;^M;qqq;qqq; "
      when arg(1)="computer" then rslt=" ;c;c;qc;qc;qqqc;nqqc;qc;qqc;qqc;qqc;qqc;qc;0^Mz0^Mz0^Mc;0^Mz0^Mz0^Mc; ;qc;qc;yc;^Hc;^Mc;^Hc;^Mc;^Mc;^Mc;qc;qc; "
      otherwise call _error "unknown argument in _synchronize_vars"
     end /*select*/
    return rslt

/** _waitmux v.1 **/
    _waitmux: procedure expose (globals)
     rslt=zocwaitmux(arg(1))
    return rslt

/** _wait v.1 **/
    _wait: procedure expose (globals)
     rslt=zocwait(arg(1))
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _get_log_path v.2 **/
    _get_log_path: procedure expose (globals)
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_path"
    return lpath

/** _get_script_path v.1 **/
    _get_script_path: procedure expose (globals)
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _get_download_path v.2 **/
    _get_download_path: procedure expose (globals)
     parse value zocgetglobaloption("DownloadAltPath") with . '="' dpath '"'
     dpath=dosfname(dpath)
     if right(dpath,1)\="\" then dpath=dpath||"\"
     if \dosisdir(dpath) then call _error "invalid path in _get_download_path"
    return dpath

/** _setgame v.6 **/
    _setgame: procedure expose (globals)

     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid log path in _setgame"

     if arg(1,"E") then gname=arg(1)
     else do
      list=_ini_list_games(lpath)
      if c=0 then gname="CLEAR"
      else gname=_drequestlist("select a game:", list||";CLEAR", ";", "c")
     end /*if*/
     if gname="CLEAR" | gname="" then gname="%ZOCORHOST% %OPTIONS%"
     call zocsetglobaloption 'WindowTitle="'||gname||'"'
    return gname

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

    _ini_is_section: procedure expose (globals)
     s=strip(arg(1))
     if left(s,1)="[" & left(reverse(s),1)="]" then return 1
    return 0

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

    _iniv: procedure expose (globals)
     s=arg(1); v=arg(2)
     if arg(3,"E") then _ini.s.v=arg(3)
    return _ini.s.v

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=_wait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _calc_base_date v.3 **/
    /* v.3 tested */
    _calc_base_date: procedure expose (globals)

     yr=arg(1); mm=arg(2); dd=arg(3); hr=arg(4); mn=arg(5); sc=arg(6)

     /* leapyear? */
        leapyear=abs((yr//4=0)-1)

     /* day of year */
        doy=dd-1
        do i=1 to mm-1
         doy=doy+_dword(_monthdays,i,";")
        end /*do*/
        if mm>2 & leapyear then doy=doy+1

     /* base day since 2000 */
        base=_baseday.yr-_baseday.2000+doy

     /* seconds of day */
        sod=((hr*60)+mn)*60+sc

     /* base day in seconds */
        base_sec=base*86400+sod

     rslt=base||";"||doy||";"||sod||";"||base_sec

    return rslt

/** _newline v.3 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     if arg(1,"E") then call zocwrite arg(1)
    return

/** _pad v.2 **/
    _pad: procedure expose (globals)
     rslt=arg(1)
     if arg(2,"E") then w=arg(2); else return rslt
     if \arg(3,"E") then m="L"; else m=lower(arg(3))
     if \arg(4,"E") then p=" "; else p=left(arg(4),1)
     select
      when m="l" then rslt=left(rslt,w,p)
      when m="r" then rslt=reverse(left(reverse(rslt),w,p))
      when m="c" then rslt=center(rslt,w,p)
      otherwise       rslt=left(rslt,w,p)
     end /*select*/
    return rslt

/** _mrequestlist v.3 **/
    _mrequestlist: procedure expose (globals)
     do i=1 to 2
      if \arg(i,"E") then call _error "missing parameter in _mrequestlist"
     end /*do*/
     msg=arg(1)
     list=arg(2)
     if list="" then call _error "empty list in _mrequestlist"
     if arg(3,"E") then delim=arg(3); else delim=";"
     if arg(4,"E") then mode=arg(4); else mode=""
     if arg(5,"E") then default=arg(5); else default=""

     yes="> "
     no="   "

     if default="" then do
      rslt=0
      menu="   DONE"||delim||no||_dword(list,1,delim)
      count=_dwords(list,delim)
     end /*if*/
     else do
      rslt=_dword(default,1,delim)
      if rslt then menu="   DONE"||delim||yes||_dword(list,1,delim)
      else menu="   DONE"||delim||no||_dword(list,1,delim)
      count=min(_dwords(list,delim),_dwords(default,delim))
     end /*else*/

     if count>1 then do
      do i=2 to count
       if default="" then flag=no
       else do
        if _dword(default,i,delim) then flag=yes
        else flag=no
       end /*else*/
       menu=menu||delim||flag||_dword(list,i,delim)
       if default="" then rslt=rslt||delim||0
       else rslt=rslt||delim||_dword(default,i,delim)
      end /*do*/
     end /*if*/

     i=_drequestlisti(msg,menu,delim)

     do while i>1
      menu="   DONE"
      temp=""
      do j=1 to _dwords(list,delim)
       if j=(i-1) then do
        if _dword(rslt,j,delim) then do
         menu=menu||delim||no||_dword(list,j,delim)
         if temp="" then temp=0
         else temp=temp||delim||0
        end /*if*/
        else do
         menu=menu||delim||yes||_dword(list,j,delim)
         if temp="" then temp=1
         else temp=temp||delim||1
        end /*else*/
       end /*if*/
       else do
        if temp="" then temp=_dword(rslt,j,delim)
        else temp=temp||delim||_dword(rslt,j,delim)
        if _dword(rslt,j,delim) then menu=menu||delim||yes||_dword(list,j,delim)
        else menu=menu||delim||no||_dword(list,j,delim)
       end /*else*/
      end /*do*/
      rslt=temp
      i=_drequestlisti(msg,menu,delim)
     end /*do*/

     if lower(mode)="c" & i=0 then call _quit "script cancelled by user."

     dmax=_dwords(default,";")
     lmax=_dwords(list,";")
     if dmax>lmax then do
      do i=dmax+1 to lmax
       rslt=rslt||delim||_dword(default,i,";")
      end /*do*/
     end /*if*/

    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenw"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN WRITE"
       call stream arg(1), "C", "SEEK <0"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _ini_list_games v.1 **/
    _ini_list_games: procedure expose (globals)
     lpath=arg(1)
     parse value zoclistfiles(lpath||"*_data.ini", ";") with c list
     if c=0 then rslt=""
     else do
      n=_dword(list,1,";")
      rslt=left(n,lastpos("_data.ini",n)-1)
      do i=2 to c
       n=_dword(list,i,";")
       rslt=rslt||";"||left(n,lastpos("_data.ini",n)-1)
      end /*do*/
     end /*else*/
    return rslt

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt

/** _drequestlisti v.2 **/
    _drequestlisti: procedure expose (globals)
     do i=1 to 3
      if \arg(i,"E") then call _error "missing parameter in _drequestlisti"
     end /*do*/
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     if i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
                                else rslt=i+1
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1
