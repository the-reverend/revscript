/* REXX _fig_distance.zrx by the reverend (build 9)                           */
/*-       built by rev-builder version 1.3a on 17 Oct 2003 at 12:59:25       -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ------------------*/ _g.!sname="_fig_distance.zrx" /*------------------- -*/
/*- ---------------*/ _g.!sbuild=9; _g.!sdate="2003-10-17" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 60
call zocsynctime 300
globals=_setglobals("targetlist. macro_name")
call on halt name _halt

gdistance=_askint("what is furthest allowable distance?",1,"c")

/* load ini variables */
   load="ns fname vname mname vwname gname dname nfname"
   sl=_ini_load_settings()
   do i=1 to _dwords(sl,";")
    s=_dword(sl,i,";")
    globals=globals||" !"||s
    interpret '!'||s||'="!"||s'
   end;
   f=0; l=""
   do i=1 to words(load)
    s=word(load,i)
    x="!"||s
    interpret s||"=_ini.!settings.x"
    interpret 'if '||s||'="##UNDEF##" then do; l=l s; f=1; end'
   end; if f then call _error "missing config variable(s):"||l; drop load s sl x f l

   bot_name=_iniv(!settings,"!bot_name")
   if _undef(bot_name) then bot_name=_random_pwd(2)

   warning=_iniv(!settings,"!warning")
   target=_iniv(!settings,"!target")
   ignore=_iniv(!settings,"!ignore")
   if _undef(warning) then warnlist=""; else warnlist=warning
   if _undef(target) then targetlist.1=""; else targetlist.1=target
   if _undef(ignore) then targetlist.2=""; else targetlist.2=ignore

   alpha=_iniv(!settings,"!alpha")
   rylos=_iniv(!settings,"!rylos")
   sd=_iniv(!settings,"!sd")
   if _undef(alpha) then alpha=0
   if _undef(rylos) then rylos=0
   if _undef(sd) then sd=0

   cmc=1
   x="!custom_nam_"||cmc; custom_nam.cmc=_ini.!responder.x
   x="!custom_pmt_"||cmc; custom_pmt.cmc=_ini.!responder.x
   x="!custom_mac_"||cmc; custom_mac.cmc=_ini.!responder.x
   do while \_undef(custom_mac.cmc)
    cmc=cmc+1
    x="!custom_nam_"||cmc; custom_nam.cmc=_ini.!responder.x
    x="!custom_pmt_"||cmc; custom_pmt.cmc=_ini.!responder.x
    x="!custom_mac_"||cmc; custom_mac.cmc=_ini.!responder.x
   end /*do*/
   cmc=cmc-1

/* GET FIG AND SECTORCIM INFO */
   reclen=_mapinit(mname)
   call _getfigs fname, "file"
   srch="r:1;f:1"

			jj=0
			do i = 1 to ns
				if _f.i \=1 then do
					target=i
					find=_mapfind(target,srch,mname,reclen,255)
					call _report_find "nearest fig", target, find, srch
					if _dist.find.target >= gdistance then do
						jj=jj+1
						_secstosearch.jj.0 = target
						if _dist.find.target\=255 then _secstosearch.jj.2 = translate(_path.find.target,">",";")
						else _secstosearch.jj.2 = "cim mapping error. unable to calculate."
					 _secstosearch.jj.1 = _dist.find.target
					end /*if*/
				end /*if*/
			end /*do*/

			/*bubble sort*/

			do i = 1 to jj
			 do k = i to jj
					t1=_secstosearch.i.0
					t2=_secstosearch.i.1
					t3=_secstosearch.i.2

					if _secstosearch.i.1 < _secstosearch.k.1 then do
						_secstosearch.i.0 = _secstosearch.k.0
						_secstosearch.i.1 = _secstosearch.k.1
						_secstosearch.i.2 = _secstosearch.k.2

						_secstosearch.k.0 = t1
					 _secstosearch.k.1 = t2
						_secstosearch.k.2 = t3
					end /*if*/
				end /*do*/
			end /*do*/
		if _fileexists(nfname) then call dosdel nfname
		if _filenew(nfname) then do
			call zocwrite _ansi("bt;fye")
			maxstrlength=6
			padlength=0
			padstring=""

			do i = 1 to jj
				padlength=maxstrlength-length(_secstosearch.i.0)
				padstring=""
				do k = 1 to padlength
					padstring=padstring||" "
				end /*do*/
			 call lineout nfname, _secstosearch.i.0 || padstring || ":  " || _secstosearch.i.1 || "  :  " || _secstosearch.i.2
			end /*do*/

			call _fileclose(fname)
			call zocwriteln " "||_ansi("dl;fmg")
		end /*if*/
		call zocwriteln "^[[1;33m< finished writing " || nfname || " >^[[0m "
	exit

_report_find: procedure expose (globals)
  prefix=arg(1)
  strt=arg(2)
  find=arg(3)
  srch=arg(4)
  msg=find
  if _p.find\="" then msg=msg||" "||_dword(_p.find,1,";")

  if pos("r:1",srch)>0 ,
   then do
   	msg=msg||" - ("||_dist.find.strt||" hops)" translate(_path.find.strt,">",";")
   	/*call zocwriteln "1" || "^M"*/
   end
   else do
    msg=msg||" - ("||_dist.strt.find||" hops)" translate(_path.strt.find,">",";")
    /*call zocwriteln "2" || "^M"*/
   end
  /*call zocwriteln "'"||prefix||" : "||msg||"^M"*/

return

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.4 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. (globals)

     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwt. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _bust. _vs. _vn. _vi. _mcic. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. _msg _msg. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _ini_load_settings v.1 **/
    _ini_load_settings: procedure expose (globals)

     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("WindowTitle") with . '="' gname '"'

     lpath=_get_log_path()
     spath=_get_script_path()
     dpath=_get_download_path()

     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then gname=_setgame()
     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then exit
     dname=dosfname(lpath||gname||"_data.ini")

     _ini.="##UNDEF##"

     sectionlist=""
     if _fileopenr(dname) then do
      insection=0
      do while \_fileeof(dname)
       line=strip(linein(dname))
       if _ini_is_section(line) then do
        insection=1
        parse var line "[" section "]"
        section=strip(section)
        if sectionlist="" then sectionlist=section; else sectionlist=sectionlist||";"||section
       end /*if*/
       else do
        if insection then do
         parse var line k "=" v
         v=_ini_format_value(v)
         k="!"||section||".!"||strip(k)
         if k\="!"||section||".!" then _ini.k=strip(v)
        end /*if*/
       end /*else*/
      end /*while*/
      call _fileclose dname
     end /*if*/

     call _iniv "!settings", "!ldefault", ldefault
     call _iniv "!settings", "!lpath",  lpath
     call _iniv "!settings", "!spath",  spath
     call _iniv "!settings", "!dpath",  dpath
     call _iniv "!settings", "!dname",  dname
     call _iniv "!settings", "!gname",  gname
     call _iniv "!settings", "!lname",  lpath||gname||"_log.txt"
     call _iniv "!settings", "!fname",  lpath||gname||"_figs.txt"
     call _iniv "!settings", "!vname",  lpath||gname||"_voids.txt"
     call _iniv "!settings", "!vwname", lpath||gname||"_view.txt"
     call _iniv "!settings", "!pname",  lpath||gname||".prt"
     call _iniv "!settings", "!sname",  lpath||gname||".sct"
     call _iniv "!settings", "!rpname", lpath||gname||"_ref.prt"
     call _iniv "!settings", "!rsname", lpath||gname||"_ref.sct"
     call _iniv "!settings", "!mname",  lpath||gname||".map"
     call _iniv "!settings", "!zname",  lpath||gname||".ztm"
     call _iniv "!settings", "!nfname", lpath||gname||"_nearfig.txt"

    return sectionlist

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
    exit

    _iniv: procedure expose (globals)
     s=arg(1); v=arg(2)
     if arg(3,"E") then _ini.s.v=arg(3)
    return _ini.s.v

    _undef: procedure expose (globals)
     if arg(1)="##UNDEF##" then return 1; else return 0

/** _random_pwd v.3 **/
    _random_pwd: procedure expose (globals)
     if arg(1,"E") then w=arg(1); else w=6
     if arg(2,"E") then n=arg(2); else n=4
     if n=0 then set.0=arg(3)
     set.1="1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.2="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.3="1234567890abcdefghijklmnopqrstuvwxyz"
     set.4="34679abcdefghijkmnopqrstuvwxyzACDEFGHJKLMNPQRTUVWXY"
     set.5="abcdefghijklmnopqrstuvwxyz"
     set.6="bcdfghjklmnpqrstvwxz"
     set.7="aeiouy"
     set.8="BCDFGHJKLMNPQRSTVWXZ"
     set.9="AEIOUY"
     rslt=""
     len=length(set.n)
     do i=1 to w
      ch=substr(set.n,random(1,len),1)
      rslt=rslt||ch
     end /*do*/
    return rslt

/** _mapinit v.5 **/
    _mapinit: procedure expose (globals)
     fname=arg(1)
     if arg(2,"E") then m=arg(2); else m=0
     select
      when m=0 then nop
      when m=1 then drop _p. _s. _dist. _path. _dtomsl. _dfrmsl. _bg. _nwt. _nwi. _nwo. _nw. _od. _sv. _pv.
      otherwise nop
     end /*select*/
     if _f.0="_F.0" then _f.=0
     if _l.0="_L.0" then _l.=0
     if _m.0="_M.0" then _m.=0
     if _s.0="_S.0" then _s.=""
     if _p.0="_P.0" then _p.=""
     if _dist.0.0="_DIST.0.0" then _dist.=255
     if _path.0.0="_PATH.0.0" then _path.=""
     if _dtomsl.0="_DTOMSL.0" then _dtomsl.=255
     if _dfrmsl.0="_DFRMSL.0" then _dfrmsl.=255
     if _bg.0="_BG.0" then _bg.=0
     if _nwt.0="_NWT.0" then _nwt.=0
     if _nwi.0="_NWI.0" then _nwi.=0
     if _nwo.0="_NWO.0" then _nwo.=0
     if _nw.0="_NW.0" then _nw.=0
     if _od.0="_OD.0" then _od.=0
     if _sv.0="_SV.0" then _sv.=0
     if _pv.0="_PV.0" then _pv.=0
     if _sl.0="_SL.0" then _sl.=0
     if _ex.0="_EX.0" then _ex.=0
     if _bust.0="_BUST.0" then _bust.=0
     if _v.0="_V.0" then _v.=0
     if _vs.0="_VS.0" then _vs.=0
     if _vn.0="_VN.0" then _vn.="(na)"
     if \_fileopenr(fname) then call _error "unable to open map file: "||fname
     reclen=c2d(charin(fname))
    return reclen

/** _getfigs v.13 **/
    _getfigs: procedure expose (globals)
     fname=arg(1)
     mode=arg(2)
     _f.=0
     c=0
     w=100
     if lower(mode)="file" then do
      if _fileopenr(fname) then do
       call zocwrite _ansi("bt;fye")
       mon=_spinner(0,w,"FfFfF")
       do while \_fileeof(fname)
        n=linein(fname)
        if _stripint(n)\=0 then do
         _f.n=1
         c=c+1
         mon=_spinner(mon,w,"FfFfF")
        end /*if*/
       end /*do*/
       call _fileclose(fname)
       call zocwrite " ("||c||") "||_ansi("dl;fmg")
      end /*if*/
     end /*if*/
     else do
      buflen=2048*1024
      call zocreceivebuf buflen
      call zocsend "g"
      if zocwait("Deployed  Fighter  Scan")=640 then call _error "timeout"
      ans=0
      do while ans=0
       ans=zocwaitmux("r","Total","deployed")
      end /*do*/
      if ans=640 then call _error "timeout"
      buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
      if length(buff)=buflen then call _error "buffer overflow"
      call zocwrite _ansi("bt;fye")

      s=0
      i=0
      j=0
      i=pos(d2c(13),buff,pos("==",buff)+1)+1
      if i>1 then j=pos(d2c(13),buff,i)
      finish=pos("Total",buff,i)
      mon=_spinner(0,w,"FfFfF")
      do while j>0 & j<finish
       line=strip(substr(buff,i,j-i))
       parse var line s1 . type .
       s1=_stripint(s1)
       if (type="Corp" | type="Personal") & s1\="" then do
        _f.s1=1
        c=c+1
        s=max(s,s1)
       end /*if*/
       i=j+1
       j=pos(d2c(13),buff,i)
       mon=_spinner(mon,w,"FfFfF")
      end /*do*/
      call zocwrite " ("||c||") "||_ansi("dl;fmg")
      if fname\="" then do
       if _fileexists(fname) then call dosdel fname
       if _filenew(fname) then do
        call zocwrite _ansi("bt;fye")
        mon=_spinner(0,10,"FfFfF")
        do i=1 to s
         if _f.i>0 then do
          call lineout fname, i
          mon=_spinner(mon,w,"FfFfF")
         end /*if*/
        end /*do*/
        call _fileclose(fname)
        call zocwriteln " "||_ansi("dl;fmg")
       end /*if*/
      end /*if*/
     end /*else*/

    return c

/** _mapfind v.6 **/
    _mapfind: procedure expose (globals)
     start=arg(1)
     searchstring=arg(2)
     mapname=arg(3)
     reclen=arg(4)
     if arg(5,"E") then maxdist=_stripint(arg(5)); else maxdist=255
     if maxdist<1 then maxdist=255
     if arg(6,"E") then useexclusions=arg(6); else useexclusions=1

     usevoids=0
     reverse=0
     secnum=-1
     void=-1
     busted=-1
     figs=-1
     expl=-1
     list=-1
     pvis=-1
     deadend=-1
     bubble=-1
     tomsl=-1; frmsl=-1
     ptype=-1
     pore=-1;  porg=-1;  pequ=-1
     ppore=-1; pporg=-1; ppequ=-1
     viewed=-1
     /* parse search string */
     do i=1 to _dwords(searchstring,";")
      criteria=_dword(searchstring,i,";")
      tag=_dword(criteria,1,":")
      val=_dword(criteria,2,":")
      select
       when tag="r"   then reverse=val
       when tag="s"   then secnum=val
       when tag="uv"  then usevoids=val
       when tag="v"   then void=val
       when tag="f"   then figs=val
       when tag="e"   then expl=val
       when tag="sl"  then list=val
       when tag="pt"  then ptype=lower(val)
       when tag="p1"  then pore=val
       when tag="p2"  then porg=val
       when tag="p3"  then pequ=val
       when tag="pp1" then ppore=val
       when tag="pp2" then pporg=val
       when tag="pp3" then ppequ=val
       when tag="pv"  then pvis=val
       when tag="pb"  then busted=val
       when tag="d"   then deadend=val
       when tag="b"   then bubble=val
       when tag="tm"  then tomsl=val
       when tag="fm"  then frmsl=val
       when tag="vw"  then viewed=val
       otherwise nop
      end /*select*/
     end /*do*/

     call _mapseek mapname, reclen, start
     _dist.start.start=0
     _path.start.start=start

     /* initialize arrays */
     inqueue.=0
     queue.=""
     queue.1=start
     inqueue.start=1
     tail=1
     do i=1 to _dwords(_s.start,";")
      code=_dword(_s.start,i,";")
      warptype=code%20000
      sector=code//20000
      if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & (usevoids\=1 | \_v.sector) then do
       tail=tail+1
       queue.tail=sector
       inqueue.sector=1
      end /*if*/
     end /*do*/
     head=2

     if _verbose then do
      if reverse then call zocwrite _ansi("clearline;bt;fwh")||"searching ("||searchstring||")"||"->"||start||"... "
      else call zocwrite _ansi("clearline;bt;fwh")||"searching "||start||"->("||searchstring||")... "
     end /*if*/
     if _verbose then mon=_spinner(0,500)

     done=0
     found=0
     do while \done & tail>=head

      current=queue.head
      call _mapseek mapname, reclen, current

      do i=1 to _dwords(_s.current,";")

       if _verbose then mon=_spinner(mon,100)
       code=_dword(_s.current,i,";")
       warptype=code%20000
       adjacent=code//20000

       /* add to tail */
       if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & (usevoids\=1 | \_v.adjacent) & \inqueue.adjacent then do
        tail=tail+1
        queue.tail=adjacent
        inqueue.adjacent=1
       end /*if*/

       /* assign shortest warp distance */
       if warptype>0 & \reverse then do
        tdist=_dist.start.current
        _dist.start.current=min(_dist.start.current,_dist.start.adjacent+1)
        if tdist>_dist.start.current then _path.start.current=_path.start.adjacent||";"||current
       end /*if*/

       if warptype<2 & reverse then do
        tdist=_dist.current.start
        _dist.current.start=min(_dist.current.start,_dist.adjacent.start+1)
        if tdist>_dist.current.start then _path.current.start=current||";"||_path.adjacent.start
       end /*if*/

      end /*do*/

      /* evaluate the criteria */
      found=1

      if useexclusions & _ex.current                 then found=0
      if found & secnum\=-1  & secnum\=current       then found=0
      if found & void\=-1    & void=\_v.current      then found=0
      if found & figs\=-1    & figs=\_f.current      then found=0
      if found & expl\=-1    & expl=\_sv.current     then found=0
      if found & list\=-1    & list=\_sl.current     then found=0
      if found & pvis\=-1    & pvis=\_pv.current     then found=0
      bstamp=_iniv("!bust", "!"||current)
      if found & busted\=-1  & ((busted=1 & _undef(bstamp) | (busted=0 & \_undef(bstamp)) then found=0
      if found & deadend\=-1 & deadend=\_od.current  then found=0

      if found & bubble\=-1 then do
       if bubble & _bg.current=0 then found=0
       if \bubble & _bg.current\=0 then found=0
      end /*if*/

      if found & viewed\=-1 then do
       select
        when left(viewed,2)="<=" & _vs.current>substr(viewed,3)  then found=0
        when left(viewed,2)="<=" then nop
        when left(viewed,2)=">=" & _vs.current<substr(viewed,3)  then found=0
        when left(viewed,2)=">=" then nop
        when left(viewed,2)="\=" & _vs.current=substr(viewed,3)  then found=0
        when left(viewed,2)="\=" then nop
        when left(viewed,2)="<>" & _vs.current=substr(viewed,3)  then found=0
        when left(viewed,2)="<>" then nop
        when left(viewed,1)="<"  & _vs.current>=substr(viewed,2) then found=0
        when left(viewed,1)=">"  & _vs.current<=substr(viewed,2) then found=0
        when left(viewed,1)="="  & _vs.current\=substr(viewed,2) then found=0
        otherwise nop
       end /*select*/
      end /*if*/

      if found & tomsl\=-1 then do
       select
        when left(tomsl,2)="<=" & _dtomsl.current>substr(tomsl,3)  then found=0
        when left(tomsl,2)="<=" then nop
        when left(tomsl,2)=">=" & _dtomsl.current<substr(tomsl,3)  then found=0
        when left(tomsl,2)=">=" then nop
        when left(tomsl,2)="\=" & _dtomsl.current=substr(tomsl,3)  then found=0
        when left(tomsl,2)="\=" then nop
        when left(tomsl,2)="<>" & _dtomsl.current=substr(tomsl,3)  then found=0
        when left(tomsl,2)="<>" then nop
        when left(tomsl,1)="<"  & _dtomsl.current>=substr(tomsl,2) then found=0
        when left(tomsl,1)=">"  & _dtomsl.current<=substr(tomsl,2) then found=0
        when left(tomsl,1)="="  & _dtomsl.current\=substr(tomsl,2) then found=0
        otherwise nop
       end /*select*/
      end /*if*/

      if found & frmsl\=-1 then do
       select
        when left(frmsl,2)="<=" & _dfrmsl.current>substr(frmsl,3)  then found=0
        when left(frmsl,2)="<=" then nop
        when left(frmsl,2)=">=" & _dfrmsl.current<substr(frmsl,3)  then found=0
        when left(frmsl,2)=">=" then nop
        when left(frmsl,2)="\=" & _dfrmsl.current=substr(frmsl,3)  then found=0
        when left(frmsl,2)="\=" then nop
        when left(frmsl,2)="<>" & _dfrmsl.current=substr(frmsl,3)  then found=0
        when left(frmsl,2)="<>" then nop
        when left(frmsl,1)="<"  & _dfrmsl.current>=substr(frmsl,2) then found=0
        when left(frmsl,1)=">"  & _dfrmsl.current<=substr(frmsl,2) then found=0
        when left(frmsl,1)="="  & _dfrmsl.current\=substr(frmsl,2) then found=0
        otherwise nop
       end /*select*/
      end /*if*/

      if found & (ptype\=-1 | pore\=-1 | porg\=-1 | pequ\=-1) then cptype=_dword(_p.current,1,";")

      if found & ptype\=-1 then do
       select
        when ptype=0 & cptype\="" then found=0
        when ptype=0 then nop
        when ptype=1 & cptype="" then found=0
        when ptype=1 then nop
        when \_portmatch(cptype,ptype) then found=0
        otherwise nop
       end /*select*/
      end /*if*/

      if found & pore\=-1 then do
       if cptype="" then found=0
       else do
        cpore=_dword(_dword(_p.current,2,";"),1,",")
        select
         when left(pore,2)="<=" & cpore>substr(pore,3)  then found=0
         when left(pore,2)="<=" then nop
         when left(pore,2)=">=" & cpore<substr(pore,3)  then found=0
         when left(pore,2)=">=" then nop
         when left(pore,2)="\=" & cpore=substr(pore,3)  then found=0
         when left(pore,2)="\=" then nop
         when left(pore,2)="<>" & cpore=substr(pore,3)  then found=0
         when left(pore,2)="<>" then nop
         when left(pore,1)="<"  & cpore>=substr(pore,2) then found=0
         when left(pore,1)=">"  & cpore<=substr(pore,2) then found=0
         when left(pore,1)="="  & cpore\=substr(pore,2) then found=0
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if found & porg\=-1 then do
       if cptype="" then found=0
       else do
        cporg=_dword(_dword(_p.current,3,";"),1,",")
        select
         when left(porg,2)="<=" & cporg>substr(porg,3)  then found=0
         when left(porg,2)="<=" then nop
         when left(porg,2)=">=" & cporg<substr(porg,3)  then found=0
         when left(porg,2)=">=" then nop
         when left(porg,2)="\=" & cporg=substr(porg,3)  then found=0
         when left(porg,2)="\=" then nop
         when left(porg,2)="<>" & cporg=substr(porg,3)  then found=0
         when left(porg,2)="<>" then nop
         when left(porg,1)="<"  & cporg>=substr(porg,2) then found=0
         when left(porg,1)=">"  & cporg<=substr(porg,2) then found=0
         when left(porg,1)="="  & cporg\=substr(porg,2) then found=0
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if found & pequ\=-1 then do
       if cptype="" then found=0
       else do
        cpequ=_dword(_dword(_p.current,4,";"),1,",")
        select
         when left(pequ,2)="<=" & cpequ>substr(pequ,3)  then found=0
         when left(pequ,2)="<=" then nop
         when left(pequ,2)=">=" & cpequ<substr(pequ,3)  then found=0
         when left(pequ,2)=">=" then nop
         when left(pequ,2)="\=" & cpequ=substr(pequ,3)  then found=0
         when left(pequ,2)="\=" then nop
         when left(pequ,2)="<>" & cpequ=substr(pequ,3)  then found=0
         when left(pequ,2)="<>" then nop
         when left(pequ,1)="<"  & cpequ>=substr(pequ,2) then found=0
         when left(pequ,1)=">"  & cpequ<=substr(pequ,2) then found=0
         when left(pequ,1)="="  & cpequ\=substr(pequ,2) then found=0
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if found & ppore\=-1 then do
       if cptype="" then found=0
       else do
        cppore=_dword(_dword(_p.current,2,";"),2,",")
        select
         when left(ppore,2)="<=" & cppore>substr(ppore,3)  then found=0
         when left(ppore,2)="<=" then nop
         when left(ppore,2)=">=" & cppore<substr(ppore,3)  then found=0
         when left(ppore,2)=">=" then nop
         when left(ppore,2)="\=" & cppore=substr(ppore,3)  then found=0
         when left(ppore,2)="\=" then nop
         when left(ppore,2)="<>" & cppore=substr(ppore,3)  then found=0
         when left(ppore,2)="<>" then nop
         when left(ppore,1)="<"  & cppore>=substr(ppore,2) then found=0
         when left(ppore,1)=">"  & cppore<=substr(ppore,2) then found=0
         when left(ppore,1)="="  & cppore\=substr(ppore,2) then found=0
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if found & pporg\=-1 then do
       if cptype="" then found=0
       else do
        cpporg=_dword(_dword(_p.current,3,";"),2,",")
        select
         when left(pporg,2)="<=" & cpporg>substr(pporg,3)  then found=0
         when left(pporg,2)="<=" then nop
         when left(pporg,2)=">=" & cpporg<substr(pporg,3)  then found=0
         when left(pporg,2)=">=" then nop
         when left(pporg,2)="\=" & cpporg=substr(pporg,3)  then found=0
         when left(pporg,2)="\=" then nop
         when left(pporg,2)="<>" & cpporg=substr(pporg,3)  then found=0
         when left(pporg,2)="<>" then nop
         when left(pporg,1)="<"  & cpporg>=substr(pporg,2) then found=0
         when left(pporg,1)=">"  & cpporg<=substr(pporg,2) then found=0
         when left(pporg,1)="="  & cpporg\=substr(pporg,2) then found=0
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if found & ppequ\=-1 then do
       if cptype="" then found=0
       else do
        cppequ=_dword(_dword(_p.current,4,";"),2,",")
        select
         when left(ppequ,2)="<=" & cppequ>substr(ppequ,3)  then found=0
         when left(ppequ,2)="<=" then nop
         when left(ppequ,2)=">=" & cppequ<substr(ppequ,3)  then found=0
         when left(ppequ,2)=">=" then nop
         when left(ppequ,2)="\=" & cppequ=substr(ppequ,3)  then found=0
         when left(ppequ,2)="\=" then nop
         when left(ppequ,2)="<>" & cppequ=substr(ppequ,3)  then found=0
         when left(ppequ,2)="<>" then nop
         when left(ppequ,1)="<"  & cppequ>=substr(ppequ,2) then found=0
         when left(ppequ,1)=">"  & cppequ<=substr(ppequ,2) then found=0
         when left(ppequ,1)="="  & cppequ\=substr(ppequ,2) then found=0
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      /* have we found the destination? */
      select
       when _dist.start.current>maxdist & \reverse then do; done=1; found=0; end
       when _dist.current.start>maxdist &  reverse then do; done=1; found=0; end
       when found then done=1
       when head=tail then done=1
       otherwise head=head+1
      end /*select*/

     end /*do*/

     if _verbose then do
      mon=_spinner(-1,100)
      call zocwriteln
     end /*if*/

     if \found | head=tail then current=0

    return current

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _get_log_path v.2 **/
    _get_log_path: procedure expose (globals)
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_path"
    return lpath

/** _get_script_path v.1 **/
    _get_script_path: procedure expose (globals)
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _get_download_path v.2 **/
    _get_download_path: procedure expose (globals)
     parse value zocgetglobaloption("DownloadAltPath") with . '="' dpath '"'
     dpath=dosfname(dpath)
     if right(dpath,1)\="\" then dpath=dpath||"\"
     if \dosisdir(dpath) then call _error "invalid path in _get_download_path"
    return dpath

/** _setgame v.6 **/
    _setgame: procedure expose (globals)

     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid log path in _setgame"

     if arg(1,"E") then gname=arg(1)
     else do
      list=_ini_list_games(lpath)
      if c=0 then gname="CLEAR"
      else gname=_drequestlist("select a game:", list||";CLEAR", ";", "c")
     end /*if*/
     if gname="CLEAR" | gname="" then gname="%ZOCORHOST% %OPTIONS%"
     call zocsetglobaloption 'WindowTitle="'||gname||'"'
    return gname

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

    _ini_is_section: procedure expose (globals)
     s=strip(arg(1))
     if left(s,1)="[" & left(reverse(s),1)="]" then return 1
    return 0

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _spinner v.3 **/
    _spinner: procedure expose (globals)
     if arg(1,"E") then count=arg(1)
                   else call _error "missing parameter in _spinner"
     if arg(2,"E") then width=arg(2)
                   else width=100
     if arg(3,"E") & length(arg(3))=5 then chs=arg(3)
                                      else chs="-\|/."
    /* bs="^H" */
     bs=d2c(27)||"[1D"
     select
      when count=-1        then call zocwrite bs||substr(chs,5,1)
      when count<0         then count=-1
      when count=0         then call zocwrite left(chs,1)
      when count=width     then call zocwrite bs||substr(chs,2,1)
      when count=(width*2) then call zocwrite bs||substr(chs,3,1)
      when count=(width*3) then call zocwrite bs||substr(chs,4,1)
      when count=(width*4) then do
       call zocwrite bs||left(chs,1)
       count=0
      end /*when*/
      otherwise nop
     end /*select*/
     count=count+1
    return count

/** _mapseek v.4 **/
    _mapseek: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") | \arg(3,"E") then call _error "missing parameter in _mapseek"
     fname=arg(1)
     reclen=arg(2)
     sector=arg(3)

     if _s.sector="_S."||sector | _s.sector="" then do

      call stream fname, "C", "SEEK "||(sector-1)*reclen+2

      vis=0
      one=0
      prt=0
      pvis=0
      bore=0
      borg=0
      bequ=0
      flags=c2d(charin(fname))
      if flags%128=1 then do
       bequ=1
       flags=flags-128
      end /*if*/
      if flags%64=1 then do
       borg=1
       flags=flags-64
      end /*if*/
      if flags%32=1 then do
       bore=1
       flags=flags-32
      end /*if*/
      if flags%16=1 then do
       _pv.sector=1
       flags=flags-16
      end /*if*/
      if flags%8=1 then do
       prt=1
       flags=flags-8
      end /*if*/
      if flags%4=1 then flags=flags-4
      if flags%2=1 then do
       _od.sector=1
       flags=flags-2
      end /*if*/
      if flags%1=1 then do
       _sv.sector=1
       flags=flags-1
      end /*if*/

      if prt & _undef(_iniv(!port_kills,"!"||sector)) then do
       if bore then _p.sector="B"
       else _p.sector="S"
       if borg then _p.sector=_p.sector||"B"
       else _p.sector=_p.sector||"S"
       if bequ then _p.sector=_p.sector||"B"
       else _p.sector=_p.sector||"S"
       do i=1 to 3
        ms1=charin(fname)
        ms2=charin(fname)
        ms3=charin(fname)
        _p.sector=_p.sector||";"c2d(ms1)+c2d(ms2)*256||","||c2d(ms3)
       end /*do*/
      end /*if*/
      else do
       _p.sector=""
       call stream fname, "C", "SEEK "||1+(sector-1)*reclen+11
      end /*else*/
      _dtomsl.sector=c2d(charin(fname))
      _dfrmsl.sector=c2d(charin(fname))
      _bg.sector=c2d(charin(fname))+c2d(charin(fname))*256
      _nwi.sector=c2d(charin(fname))

      ms1=c2d(charin(fname))+c2d(charin(fname))*256
      if ms1=0 then _s.sector=""
      else do
       _s.sector=ms1
       _nw.sector=1
       wt=ms1%20000
       _nwt.sector.wt=_nwt.sector.wt+1
       do i=1 to ((reclen-15)%2-1)
        ms1=c2d(charin(fname))+c2d(charin(fname))*256
        if ms1>0 then do
         _s.sector=_s.sector||";"||ms1
         _nw.sector=_nw.sector+1
         wt=ms1%20000
         _nwt.sector.wt=_nwt.sector.wt+1
        end /*if*/
       end /*do*/
      end /*else*/

      _nwo.sector=_nwt.sector.1

     end /*if*/
    return

/** _portmatch v.1 **/
    _portmatch: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _portmatch"
     m1=lower(strip(arg(1)))
     m2=lower(strip(arg(2)))
     rslt=0
     select
      when length(m1)\=3 then nop
      when length(m2)\=3 then nop
      when m1=m2 then rslt=1
      otherwise do
       mm1=0
       if left(m1,1)="x" then mm1=1
       if left(m2,1)="x" then mm1=1
       if left(m1,1)=left(m2,1) then mm1=1
       mm2=0
       if substr(m1,2,1)="x" then mm2=1
       if substr(m2,2,1)="x" then mm2=1
       if substr(m1,2,1)=substr(m2,2,1) then mm2=1
       mm3=0
       if substr(m1,3,1)="x" then mm3=1
       if substr(m2,3,1)="x" then mm3=1
       if substr(m1,3,1)=substr(m2,3,1) then mm3=1
       if mm1 & mm2 & mm3 then rslt=1
      end /*otherwise*/
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _ini_list_games v.1 **/
    _ini_list_games: procedure expose (globals)
     lpath=arg(1)
     parse value zoclistfiles(lpath||"*_data.ini", ";") with c list
     if c=0 then rslt=""
     else do
      n=_dword(list,1,";")
      rslt=left(n,lastpos("_data.ini",n)-1)
      do i=2 to c
       n=_dword(list,i,";")
       rslt=rslt||";"||left(n,lastpos("_data.ini",n)-1)
      end /*do*/
     end /*else*/
    return rslt

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt
