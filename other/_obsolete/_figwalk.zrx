/* REXX _figwalk.zrx by the reverend (build 122)                              */
/*-       built by rev-builder version 1.2 on 19 Feb 2003 at 23:34:30        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ---------------------*/ _g.!sname="_figwalk.zrx" /*--------------------- -*/
/*- --------------*/ _g.!sbuild=122; _g.!sdate="2003-02-19" /*-------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 30
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

if \_pcheck("Command [") then call _error "please start at the command prompt."

call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
sd=_ini_askint("stardock?", 0, iname, game, "sd")
if sd=0 then call _error "invalid sector #"
cr=_ini_askint("cr?", 600, iname, game, "cr")
ns=_ini_askint("how many sectors in universe?", 5000, iname, game, "ns")
if ns<1 | ns>20000 then call _error "number out of range."

parse value _getinfo("sect;corp;aln;twarp;lrs;ore;org;equ;col;hlds;figs;lmpt;armd") with sector ";" corp ";" align ";" twarp ";" lrs ";" ore ";" org ";" equ ";" colos ";" holds ";" figc ";" limpc ";" minec
if lower(lrs)\="holo" then call _error "you need a holo-scanner to run this script."
if twarp=0 then call _error "you need twarp to run this script."

depth=_asknum("tree depth? (0=unlim)",0,"c")
if _yesno("walk one-deeps?") then minnw=0
else minnw=1

if corp>0 then corp=_chooselist("corp or personal?", "corp;personal", ";", "c")
else corp="personal"

select
 when corp="corp" then do
  figs="fc"||left(_chooselist("what type of figs?","toll;defensive;offensive",";","c"),1)||_askint("how many figs?",1,"c")
  mines="mc"||_askint("how many mines?",0,"c")
  limps="lc"||_askint("how many limpets?",0,"c")
 end /*when*/
 when corp="personal" then do
  figs="fp"||left(_chooselist("what type of figs","toll;defensive;offensive",";","c"),1)||_askint("how many figs",1,"c")
  mines="mp"||_askint("how many mines?",0,"c")
  limps="lp"||_askint("how many limpets?",0,"c")
 end /*when*/
end /*select*/

actions=""
if _stripint(figs)\=0 then actions=actions||";"||figs
if _stripint(mines)\=0 then actions=actions||";"||mines
if _stripint(limps)\=0 then actions=actions||";"||limps
if actions\="" then actions=substr(actions,2)

if align<1000 then autobuy=0
else autobuy=_yesno("autobuy supplies?")

buyore=0
buy=0

_q.=""
i=1
_q.i=sector
done=0
do while \done

 sector=""
 if i<=depth | depth=0 then do
  warps=_ds()
  j=1
  do while warps\="" & sector=""
   parse var warps svalue ";" warps
   parse var _d.svalue dvalue "," wvalue "," . "," avalue ";" .
   select
    when dvalue=0 & \avalue & wvalue>minnw then sector=svalue
    when dvalue=100 & \avalue & wvalue>minnw then do
     port=_portreport(svalue)
     if port\="##NOPORT##" then sector=svalue
     else j=j+1
     if left(port,1)="S" then buyore=1
    end /*when*/
    otherwise j=j+1
   end /*select*/
  end /*do*/
 end /*if*/

 if sector="" then do
  i=i-1
  if i=0 then done=1
  else do
   sector=_q.i
   if \_twarp(sector,cr) then call _error "twarp failed."
   ore=_getinfo("ore")
   buyore=0
  end /*else*/
 end /*if*/
 else do
  i=i+1
  _q.i=sector
  fed=0
  if sector>=cr then call zocsend sector
  else call zocsend sector||"^M"
  ans=zocwaitmux("Beacon  : FedSpace, FedLaw Enforced", "Warps to Sector(s) :")
  select
   when ans=0 then do
    fed=1
    if zocwait("Warps to Sector() :")=640 then call _error "timeout"
   end /*when*/
   when ans=1 then nop
   when ans=640 then call _error "timeout"
   otherwise nop
  end /*select*/
  if zocwait("^M")=640 then call _error "timeout"
  parse value _lastline() with . "(" test
  if test\="" then do
   if zocwait("Command [")=640 then call _error "timeout"
   call zocsend "sh"
  end /*if*/
  if zocwait("Command [")=640 then call _error "timeout"

  if buyore & ore<holds then do
   if org>0 | equ>0 | colos>0 then do
    call _jetisson
    org=0
    equ=0
    colos=0
   end /*if*/
   call zocsend "pt^M^M"
   if zocwait("Command [")=640 then call _error "timeout"
   ore=_getinfo("ore")
  end /*if*/
  buyore=0

  alist=actions
  do while alist\=""
   parse var alist a ";" alist
   select
    when left(a,3)="fct" & \fed then call zocsend "f"||substr(a,4)||"^Mct"
    when left(a,3)="fcd" & \fed then call zocsend "f"||substr(a,4)||"^Mcd"
    when left(a,3)="fco" & \fed then call zocsend "f"||substr(a,4)||"^Mco"
    when left(a,3)="fpt" & \fed then call zocsend "f"||substr(a,4)||"^Mpt"
    when left(a,3)="fpd" & \fed then call zocsend "f"||substr(a,4)||"^Mpd"
    when left(a,3)="fpo" & \fed then call zocsend "f"||substr(a,4)||"^Mpo"
    when left(a,2)="lc" & \fed & limpc>=substr(a,3) then call zocsend "h2"||substr(a,3)||"^Mc"
    when left(a,2)="lp" & \fed & limpc>=substr(a,3) then call zocsend "h2"||substr(a,3)||"^Mzpzn"
    when left(a,2)="mc" & \fed & minec>=substr(a,3) then call zocsend "h1"||substr(a,3)||"^Mc"
    when left(a,2)="mp" & \fed & minec>=substr(a,3) then call zocsend "h1"||substr(a,3)||"^Mzpzn"
    otherwise nop
   end /*select*/
   if left(a,1)="f" then do
    figc=figc-substr(a,4)
    if figc<substr(a,4) then buy=autobuy
   end /*if*/
   if left(a,1)="l" then do
    limpc=limpc-substr(a,3)
    if limpc<substr(a,3) then buy=autobuy
   end /*if*/
   if left(a,1)="m" then do
    minec=minec-substr(a,3)
    if minec<substr(a,3) then buy=autobuy
   end /*if*/
  end /*do*/

  if buy then do
   if autobuy then do
    if \_twarp(sd,cr) then call _error "twarp failed."
    parse value _getinfo("figs;lmpt;armd") with figc ";" limpc ";" minec
    if limpc<20 & limps\="none" then todo=";l"||20-limpc
    if minec<20 & mines\="none" then todo=todo||";m"||20-minec
    todo=substr(todo,2)
    call _buyhardware(todo)
    if figc<100 then do
     call zocsend "psspb100^Mqqq"
     if zocwait("Command [")=640 then call _error "timeout"
    end /*if*/
    if \_twarp(sector,cr) then call _error "twarp failed."
    parse value _getinfo("ore;figs;lmpt;armd") with ore ";" figc ";" limpc ";" minec
    buy=0
   end /*if*/
   else done=1
  end /*if*/

 end /*else*/

end /*while*/

call _quit

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.3 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. (globals)

     _verbose=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals reconnect scriptname lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"

     if arg(1,"E") then fname=arg(1)
     else fname=base

     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /*if*/
       end /*do*/
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /*else*/
     end /*do*/

     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"

     rslt=spath||";"||fname||";"||game
    return rslt

/** _ini_askint v.5 **/
    _ini_askint: procedure expose (globals)
     if \arg(1,"E") then msg="enter an integer"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askint"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if _stripint(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=_stripint(default)
      when rslt="##EOF##"                     then rslt=_askint(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then rslt=_stripint(rslt)
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwriteln right(fname,min(length(fname),17))||" - "||key||"="||rslt||" >"
       rslt=_stripint(rslt)
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _getinfo v.5 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=3*1024
     call zocreceivebuf bufflen
     call zocsend "/"
     if zocwait("Sect ")=640 then call _error "timeout"
     if zocwait("Ship ")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, "  ;;", d2c(0)||d2c(10)||d2c(13)||d2c(179)),1)
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/

     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _asknum v.4 **/
    _asknum: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an number:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripnum(rslt)\=rslt | rslt=""
      default=rslt||" [please enter a number or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user.", "nocopy"
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user.", "nocopy"
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _chooselist v.6 **/
    _chooselist: procedure expose (globals)
     prompt=arg(1)
     list=arg(2)
     if list="" then call _error "no list"
     delim=arg(3)
     if delim="" then delim=" "
     if length(delim)>1 then call _error "long delimiter"

     ch.=""
     i=_dwords(list,delim)
     do j=1 to i
      ch.j=_dword(list,j,delim)
     end /*do*/

     if i<7 then max=1
     if i<5 then max=0
     if i>=7 then max=(i-5)%2+1

     done=0
     loc=0
     do while \done
      if loc<0 then loc=0
      if loc>max then loc=max

      select
       when loc=0 then do
        if max=0 then rslt=zocrequest(prompt, ch.1, ch.2, ch.3, ch.4)
        else rslt=zocrequest(prompt, ch.1, ch.2, ch.3, "next")
       end /*when*/
       when loc=max then do
        p1=(loc-1)*2+4
        p2=p1+1
        p3=p1+2
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, ch.p3)
       end /*when*/
       otherwise do
        p1=(loc-1)*2+4
        p2=p1+1
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, "next")
       end /*otherwise*/
      end /*select*/

      select
       when rslt="next" then loc=loc+1
       when rslt="back" then loc=loc-1
       when rslt="##CANCEL##" then done=1
       when rslt="" then nop
       otherwise done=1
      end /*select*/

     end /*do*/

     if lower(arg(4))="c" & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"

    return rslt

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=_space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||_space(translate(rslt," ","-"),0)
     else rslt=_space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _ds v.3 **/
    _ds: procedure expose (globals)
     if _d.1="_D.1" then _d.=""
     line.=""
     i=0
     done=0
     dsin=0
     rslt=""

     zocsend "sd"
     do while \done
      ans=zocwaitmux("No",,
                     "Yes",,
                     "You don't have a long range scanner.",,
                     "Relative Density Scan",,
                     "(?=Help)? :")
      select
       when ans<2 & dsin then do
        i=i+1
        line.i=translate(strip(_lastline()),"  ","()")
       end /*when*/
       when ans=2 then done=1
       when ans=3 then dsin=1
       when ans=4 & dsin then done=1
       when ans=4 then nop
       otherwise nop
      end /*select*/
     end /*do*/
     max=i

     rslt=""
     do i=1 to max
      parse var line.i . adj . dens . . nw . . haz . . anom .
      dens=_stripcomma(dens)
      haz=strip(translate(haz," ","%"))
      if anom="No" then anom=0
                   else anom=1
      parse var _d.adj last ";" .
      _d.adj=dens||","||nw||","||haz||","||anom||";"||last
      rslt=rslt||";"||adj
     end /*do*/
     rslt=substr(rslt,2)
    return rslt

/** _portreport v.5 **/
    _portreport: procedure expose (globals)
     if _p.1="_P.1" then _p.=""
     sec=arg(1)

     call zocreceivebuf 3*1024
     call zocsend "cr"||sec||"^M"
     if zocwait("Commerce report")=640 then call _error "timeout"
     if zocwait("Computer command")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     call zocsend "q"
     if sec="" then do
      i=pos("What sector is the port in? [", buff)+29
      sec=substr(buff,i,pos("]",buff,i)-i)
     end /*if*/

     select
      when pos("Fuel Ore   ",buff)>0 then type="port"
      when pos("A  Cargo holds     :    ",buff)>0 then type="class 0"
      when pos("You have never visted sector",buff)>0 then type="no port"
      when pos("I have no information about a port in that sector.",buff)>0 then type="no port"
      otherwise type="no port"
     end /*select*/

     rslt=""

     select

      when type="class 0" then do
       i=pos("A  Cargo holds     :    ",buff)
       cr=pos(d2c(13),buff,i)
       line.1=substr(buff,i,cr-i)
       i=pos("B  Fighters        :    ",buff)
       cr=pos(d2c(13),buff,i)
       line.2=substr(buff,i,cr-i)
       i=pos("C  Shield Points   :    ",buff)
       cr=pos(d2c(13),buff,i)
       line.3=substr(buff,i,cr-i)

       parse var line.1 . ":" c "credits / next hold" a
       c=_stripint(c)
       a=_stripint(a)
       rslt=rslt||";"||c||","||a

       parse var line.2 . ":" c "credits per fighter" a
       c=_stripint(c)
       a=_stripint(a)
       rslt=rslt||";"||c||","||a

       parse var line.3 . ":" c "credits per point" a
       c=_stripint(c)
       a=_stripint(a)
       rslt="0"||rslt||";"||c||","||a
      end /*when*/

      when type="port" then do
       i=pos("Fuel Ore   ",buff)
       cr=pos(d2c(13),buff,i)
       line.1=substr(buff,i,cr-i)
       i=pos("Organics   ",buff)
       cr=pos(d2c(13),buff,i)
       line.2=substr(buff,i,cr-i)
       i=pos("Equipment  ",buff)
       cr=pos(d2c(13),buff,i)
       line.3=substr(buff,i,cr-i)

       parse var line.1 "Fuel Ore" bs q p "%" .
       q=_stripint(q)
       p=strip(p)
       if bs="Buying" then do
        type="B"
        rslt=rslt||";-"||q||","||p
       end /*if*/
       else do
        type="S"
        rslt=rslt||";"||q||","||p
       end /*else*/

       parse var line.2 "Organics" bs q p "%" .
       q=_stripint(q)
       p=strip(p)
       if bs="Buying" then do
        type=type||"B"
        rslt=rslt||";-"||q||","||p
       end /*if*/
       else do
        type=type||"S"
        rslt=rslt||";"||q||","||p
       end /*else*/

       parse var line.3 "Equipment" bs q p "%" .
       q=_stripint(q)
       p=strip(p)
       if bs="Buying" then do
        type=type||"B"
        rslt=type||rslt||";-"||q||","||p
       end /*if*/
       else do
        type=type||"S"
        rslt=type||rslt||";"||q||","||p
       end /*else*/

       _p.sec=rslt
      end /*when*/

      when type="no port" then rslt="##NOPORT##"
      when ans=640 then call _error "timeout"
      otherwise nop

     end /*select*/

    return rslt

/** _twarp v.3 **/
    _twarp: procedure expose (globals)
     success=0
     sector=arg(1)
     cr=arg(2)

     if cr="" then call zocsend "m"||sector||"^M"
     else do
      if sector<cr then call zocsend sector||"^M"
      else call zocsend sector
     end /*else*/
     if zocwait("<Move>")=640 then call _error "timeout"

     ans=zocwaitmux("Command [", ,
                    "already in that sector!", ,
                    "Engage the Autopilot?", ,
                    "engage the TransWarp drive?")
     select
      when ans=0 then do
       if zocwait("(?=Help)?")=640 then call _error "timeout"
       parse value _lastline() with . "]:[" check "] (?=Help)?" .
       if check=sector then success=1
      end /*when*/
      when ans=1 then nop
      when ans=2 then do
       call zocsend "n"
       if zocwait("Command [")=640 then call _error "timeout"
       success=0
      end /*when*/
      when ans=3 then do
       call zocsend "y"
       ans2=zocwaitmux("not have enough Fuel Ore", ,
                         "make this jump blind?", ,
                         "shall we engage?")
       select
        when ans2=0 then if zocwait("Command [")=640 then call _error "timeout"
        when ans2=1 then do
         call zocsend "n"
         if zocwait("Command [")=640 then call _error "timeout"
        end /*when*/
        when ans2=2 then do
         call zocsend "y"
         if zocwait("Command [")=640 then call _error "timeout"
         success=1
        end /*when*/
        when ans2=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/

    return success

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _jetisson v.1 **/
    _jetisson: procedure expose (globals)
     call zocsend "jy"
     if zocwait("Command [")=640 then call _error "timeout"
     rslt=1
    return rslt

/** _buyhardware v.5 **/
    _buyhardware: procedure expose (globals)
     sdfound=1
     list=arg(1)
     listq=""

     call zocsend "p"
     ans=zocwaitmux("There is no port in this sector!", ,
                    "<Q> Quit, nevermind", ,
                    "<S> Land on the StarDock")
     select
      when ans=0 then do
       if zocwait("Command [")=640 then call _error "timeout"
       call zocwrite _ansi("bt;fgr")||"<< stardock not available >> "||_ansi("fmg")
       sdfound=0
      end /*when*/
      when ans=1 then do
       call zocsend "q"
       if zocwait("Command [")=640 then call _error "timeout"
       call zocwrite _ansi("bt;fgr")||"<< stardock not available >> "||_ansi("fmg")
       sdfound=0
      end /*when*/
      when ans=2 then do
       call zocsend "s"
       ans2=zocwaitmux("and removal? : (Y/N)","<StarDock>")
       select
        when ans2=0 then call zocsend "y"
        when ans2=1 then nop
        when ans2=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/

     if sdfound then do
      zocsend "h"
      if zocwait("<Hardware Emporium>")=640 then call _error "timeout"

      do while list\=""

       parse var list item ";" list
       quant=_stripint(substr(item,2))
       item=upper(left(item,1))
       select

        when item="A" then do
         call zocsend "a"
         if zocwait("(Max ")=640 then call _error "timeout"
         if zocwait("[")=640 then call _error "timeout"
         avail=_stripint(_lastline())
         if quant=0 | quant>avail then quant=avail
         if avail=0 then quant=0
         call zocsend quant||"^M"
         if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
        end /*when*/

        when item="E" then do
         call zocsend "e"
         if zocwait("(Max ")=640 then call _error "timeout"
         if zocwait("[")=640 then call _error "timeout"
         avail=_stripint(_lastline())
         if quant=0 | quant>avail then quant=avail
         if avail=0 then quant=0
         call zocsend quant||"^M"
         if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
        end /*when*/

        when item="L" then do
         call zocsend "l"
         if zocwait("(Max ")=640 then call _error "timeout"
         if zocwait("[")=640 then call _error "timeout"
         avail=_stripint(_lastline())
         if quant=0 | quant>avail then quant=avail
         if avail=0 then quant=0
         call zocsend quant||"^M"
         if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
        end /*when*/

        when item="M" then do
         call zocsend "m"
         if zocwait("(Max ")=640 then call _error "timeout"
         if zocwait("[")=640 then call _error "timeout"
         avail=_stripint(_lastline())
         if quant=0 | quant>avail then quant=avail
         if avail=0 then quant=0
         call zocsend quant||"^M"
         if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
        end /*when*/

        when item="P" then do
         call zocsend "P"
         ans=zocwaitmux("not equipped to handle Photon Missiles!", "(Max ", "Photon Missiles are disabled")
         select
          when ans=0 then do
           if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
           quant=0
           call zocwrite "<< ship not capable >>"
          end /*when*/
          when ans=1 then do
           if zocwait("[")=640 then call _error "timeout"
           avail=_stripint(_lastline())
           if quant=0 | quant>avail then quant=avail
           if avail=0 then quant=0
           call zocsend quant||"^M"
          if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
          end /*when*/
          when ans=2 then do
           if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
           quant=0
           call zocwrite "<< photons are disabled >>"
          end /*when*/
          when ans=640 then call _error "timeout"
          otherwise nop
         end /*select*/
        end /*when*/

        when item="T" then do
         call zocsend "t"
         if zocwait("(Max ")=640 then call _error "timeout"
         if zocwait("[")=640 then call _error "timeout"
         avail=_stripint(_lastline())
         if quant=0 | quant>avail then quant=avail
         if avail=0 then quant=0
         call zocsend quant||"^M"
         if zocwait("<Hardware Emporium>")=640 then call _error "timeout"
        end /*when*/

        otherwise quant=0

       end /*select*/

       if listq="" then listq=quant
       else listq=listq||";"||quant

      end /*do*/

      call zocsend "qq"
      if zocwait("Command [")=640 then call _error "timeout"

     end /*if*/

     else do
      do while list\=""
       parse var list . ";" list
       if listq="" then listq=0
       else listq=listq||";"||0
      end /*do*/
     end /*else*/

    return listq

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=left(arg(2),1)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*do*/
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))

     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"

    return v

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789."," "),0)
     rslt=_space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||_space(translate(rslt," ","-"),0)
     else rslt=_space(translate(rslt," ","-"),0)
     if _dwords(rslt,".")>2 then rslt=_dword(rslt,1,".")||"."||_space(translate(substr(rslt,pos(".",rslt)+1)," ","."),0)
     if \datatype(rslt,"N") then rslt=""
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     rslt=\lines(arg(1))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt
