/* REXX _greeting.zrx by the reverend (build 61)                              */
/*-       built by rev-builder version 1.0 on 20 May 2002 at 12:11:07        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-            http://thereverend.coastgames.com/rev-license.html            -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 30
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

period=_asknum("enter watch interval (sec)", 20)
if period="##CANCEL##" then call _quit "script cancelled by user"

msg1="Welcome to OLGN.COM - the fastest TWGS server on the net!^M"
msg2="For help getting started try the web site Help Page at:^M"
msg3="http://playground.homeip.net/library/twinstr/^M"
msg4=".^M"
msg5="for quick help on chatting in the game, just hit the ` key (right below ESC).^M"

call _onlineinit

do forever

 call _onlineget
 if _onlinereport() then do
  call zocdelay 5
  call zocsend "`^My"||msg1||msg2||msg3||msg4||msg5||"^M"
 end /* if */
 call zocdelay period

end /* do while */

exit

/* _oline v.1 */

_onlineinit:
 olist.=""
 olist.1.1=0
 olist.2.1=0
 call _onlineget
return

_onlineget:

 if olist.1.1>0 then
  olist.2.=""
  do oli=1 to olist.1.1
   olist.2.oli=olist.1.oli
  end /* do */
 olist.1.=""

 call zocsend "#"
 if zocwait("Who's Playing")=640 then call _error "timeout"
 if zocwait("^M")=640 then call _error "timeout"
 if zocwait("^M")=640 then call _error "timeout"

 olcount=1
 oldone=0

 do while \oldone

  if zocwait("^M")=640 then call _error "timeout"
  oline=_lastline()

  if left(oline,1)=" " then oldone=1
  else do
   olcount=olcount+1
   olist.1.olcount=oline
  end /* else */

 end /* do */

 olist.1.1=olcount

return

_onlinereport:
 olmsg="new player"

 do oli=2 to olist.1.1

  olfound=0
  do olj=2 to olist.2.1
   if _olname(olist.1.oli)=_olname(olist.2.olj) then do
    olfound=1
    leave
   end /* if */
  end /* do */

  if \olfound then olmsg=olmsg||"^M"||olist.1.oli

 end /* do */

 onlinechange=0
 if olmsg>>"new player" then onlinechange=1

return onlinechange

/*
Command [TL=00:00:00]:[2] (?=Help)? : 

                               Who's Playing                                 

Ambassador Dagbot (2)
Robber Bopeep [7] (12565)
1st Sergeant Jed [11] (10000)
Corporal Kristy (4758)

The Vorlon are on the move!
The Space Pirate are on the move!

Command [TL=00:00:00]:[2] (?=Help)? : 
*/

_olname:
 nm=arg(1)
 nm=substr(nm,1,pos("(",nm)-1) /* <-- remove sector location from name */
 lnm=length(nm)

 cnm=0
 olni=1
 if substr(nm,lnm,1)="]" then do
  cnm=1
  olndone=0
  do while \olndone
   if \_in(substr(nm,lnm-olni-1,1),"0123456789") then do
    olndone=1
    if substr(nm,lnm-olni-1,1)\="[" then cnm=0
   end /* if */
   olni=olni+1
  end /* do */
 olni=olni+1
 end /* if */

 olndone=0
 if cnm then olnj=olni+1
 else olnj=1
 do while \olndone
  if substr(nm,lnm-olnj-1,1)==" " then olndone=1
  olnj=olnj+1
 end /* do */

 if cnm then snm=substr(nm,lnm-olnj+1,olnj-olni-1)
 else snm=substr(nm,lnm-olnj+1)

return snm

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _halt v.2 **/
    _halt: procedure expose (globals)
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _asknum v.4 **/
    _asknum: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an number:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripnum(rslt)\=rslt | rslt=""
      default=rslt||" [please enter a number or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /* if */
    exit

/** _lastline v.2 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     if lower(arg(1))="raw" then nop
                            else rslt=translate(rslt,"   ",d2c(0)||d2c(7)||d2c(10))
    return rslt

/** _in v.3 **/
    _in: procedure expose (globals)
     if arg(1,"E") & arg(2,"E") & length(arg(1))>0 & verify(arg(1),arg(2),"N")=0 then rslt=1
     else rslt=0
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789."," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if _dwords(rslt,".")>2 then rslt=_dword(rslt,1,".")||"."||space(translate(substr(rslt,pos(".",rslt)+1)," ","."),0)
     if \datatype(rslt,"N") then rslt=""
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /* select */
     end /* do */
     rslt="^[["||rslt||"m"
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt
