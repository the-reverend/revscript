/* REXX _cimtool_old.zrx by the reverend (build 94)                           */
/*-       built by rev-builder version 1.1 on 12 Sep 2002 at 23:30:50        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/* description:  a utility to help merge cim and ztm data from other players. */
/* rev. 0 - initial release                                                   */
/* rev. 1 - minor change to file dialogs                                      */
/* rev. 2 - changed reference cim name                                        */

call zoctimeout 30
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game

ns=_ini_askint("how many sectors in this game?", 5000, iname, game, "ns")
if ns<1 | ns>20000 then call _error "number out of range."

fname=_ini_askstr("enter cim filename (no extension):", "cim", iname, game, "cim")
if fname="" then call _error "script cancelled by user."

parse value _get_log_info() with lpath ";" ldefault

saved.1=1
if _fileexists(lpath||fname||"_ref.sct") then call _loadsectorcim lpath||fname||"_ref.sct"
else do
 call _loadsectorcim lpath||fname||".sct"
 saved.1=0
 if _s.1="_S.1" then do
  do i=1 to ns
   _s.=""
  end /*do*/
  saved.1=1
 end /*if*/
end /*else*/

saved.2=1
if _fileexists(lpath||fname||"_ref.prt") then call _loadportcim lpath||fname||"_ref.prt"
else do
 call _loadportcim lpath||fname||".prt"
 saved.2=0
 if _p.1="_P.1" then do
  do i=1 to ns
   _p.=""
  end /*do*/
  saved.2=1
 end /*if*/
end /*else*/

call _newline
call zocwriteln

done=0
do while \done

 ans=_chooselist("what to do?", "merge cim;merge ztm;save;quit", ";")
 select
  when ans="merge cim" then do

   menu1=""
   menu2=""
   if _fileexists(lpath||fname||".sct") then menu1=fname||".sct;"
   if _fileexists(lpath||fname||".prt") then menu2=fname||".prt;"
   if menu1="" and menu2="" then ans2="select..."
   else ans2=_chooselist("file?", menu1||menu2||"select...;cancel", ";")
   select
    when ans2=fname||".sct" then do
     call _mergesectorcim lpath||fname||".sct"
     saved.1=0
    end /*when*/
    when ans2=fname||".prt" then do
     call _mergeportcim lpath||fname||".prt"
     saved.2=0
    end /*when*/
    when ans2="select..." then do
     fname2=zocgetfilename("enter sector list filename:", lpath||fname||"*.sct;"||fname||"*.srf;"||fname||"*.prt;"||fname||"*.prf")
     if fname2\="##CANCEL##" then do
      if _fileexists(fname2) then do
       select
        when right(fname2,4)=".sct" then do
         call _mergesectorcim fname2
         saved.1=0
        end /*when*/
        when right(fname2,4)=".srf" then do
         call _mergesectorcim fname2
         saved.1=0
        end /*when*/
        when right(fname2,4)=".prt" then do
         call _mergeportcim fname2
         saved.2=0
        end /*when*/
        when right(fname2,4)=".prf" then do
         call _mergeportcim fname2
         saved.2=0
        end /*when*/
        otherwise call zocwriteln _ansi("bt;frd")||"<< invalid file extension:  "||fname2||" >>"
       end /*select*/
      end /*if*/
      else call zocwriteln _ansi("bt;frd")||"<< file not found:  "||fname2||" >>"
     end /*if*/
    end /*when*/
    when ans2="cancel" then nop
    when ans2="##CANCEL##" then nop
   end /*select*/
  end /*when*/

  when ans="merge ztm" then do
   if _fileexists(lpath||fname||".ztm") then ans2=_chooselist("file?", fname||".ztm;select...;cancel", ";")
   else ans2="select..."
   select
    when ans2=fname||".ztm" then do
     call _mergeztm lpath||fname||".ztm"
     saved.1=0
    end /*when*/
    when ans2="select..." then do
     fname2=zocgetfilename("enter sector list filename:", lpath||fname||"*.ztm")
     if fname2\="##CANCEL##" then do
      if _fileexists(fname2) then do
       call _mergeztm fname2
       saved.1=0
      end /*if*/
      else call zocwriteln _ansi("bt;frd")||"<< file not found:  "||fname2||" >>"
     end /*if*/
    end /*when*/
    when ans2="cancel" then nop
    when ans2="##CANCEL##" then nop
   end /*select*/
  end /*when*/

  when ans="save" then do
   if saved.1 & saved.2 then call zocwriteln "writing - nothing to write."
   if \saved.1 then call _savesectorcim lpath||fname||"_ref.sct", ns
   saved.1=1
   if \saved.2 then call _saveportcim lpath||fname||"_ref.prt", ns
   saved.2=1
  end /*when*/

  when ans="quit" then do
   if \saved.1 | \saved.2 then do
    if _yesno("reference file not saved - quit anyway?", "yn") then done=1
   end /*if*/
   else done=1
  end /*when*/

  when ans="##CANCEL##" then do
   if \saved.1 | \saved.2 then do
    if _yesno("reference file not saved - quit anyway?", "yn") then done=1
   end /*if*/
   else done=1
  end /*when*/

 end /*select*/

 call _newline
end /*do*/

call _quit

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"
    
     if arg(1,"E") then fname=arg(1)
     else fname=base
    
     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /*if*/
       end /*do*/
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /*else*/
     end /*do*/
    
     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"
    
     rslt=spath||";"||fname||";"||game
    return rslt

/** _ini_askint v.5 **/
    _ini_askint: procedure expose (globals)
     if \arg(1,"E") then msg="enter an integer"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askint"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if _stripint(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=_stripint(default)
      when rslt="##EOF##"                     then rslt=_askint(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then rslt=_stripint(rslt)
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwriteln right(fname,min(length(fname),17))||" - "||key||"="||rslt||" >"
       rslt=_stripint(rslt)
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _get_log_info v.2 **/
    _get_log_info: procedure expose (globals)
     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_info"
     rslt=lpath||";"||ldefault
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt

/** _loadsectorcim v.3 **/
    _loadsectorcim: procedure expose (globals)
     fname=arg(1)
     if _s.1="_S.1" then _s.=""
     call _newline
     call zocwrite _ansi("bt;fcy")||"reading "||fname||" "
     if _fileopenr(fname) then do
      _s.=""
      mon=0
      do while \_fileeof(fname)
       line=space(linein(fname))
       parse var line row line
       if line\="" & row\="" then do
        _s.row=translate(line,";"," ")
        mon=_spinner(mon,500)
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*if*/
     else call zocwrite "x"
    return

/** _loadportcim v.4 **/
    _loadportcim: procedure expose (globals)
     fname=arg(1)
     if _p.1="_P.1" then _p.=""
     call _newline
     call zocwrite _ansi("bt;fcy")||"reading "||fname||" "
     if _fileopenr(fname) then do
      _p.=""
      mon=0
      do while \_fileeof(fname)
       line=strip(linein(fname))
       parse var line row line
       if line\="" & row\="" then do
        line=zocstring("REPLACE",line,"- ","-")
        line=zocstring("REPLACE",line,"- ","-")
        line=zocstring("REPLACE",line,"- ","-")
        line=space(zocstring("REPLACE",line,"- ","-"))
        line=zocstring("REPLACE",line,"% ",";")
        line=strip(translate(line,", "," %"))
        line=zocstring("REPLACE",line,"-0,","0,")
        if _dword(_dword(line,1,";"),1,",")<0 then _p.row="B"
        else _p.row="S"
        if _dword(_dword(line,2,";"),1,",")<0 then _p.row=_p.row||"B"
        else _p.row=_p.row||"S"
        if _dword(_dword(line,3,";"),1,",")<0 then _p.row=_p.row||"B"
        else _p.row=_p.row||"S"
        _p.row=_p.row||";"||line
        mon=_spinner(mon,500)
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*if*/
     else call zocwrite "x"
    return

/** _chooselist v.6 **/
    _chooselist: procedure expose (globals)
     prompt=arg(1)
     list=arg(2)
     if list="" then call _error "no list"
     delim=arg(3)
     if delim="" then delim=" "
     if length(delim)>1 then call _error "long delimiter"
    
     ch.=""
     i=_dwords(list,delim)
     do j=1 to i
      ch.j=_dword(list,j,delim)
     end /*do*/
    
     if i<7 then max=1
     if i<5 then max=0
     if i>=7 then max=(i-5)%2+1
    
     done=0
     loc=0
     do while \done
      if loc<0 then loc=0
      if loc>max then loc=max
    
      select
       when loc=0 then do
        if max=0 then rslt=zocrequest(prompt, ch.1, ch.2, ch.3, ch.4)
        else rslt=zocrequest(prompt, ch.1, ch.2, ch.3, "next")
       end /*when*/
       when loc=max then do
        p1=(loc-1)*2+4
        p2=p1+1
        p3=p1+2
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, ch.p3)
       end /*when*/
       otherwise do
        p1=(loc-1)*2+4
        p2=p1+1
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, "next")
       end /*otherwise*/
      end /*select*/
    
      select
       when rslt="next" then loc=loc+1
       when rslt="back" then loc=loc-1
       when rslt="##CANCEL##" then done=1
       when rslt="" then nop
       otherwise done=1
      end /*select*/
    
     end /*do*/
    
     if lower(arg(4))="c" & rslt="##CANCEL##" then call _quit "script cancelled by user."
    
    return rslt

/** _mergesectorcim v.4 **/
    _mergesectorcim: procedure expose (globals)
     fname=arg(1)
     call _newline
     call zocwrite _ansi("bt;fcy")||"merging "||fname||" "
     if _fileopenr(fname) then do
      mon=0
      do while \_fileeof(fname)
       line=space(linein(fname))
       parse var line row line
       if line\="" & row\="" then do
        sec=translate(line,";"," ")
        new=_s.row
        do while sec\=""
         parse var sec temp ";" sec
         new=_listadd(temp,new)
        end /*do*/
        if _s.row\=new then _s.row=_listsort(new)
        mon=_spinner(mon,500)
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*if*/
     else call zocwrite "x"
    return

/** _mergeportcim v.3 **/
    _mergeportcim: procedure expose (globals)
     fname=arg(1)
     call _newline
     call zocwrite _ansi("bt;fcy")||"merging "||fname||" "
     if _fileopenr(fname) then do
      mon=0
      do while \_fileeof(fname)
       line=strip(linein(fname))
       parse var line row line
       if line\="" & row\="" & _p.row\="" then do
        line=zocstring("REPLACE",line,"- ","-")
        line=zocstring("REPLACE",line,"- ","-")
        line=zocstring("REPLACE",line,"- ","-")
        line=space(zocstring("REPLACE",line,"- ","-"))
        line=zocstring("REPLACE",line,"% ",";")
        line=strip(translate(line,", "," %"))
        line=zocstring("REPLACE",line,"-0,","0,")
        if _dword(_dword(line,1,";"),1,",")<0 then _p.row="B"
        else _p.row="S"
        if _dword(_dword(line,2,";"),1,",")<0 then _p.row=_p.row||"B"
        else _p.row=_p.row||"S"
        if _dword(_dword(line,3,";"),1,",")<0 then _p.row=_p.row||"B"
        else _p.row=_p.row||"S"
        _p.row=_p.row||";"||line
        mon=_spinner(mon,500)
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*if*/
     else call zocwrite "x"
    return

/** _mergeztm v.5 **/
    _mergeztm: procedure expose (globals)
     fname=arg(1)
    
     call _newline
     call zocwrite _ansi("bt;fcy")||"reading "||fname||" "
     if _fileopenr(fname) then do
    
      eof=_fileeof(fname)
    
      mzs.=""
      mon=0
      maxrow=1
      do while \eof
      
       line=linein(fname)
       if left(line,5)=="FM > " then do
        line=linein(fname)
        if left(line,7)=="  TO > " then do
         line=linein(fname)
         if line\="" then do
          parse var line sec1 " > " line
          sec1=_stripint(sec1)
          do while line\=""
           parse var line sec2 ">" line
           sec2=_stripint(sec2)
           _s.sec1=_listadd(sec2,_s.sec1)
           if sec1>maxrow then maxrow=sec1
           sec1=sec2
           if line="" then line=linein(fname)
          end /*do*/
         end /*do*/
        end /*if*/
        mon=_spinner(mon,100)
       end /*if*/
      
       eof=_fileeof(fname)
      
      end /*do*/
     
      call _fileclose fname
    
      call zocwriteln
      call zocwrite "merging "||fname||" "
     
      mon=0
      do i=1 to maxrow
       old=_s.i
       do while mzs.i\=""
        parse var mzs.i temp ";" mzs.i
        _s.i=_listadd(temp,_s.i)
        mon=_spinner(mon,500)
        if _s.i\=old then _s.i=_listsort(_s.i)
       end /*do*/
      end /*do*/
    
     end /*if*/
     else call zocwrite "x"
    
    return

/** _savesectorcim v.4 **/
    _savesectorcim: procedure expose (globals)
     fname=arg(1)
     ns=arg(2)
     if ns="" then call _error "number of sectors missing."
    
     if \_filenew(fname, "delete") then call _error "unable to create "||fname||"."
    
     call _newline
     call zocwrite _ansi("bt;fcy")||"writing "||fname||" "
    
     mon=0
     wns=length(ns)
     do i = 1 to ns
      if _s.i\="" then do
       line=copies(" ",wns-length(i))||i
       do j=1 to _dwords(_s.i,";")
        temp=_dword(_s.i,j,";")
        line=line||copies(" ",wns+1-length(temp))||temp
       end /*do*/
       call lineout fname, line
       mon=_spinner(mon,500)
      end /*if*/
     end /*do*/
    
     call _fileclose fname
    return

/** _saveportcim v.3 **/
    _saveportcim: procedure expose (globals)
     fname=arg(1)
     ns=arg(2)
     if ns="" then call _error "number of sectors missing."
    
     if \_filenew(fname, "delete") then call _error "unable to create "||fname||"."
    
     call _newline
     call zocwrite _ansi("bt;fcy")||"writing "||fname||" "
    
     mon=0
     wns=length(ns)
     do i = 1 to ns
      if _p.i\="" then do
       parse var _p.i type ";" pq.1 "," pp.1 ";" pq.2 "," pp.2 ";" pq.3 "," pp.3
       line=copies(" ",wns-length(i))||i||" "
       neg.=" "
       if left(type,1)="B" then neg.1="-"
       if substr(type,2,1)="B" then neg.2="-"
       if right(type,1)="B" then neg.3="-"
       do j=1 to 3
        line=line||neg.j||copies(" ",5-length(abs(pq.j)))||abs(pq.j)||copies(" ",4-length(pp.j))||pp.j||"% "
       end /*do*/
       call lineout fname, line
       mon=_spinner(mon,500)
      end /*if*/
     end /*do*/
    
     call _fileclose fname
    return

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user."
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user."
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=left(arg(2),1)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*do*/
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.2 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|",arg(3)))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user."
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/
    
     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
    
     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname 
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"
    
    return v

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _fileopenr v.3 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.3 **/
    _fileeof: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileeof"
     if stream(arg(1), "S")="READY" then rslt=0
     else rslt=1
    return rslt

/** _spinner v.3 **/
    _spinner: procedure expose (globals)
     if arg(1,"E") then count=arg(1)
     else call _error "missing parameter in _spinner"
     if arg(2,"E") then width=arg(2)
     else width=50
     if arg(3,"E") & length(arg(3))=5 then chs=arg(3)
     else chs="-\|/."
     select
      when count=-1        then call zocwrite d2c(27)||"[1D"||substr(chs,5,1)
      when count<0         then count=-1
      when count=0         then call zocwrite left(chs,1)
      when count=width     then call zocwrite d2c(27)||"[1D"||substr(chs,2,1)
      when count=(width*2) then call zocwrite d2c(27)||"[1D"||substr(chs,3,1)
      when count=(width*3) then call zocwrite d2c(27)||"[1D"||substr(chs,4,1)
      when count=(width*4) then do
       call zocwrite d2c(27)||"[1D"||left(chs,1)
       count=0
      end /*when*/
      otherwise nop
     end /*select*/
     count=count+1
    return count

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _listadd v.3 **/
    _listadd: procedure expose (globals)
     add=arg(1)
     list=arg(2)
     sort=arg(3)
     delim=";"
     if sort="" then sort=0
     temp1=list
     if list="" then list=add
     else do
      do i=1 to _dwords(add,delim)
       found=0
       do j=1 to _dwords(list,delim)
        if _dword(add,i,delim)=_dword(list,j,delim) then found=1
        if found then leave
       end /*do*/
       if \found then list=list||";"||_dword(add,i,delim)
      end /*do*/
      if \found & sort then list=_listsort(list)
     end /*else*/
    return list

/** _listsort v.3 **/
    _listsort: procedure expose (globals)
     list=arg(1)
     a.=""
     do i=1 to _dwords(list,";")
      a.i=_dword(list,i,";")
     end /*do*/
     do k=i-1 to 1 by -1
      do j= 1 to k
       j2=j+1
       if a.j>a.j2 then do
        temp=a.j
        a.j=a.j2
        a.j2=temp
       end /*if*/
      end /*do*/
     end /*do*/
     list=a.1
     i=2
     do while a.i\=""
      if list="" then list=a.i
      else list=list||";"||a.i
      i=i+1
     end /*do*/
    return list

/** _filenew v.3 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt
