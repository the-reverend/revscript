/* REXX _distance by the reverend (build 28) */
/* rev. 0 - initial release */

call zoctimeout 30
call zocsynctime 500
/*call on halt name _halt*/

call _newline _ansi("b", "green")
parse value _getgameinfo() with spath ";" iname ";" game
ns=_ini_askint("how many sectors in universe?", 5000, iname, game, "ns")
if ns<1 | ns>20000 then call _error "number out of range"

fname=_ini_askstr("enter cim filename (no extension):", "cim", iname, game, "cim")
parse value _get_log_info() with lpath ";" ldefault
fname=lpath||fname||".map"
if \_fileexists(fname) then call _error "file not found: "||fname
reclen=_mapinit(fname)

call _mapdistprecalc 1, 5, ns, fname, reclen

start=_asknum("from? (0 or ESC to cancel)",0,"c")
do while start>ns
 start=_asknum("from? (0 or ESC to cancel)","enter a number less than "||ns,"c")
end /* do */
if start>0 then do
 target=_asknum("to? (0 or ESC to cancel)",0,"c")
 do while target>ns
  target=_asknum("to? (0 or ESC to cancel)","enter a number less than "||ns,"c")
 end /* do */
end /* if */

do while start>0
 parse value _mapdist(start,target,ns,fname,reclen) with dist ";" path
 if dist=0 & path=0 then call zocwriteln _ansi("b","red")||"no path found."
 else do
  call zocwriteln _ansi("b","yellow")||" the shortest path ("||dist||" hops) from sector "||start||" to sector "||target||" is:"
  parse var path sec ";" path
  call zocwrite _ansi("b","white")||" "||sec
  do while path\=""
   parse var path sec ";" path
   call zocwrite " > "||sec
  end /* do */
  call zocwriteln
 end /* else */
 start=_asknum("from? (0 or ESC to cancel)",start,"c")
 do while start>ns
  start=_asknum("from? (0 or ESC to cancel)","enter a number less than "||ns,"c")
 end /* do */
 if start>0 then do
  target=_asknum("to? (0 or ESC to cancel)",target,"c")
  do while target>ns
   target=_asknum("to? (0 or ESC to cancel)","enter a number less than "||ns,"c")
  end /* do */
 end /* if */
end /* do */

call _quit

exit

/*** THE REVEREND'S TW LIBRARY FOR ZOC/REXX ***/
/*    last updated: 21 Aug 2001, 15:57:32     */

/** _ansi v.1 **/
    _ansi:
     b=0
     if arg(1)="b" then do
      b=1
      c=arg(2)
     end /* if */
     else c=arg(1)
     select
      when c="gray" then ansi=30
      when c="red" then ansi=31
      when c="green" then ansi=32
      when c="yellow" then ansi=33
      when c="blue" then ansi=34
      when c="magenta" then ansi=35
      when c="cyan" then ansi=36
      when c="white" then ansi=37
      otherwise ansi=37
     end /* select */
     ansi="^[["||b||";"||ansi||"m"
    return ansi

/** _ansi2 v.1 **/
    _ansi2:
     ansir="0;"
     if pos("dl" ,arg(1))>0 then ansir=ansir||0||";"  /* dull               */
     if pos("bt" ,arg(1))>0 then ansir=ansir||1||";"  /* bright             */
     if pos("ul" ,arg(1))>0 then ansir=ansir||4||";"  /* underlined         */
     if pos("blk",arg(1))>0 then ansir=ansir||5||";"  /* blinking           */
     if pos("fbk",arg(1))>0 then ansir=ansir||30||";" /* black foreground   */
     if pos("frd",arg(1))>0 then ansir=ansir||31||";" /* red foreground     */
     if pos("fgr",arg(1))>0 then ansir=ansir||32||";" /* green foreground   */
     if pos("fye",arg(1))>0 then ansir=ansir||33||";" /* yellow foreground  */
     if pos("fbl",arg(1))>0 then ansir=ansir||34||";" /* blue foreground    */
     if pos("fmg",arg(1))>0 then ansir=ansir||35||";" /* magenta foreground */
     if pos("fcy",arg(1))>0 then ansir=ansir||36||";" /* cyan foreground    */
     if pos("fwh",arg(1))>0 then ansir=ansir||37||";" /* white foreground   */
     if pos("bbk",arg(1))>0 then ansir=ansir||40||";" /* black background   */
     if pos("brd",arg(1))>0 then ansir=ansir||41||";" /* red background     */
     if pos("bgr",arg(1))>0 then ansir=ansir||42||";" /* green background   */
     if pos("bye",arg(1))>0 then ansir=ansir||43||";" /* yellow background  */
     if pos("bbl",arg(1))>0 then ansir=ansir||44||";" /* blue background    */
     if pos("bmg",arg(1))>0 then ansir=ansir||45||";" /* magenta background */
     if pos("bcy",arg(1))>0 then ansir=ansir||46||";" /* cyan background    */
     if pos("bwh",arg(1))>0 then ansir=ansir||47||";" /* white background   */

     ansir="^[["||left(ansir,length(ansir)-1)||"m"
    return ansir

/** _ini_askint v.2 **/
    _ini_askint:
     aipmt=arg(1)
     aidef=arg(2)
     aifname=arg(3)
     aisect=arg(4)
     aivar=arg(5)
     aimode=arg(6)
     aiflag=0

     if aisect="##EOF##" then aiflag=1
     if \aiflag then aiint=_getinivar(aifname, aisect, aivar)
     if aiint="##EOF##" then aiflag=1
     aiint=_stripint(aiint)
     if aiint="" then aiflag=1
     if aiflag then do
      if aipmt="##DEFAULT##" then aiint=aidef
      else aiint=_asknum(aipmt||" ("||aivar||"=)",aidef)
     end /* if */
     else if aimode="" then call zocwriteln "<< using "||aifname||" - "||aivar||"="||aiint||" >>"
     if aiint="##CANCEL##" then call _quit "script cancelled by user."
    return aiint

/** _ini_askstr v.3 **/
    _ini_askstr:
     aipmt=arg(1)
     aidef=arg(2)
     aifname=arg(3)
     aisect=arg(4)
     aivar=arg(5)
     aimode=arg(6)
     aiflag=0

     if aigame="##EOF##" then aiflag=1
     if \aiflag then aistr=_getinivar(aifname, aisect, aivar)
     if aistr="##EOF##" then aiflag=1
     if aiflag then do
      if aipmt="##DEFAULT##" then aistr=aidef
      else aistr=zocask(aipmt||" ("||aivar||"=)",aidef)
     end /* if */
     else do
      parse var aistr aitemp "^" .
      if length(aitemp)>17 then aitemp=left(aitemp,20)
      if aitemp\=aistr then aitemp=aitemp||"..."
      if aimode="" then call zocwriteln "<< using "||aifname||" - "||aivar||"="||aitemp||" >>"
     end /* else */
     if aistr="##CANCEL##" then call _quit "script cancelled by user."
    return aistr

/** _asknum v.3 **/
    _asknum:
     aninit=arg(2)
     andone=0
     do while \andone
      anans=zocask(arg(1), aninit)
      if anans="##CANCEL##" then andone=1
      else do
       anans=_stripint(anans)
       if anans\="" then andone=1
      end /* else */
      if \andone then aninit="please enter a number or ESC to cancel."
     end /* do */
     if lower(arg(3))="c" & anans="##CANCEL##" then call _quit "script cancelled by user."
    return anans

/** _beep v.1 **/
    _beep:
     bpfile=arg(1)
     if bpfile\="" then if \_fileexists(bpfile) then bpfile=""
     if bpfile="" then call zocwrite d2c(7)
     else do
      bptemp=zocgetprogramoption("SoundBellWav")
      parse var bptemp 'SoundBellWav="' bptemp '"'
      call zocsetglobaloption('SoundBellWav="'||bpfile||'"')
      call zocwrite d2c(7)
      call zocsetglobaloption('SoundBellWav="'||bptemp||'"')
     end /* else */
    return

/** _chooselist v.4 **/
    _chooselist:
     clprompt=arg(1)
     cllist=arg(2)
     if cllist="" then call _error "no list"
     cldelim=arg(3)
     if cldelim=""        then call _error "missing delimiter"
     if length(cldelim)>1 then call _error "long delimiter"
     clch.=""

     cldone=0
     cli=0
     cld=pos(cldelim, cllist)
     if cld=0 then do
      clch.1=cllist
      cldone=1
     end /* if */

     do while \cldone
      cli=cli+1
      clch.cli=left(cllist, cld-1)
      cllist=substr(cllist, cld+1)
      cld=pos(cldelim, cllist)
      if cld=0 then cldone=1
     end /* while */
     if length(cllist)>0 then do
      cli=cli+1
      clch.cli=cllist
     end /* if */
     if cli<7 then clmax=1
     if cli<5 then clmax=0
     if cli>=7 then clmax=(cli-5)%2+1

     cldone=0
     clpos=0
     do while \cldone
      if clpos<0 then clpos=0
      if clpos>clmax then clpos=clmax

      select
       when clpos=0 then do
        if clmax=0 then clans=zocrequest(clprompt, clch.1, clch.2, clch.3, clch.4)
        else clans=zocrequest(clprompt, clch.1, clch.2, clch.3, "next")
       end /* when */
       when clpos=clmax then do
        clp1=(clpos-1)*2+4
        clp2=clp1+1
        clp3=clp1+2
        clans=zocrequest(clprompt, "back", clch.clp1, clch.clp2, clch.clp3)
       end /* when */
       otherwise do
        clp1=(clpos-1)*2+4
        clp2=clp1+1
        clans=zocrequest(clprompt, "back", clch.clp1, clch.clp2, "next")
       end /* otherwise */
      end /* select */

      select
       when clans="next" then clpos=clpos+1
       when clans="back" then clpos=clpos-1
       when clans="##CANCEL##" then cldone=1
       when clans="" then nop
       otherwise cldone=1
      end /* select */

     end /* do */

     if lower(arg(4))="c" & clans="##CANCEL##" then call _quit "script cancelled by user."

    return clans

/** _error v.3 **/
    _error:
     if arg(1)="" then call zocterminate
     else errmsg="<< script error:  "||arg(1)||" >>"
     errmail="<< if this is a serious problem, email me at: tw.the_reverend@excite.com >> "

     eline=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     if length(eline)>0 then call zocwriteln
     call zocwriteln "^[[1;31m"||errmsg||"^[[0;35m"
     if arg(1)\="timeout" then call zocwriteln "^[[1;33m"||errmail||"^[[0;35m"
     if length(eline)>0 then call zocwrite eline
     call _beep "error.wav"
     exit
    return

/** _fileclose v.1 **/
    _fileclose:
     call stream arg(1), "C", "CLOSE"
    return

/** _fileeof v.1 **/
    _fileeof:
     if stream(arg(1), "S")="READY" then feofr=0
     else feofr=1
    return feofr

/** _fileexists v.1 **/
    _fileexists:
     if stream(arg(1), "C", "QUERY EXISTS")="" then fer=0
     else fer=1
    return fer

/** _filenew v.1 **/
    _filenew:
     fnr=1
     fnname=arg(1)
     if fnname="" then call _error "no filename"
     if \_fileexists(fnname) then call stream fnname, "C", "OPEN WRITE"
     else do
      if lower(arg(2))="delete" then do
       call dosdel fnname
       if \_fileexists(fnname) then call stream fnname, "C", "OPEN WRITE"
       else fnr=0
      end /* if */
      else fnr=0
     end /* else */
    return fnr

/** _fileopenr v.1 **/
    _fileopenr:
     for=1
     foname=arg(1)
     if foname="" then call _error "no filename"
     for=_fileexists(foname)
     if for then do
      call stream foname, "C", "OPEN READ"
      for=\_fileeof(foname)
      if \for then call _fileclose foname
     end /* if */
    return for

/** _fileopenw v.1 **/
    _fileopenw:
     for=1
     foname=arg(1)
     if foname="" then call _error "no filename"
     for=_fileexists(foname)
     if for then do
      call stream foname, "C", "OPEN WRITE"
      call stream foname, "C", "SEEK <0"
     end /* if */
     else for=_filenew(foname)
    return for

/** _getgameinfo v.2 **/
    _getgameinfo:
     parse value zocgetglobaloption("ScriptPath") with . '="' ggpath '"'
     ggpath=ggpath||"\"
     ggini=ggpath||"script.ini"
 
     parse value zocgetglobaloption("WindowTitle") with . '="' gggame '"'
     if gggame="" | gggame="%ZOCORHOST% %OPTIONS%" then do
      gglist=_getiniheadings(ggini)
      if gglist="##EOF##" then gggame="##EOF##"
      else gggame=_chooselist("select a game:", gglist, ";", "c")
     end /* do */

     call zocwriteln "<< using "||ggini||" - ["||gggame||"] >>"

     ggr=ggpath||";"||ggini||";"||gggame
    return ggr

/** _getiniheadings v.2 **/
    _getiniheadings:
     ininame=arg(1)
     if ininame="" then call _error "no filename"
     if stream(ininame, "C", "QUERY EXISTS")="" then inilist="##EOF##"
     else do
      call stream ininame, "C", "OPEN READ"
 
      inilist=""
      inieof=0
      if stream(ininame, "S")\="READY" then inieof=1
 
      do while \inieof
       iniline=linein(ininame)
       if left(iniline,1)=="[" then do
        if inilist="" then inilist=substr(iniline,2,length(iniline)-2)
        else inilist=inilist||";"||substr(iniline,2,length(iniline)-2)
       end /* if */
       if stream(ininame, "S")\="READY" then inieof=1
      end /* do */
 
      if length(inilist)=0 then inilist="##EOF##"
      call stream ininame, "C", "CLOSE"
     end /* else */
    return inilist

/** _getinivar v.1 **/
    _getinivar:
     ininame=arg(1)
     inihead=arg(2)
     inivar=arg(3)

     if ininame="" then call _error "no filename"
     if inihead="" then call _error "no heading"
     if inivar="" then call _error "no variable"

     if stream(ininame, "C", "QUERY EXISTS")="" then inival="##EOF##"
     else do
      call stream ininame, "C", "OPEN READ"
 
      inidone=0
      inieof=0
      if stream(ininame, "S")\="READY" then inieof=1
 
      do while \(inidone | inieof)
       iniline=linein(ininame)
       if left(iniline,1)=="[" then do
        if substr(iniline,2,length(iniline)-2)==inihead then inidone=1
       end /* if */
       if stream(ininame, "S")\="READY" then inieof=1
      end /* do */
 
      inidone=0
 
      do while \(inidone | inieof)
       iniline=linein(ininame)
       if left(iniline,1)="[" then inieof=1
       inieq=pos("=",iniline)
       if inieq>0 then do
        if left(iniline,inieq-1)==inivar then inidone=1
       end /* if */
       if stream(ininame, "S")\="READY" then inieof=1
      end /* do */
 
      call stream ininame, "C", "CLOSE"
 
      if inieof then inival="##EOF##"
      else inival=substr(iniline,inieq+1)
     end /* else */

    return inival

/** _get_log_info v.1 **/
    _get_log_info:
     parse value zocgetoption("CaptDefaultName") with . '="' gldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' glpath '"'
     glpath=glpath||"\"
     glr=glpath||";"||gldefault
    return glr

/** _getvoids v.3 **/
    _getvoids:
     gvname=arg(1)
     gvmode=arg(2)
     v.=0
     if lower(gvmode)="file" then do
      if _fileexists(gvname) then do
       if _fileopenr(gvname) then do
        call zocwrite _ansi2("btfye")
        gvmon=0
        do while \_fileeof(gvname)
         gvn=c2d(charin(gvname))+c2d(charin(gvname))*256
         v.gvn=1
         gvmon=_spinner(gvmon,10)
        end /* do */
        call _fileclose(gvname)
        call zocwrite " "||_ansi2("dlfmg")
       end /* if */
      end /* if */
     end /* if */
     else do
      call zocreceivebuf 128*1024
      call zocsend "cxq"
      if zocwaitmux("Command [", "Citadel command")=640 then call _error "timeout"
      gvbuff=_stripansi(zocreceivebuf(0))
      gvbuff=substr(gvbuff,pos("<List Avoided Sectors>"||d2c(13)||d2c(13),gvbuff)+25)
      gvs=0
      gvcr=pos(d2c(13),gvbuff)
      do while gvcr>1
       gvline=strip(left(gvbuff,gvcr-1))
       gvbuff=substr(gvbuff,gvcr+1)
       gvcr=pos(d2c(13),gvbuff)
       if gvline\="No Sectors are currently being avoided." & gvline\="" then do
        do while gvline\=""
         parse var gvline gvs gvline
         v.gvs=1
        end /* do */
       end /* if */
      end /* do */
      if gvname\="" then do
       if _fileexists(gvname) then call dosdel gvname
       if _filenew(gvname) then do
        call zocwrite _ansi2("btfye")
        gvmon=0
        do gvi=1 to gvs
         if v.gvi then do
          call charout gvname, d2c(gvi//256)
          call charout gvname, d2c(gvi%256)
          gvmon=_spinner(gvmon,10)
         end /* if */
        end /* do */
        call _fileclose(gvname)
        call zocwriteln " "||_ansi2("dlfmg")
       end /* if */
      end /* if */
     end /* else */

    return

/** _halt v.1 **/
    _halt:
     call zocwriteln
     call zocwriteln "^[[1;33m<< script aborted by user. >>^[[0;35m "
     exit
    return

/** _in v.1 **/
    _in:
     if length(arg(1))=0 then ir=0
     else do
      if verify(arg(1),arg(2))=0 then ir=1
      else ir=0
     end /* else */
    return ir

/** _instr v.2 **/
    _instr:
     ifind=arg(1)
     istr=arg(2)
     if lower(arg(3))\="cs" then do
      ifind=lower(ifind)
      istr=lower(istr)
     end /* if */
     if pos(ifind,istr)>0 then ir=1
     else ir=0
    return ir

/** _mapdist v.1 **/
    _mapdist:
     mdstart=arg(1)
     mdtarget=arg(2)
     mdns=arg(3)
     mdname=arg(4)
     mdreclen=arg(5)
     q.=""
     q.1=mdstart||" 0 "||mdstart
     mdr=mdstart

     select

      when mdstart=mdtarget then mdr="0;"||mdr

      when md.mdstart.mdtarget>0 then do
        md1=s.mdstart
        do mdi=md.mdstart.mdtarget to 2 by -1
         do while md1\=""
          parse var md1 mdsec ";" md1
          if md.mdsec.mdtarget=mdi-1 then leave
         end /* do */
         mdr=mdr||";"||mdsec
         md1=s.mdsec
        end
        mdr=md.start.target||";"||mdr||";"||mdtarget
      end /* when */

      otherwise do
       call _newline
       call zocwrite _ansi("b","cyan")||"searching "
       mdrow=mdstart
       mdi=_progress(0,mdns)
       mdi2=2
       mddone=0
       do while \mddone
        mdrow=word(q.mdi,1)
        call _mapseek mdname, mdreclen, mdrow
        mdj=1
        mdw1=_mdwarp(s.mdrow,mdj)
        do while \(mdw1=0 | mddone)
         if \_mdinq(mdw1) then do
          q.mdi2=mdw1||" "||word(q.mdi,2)+1||" "||word(q.mdi,3)||";"||mdw1
          mdlist=word(q.mdi2,3)
          md2=word(q.mdi2,2)
          do while mdlist\=mdw1
           parse var mdlist md1 ";" mdlist
           md.md1.mdw1=md2
           md2=md2-1
          end /* do */
          mdi2=mdi2+1
         end /* do */
         if md.mdstart.mdtarget>0 then mddone=1
         else do
          mdj=mdj+1
          mdw1=_mdwarp(s.mdrow,mdj)
         end /* else */
        end /* do */
        mdi=_progress(mdi,mdns)
        if mdi>=mdi2 then mddone=1
       end /* do */
       if mdw1=0 then mdr="0;0"
       else do
        md1=s.mdstart
        do mdi=md.mdstart.mdtarget to 2 by -1
         do while md1\=""
          parse var md1 mdsec ";" md1
          if md.mdsec.mdtarget=mdi-1 then leave
         end /* do */
         mdr=mdr||";"||mdsec
         md1=s.mdsec
        end
        mdr=md.start.target||";"||mdr||";"||mdtarget
       end /* else */
       call zocwriteln
      end /* otherwise */

     end /* select */
    return mdr

    _mdinq:
     mdiseek=arg(1)
     mdifound=0
     if mdiseek>0 then do
      mdidone=0
      mdiindex=1
      do while \mdidone
       if mdiseek=word(q.mdiindex,1) then do
        mdidone=1
        mdifound=1
       end /* if */
       else mdiindex=mdiindex+1
       if q.mdiindex="" then mdidone=1
      end /* do */
     end /* if */
    return mdifound

    _mdwarp:
     mdwlist=arg(1)
     mdwnum=arg(2)
     do mdwindex=1 to mdwnum
      parse var mdwlist mdwr ";" mdwlist
      if mdwr="" then leave
     end /* do */
     if mdwr="" then mdwr=0
    return mdwr

/** _mapdistprecalc v.1 **/
    _mapdistprecalc:
     mdstart=arg(1)
     mddepth=arg(2)
     mdns=arg(3)
     mdname=arg(4)
     mdreclen=arg(5)
     q.=""
     q.1=mdstart||" 0 "||mdstart

     call _newline
     call zocwrite _ansi("b","cyan")||"searching "
     mdrow=mdstart
     mdi=_progress(0,mdns)
     mdi2=2
     mddone=0
     do while \mddone
      mdrow=word(q.mdi,1)
      call _mapseek mdname, mdreclen, mdrow
      mdj=1
      mdw1=_mdwarp(s.mdrow,mdj)
      do while \(mdw1=0 | mddone)
       if \_mdinq(mdw1) then do
        q.mdi2=mdw1||" "||word(q.mdi,2)+1||" "||word(q.mdi,3)||";"||mdw1
        mdlist=word(q.mdi2,3)
        md2=word(q.mdi2,2)
        do while mdlist\=mdw1
         parse var mdlist md1 ";" mdlist
         md.md1.mdw1=md2
         md2=md2-1
        end /* do */
        mdi2=mdi2+1
       end /* do */
       if md.mdstart.mdw1>mddepth then mddone=1
       else do
        mdj=mdj+1
        mdw1=_mdwarp(s.mdrow,mdj)
       end /* else */
      end /* do */
      mdi=_progress(mdi,mdns)
      if mdi>=mdi2 then mddone=1
     end /* do */
     call zocwriteln
    return

/** _mapinit v.1 **/
    _mapinit:
     md.=0
     miname=arg(1)
     call _fileopenr(miname)
     mireclen=c2d(charin(miname))
    return mireclen

/** _mapseek v.1 **/
    _mapseek:
     msname=arg(1)
     msreclen=arg(2)
     mssector=arg(3)

     if s.mssector="S."||mssector | s.mssector="" then do

      call stream msname, "C", "SEEK "||(mssector-1)*msreclen+2
 
      msexp=0
      mspex=0
      mspav=0
      msbequ=0
      msborg=0
      msbore=0
      msflags=c2d(charin(msname))
      if msflags%32=1 then do
       msexp=1
       msflags=msflags-32
      end /* if */
      if msflags%16=1 then do
       mspex=1
       msflags=msflags-16
      end /* if */
      if msflags%8=1 then do
       mspav=1
       msflags=msflags-8
      end /* if */
      if msflags%4=1 then do
       msbore=1
       msflags=msflags-4
      end /* if */
      if msflags%2=1 then do
       msborg=1
       msflags=msflags-2
      end /* if */
      if msflags%1=1 then do
       msbequ=1
       msflags=msflags-1
      end /* if */
 
      if mspex then do
       if msbore then p.mssector="B"
       else p.mssector="S"
       if msborg then p.mssector=p.mssector||"B"
       else p.mssector=p.mssector||"S"
       if msbequ then p.mssector=p.mssector||"B"
       else p.mssector=p.mssector||"S"
       do msi=1 to 3
        ms1=charin(msname)
        ms2=charin(msname)
        ms3=charin(msname)
        p.mssector=p.mssector||";"c2d(ms1)+c2d(ms2)*256||","||c2d(ms3)
       end /* do */
      end /* if */
      else do
       p.mssector=""
       call stream msname, "C", "SEEK "||(mssector-1)*msreclen+2+10
      end /* else */
 
      ms1=c2d(charin(msname))+c2d(charin(msname))*256
      if ms1=0 then s.mssector=""
      else do
       s.mssector=ms1
       do msi=1 to 5
        ms1=c2d(charin(msname))+c2d(charin(msname))*256
        if ms1>0 then s.mssector=s.mssector||";"||ms1
       end /* do */
      end /* else */

     end /* if */
    return

/** _newline v.1 **/
    _newline:
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _pcheck v.2 **/
    _pcheck:
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     pcr=0
     pci=1
     do while pc1\=""
      parse var pc1 pc1a ";" pc1
      if _instr(pc1a,pc2,"cs") then pcr=pci
      pci=pci+1
     end /* do */
    return pcr

/** _progress v.1 **/
    _progress:
     progcount=arg(1)
     progmax=arg(2)
     if progcount=0 then call zocwrite "[     0%   ]"
     else do
      if ((progcount*100)//progmax)=0 then do
       pri=(progcount*100)%progmax
       call zocwrite d2c(27)||"[12D["
       select
        when pri>=30 then call zocwrite "***"
        when pri>=20 then call zocwrite "** "
        when pri>=10 then call zocwrite "*  "
        otherwise call zocwrite "   "
       end /* select */
       select
        when pri=100 then call zocwrite pri||"%"
        when pri>=40 then call zocwrite "*"||pri||"%"
        when pri>=10 then call zocwrite " "||pri||"%"
        otherwise call zocwrite "  "||pri||"%"
       end /* select */
       select
        when pri=100 then call zocwrite "***"
        when pri>=90 then call zocwrite "** "
        when pri>=80 then call zocwrite "*  "
        otherwise call zocwrite "   "
       end /* select */
       call zocwrite "]"
      end /* if */
     end /* else */
     progcount=progcount+1
    return progcount

/** _quit v.3 **/
    _quit:
     if arg(1)=="" then qmsg="<< script ended. >>"
     else qmsg="<< script ended:  "||arg(1)||" >>"
     qline=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     if length(qline)>0 then call zocwriteln
     call zocwriteln "^[[1;32m"||qmsg||"^[[0;35m"
     if length(qline)>0 then call zocwrite qline
     if arg(1)="script cancelled by user." then call _beep "cancel.wav"
     else call _beep "quit.wav"
     exit
    return 1

/** _spinner v.1 **/
    _spinner:
     spincount=arg(1)
     if arg(2)="" then spinwidth=50
     else spinwidth=arg(2)
     select
      when spincount=0 then call zocwrite "-"
      when spincount=spinwidth then call zocwrite d2c(27)||"[1D\"
      when spincount=(spinwidth*2) then call zocwrite d2c(27)||"[1D|"
      when spincount=(spinwidth*3) then call zocwrite d2c(27)||"[1D/"
      when spincount=(spinwidth*4) then do
       call zocwrite d2c(27)||"[1D-"
       spincount=0
      end /* when */
      otherwise nop
     end /* select */
     spincount=spincount+1
    return spincount

/** _stripansi v.2 **/
    _stripansi:
     saline=arg(1)
     sar=""
     salf=pos(d2c(10),saline)
     do while salf>0
      saline=delstr(saline,salf,1)
      salf=pos(d2c(10),saline)
     end /* do */
     sanull=pos(d2c(0),saline)
     do while sanull>0
      saline=delstr(saline,sanull,1)
      sanull=pos(d2c(0),saline)
     end /* do */
     saesc=pos(d2c(27),saline)
     do while saesc>0
      sam=pos("m",saline,saesc+1)
      if sam=0 then saline=delstr(saline,saesc,1)
      else saline=delstr(saline,saesc,sam-saesc+1)
      saesc=pos(d2c(27),saline)
     end /* do */
     saesc=pos("^[",saline)
     do while saesc>0
      sam=pos("m",saline,saesc+1)
      if sam=0 then saline=delstr(saline,saesc,2)
      else saline=delstr(saline,saesc,sam-saesc+1)
      saesc=pos("^[",saline)
     end /* do */
    return saline

/** _stripint v.2 **/
    _stripint:
     stint=""
     sttemp=strip(arg(1))
     if bdflag=1 then call _error
     do sti=1 to length(sttemp)
      stchar=substr(sttemp,sti,1)
      if length(stint)=0 then do
       if verify(stchar,"1234567890-")=0 then stint=stint||stchar
      end /* if */
      else if verify(stchar,"1234567890")=0 then stint=stint||stchar
     end /* do */
     if \datatype(stint,"W") then stint=""
    return stint

/** _yesno v.2 **/
    _yesno:
     select
      when arg(2)="yn" then yn=zocrequest(arg(1)||" (ESC=no)", "yes", "no")
      otherwise yn=zocrequest(arg(1), "yes", "no", "cancel")
     end /* select */
     select
      when yn="cancel" then call _quit "script cancelled by user."
      when yn="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user."
      when yn="yes" then yn=1
      otherwise yn=0
     end /* select */
    return yn

