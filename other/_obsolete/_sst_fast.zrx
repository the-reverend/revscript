/* REXX _sst_fast.zrx by the reverend (build 84)                              */
/*-       built by rev-builder version 1.0 on 20 May 2002 at 12:10:48        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-            http://thereverend.coastgames.com/rev-license.html            -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 60
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

if \_pcheck("Command [") then call _error "please start at the command prompt."

call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
sf=_ini_askint("steal factor?", 70, iname, game, "sf")
clearfreq=_ini_askint("enter bust clear frequency (days):", 1, iname, game, "bust_clear")
extern=_ini_asknum("enter extern time (24-hour time):", 23, iname, game, "extern")
bname=_ini_askstr("enter bust filename (no extension):", "cim", iname, game, "cim")
if bname="" then call _error "script cancelled by user."
redships=_ini_askstr("ship types to use? (blank line for any ship)", "Colonial Transport;CargoTran;Taurean Mule", iname, game, "red_ships")

watch=_yesno("would you like to watch who is online (will slow down script)?")

parse value _get_log_info() with lpath ";" ldefault

fed.=0
type.=""
ship.=""
sline.=""
xline.=""
sector.=""
amount.=""
busted.=0
expcheck=0
maxholds=0
laststeal=1

ynq="learn mode:  add a ship? (FIRST SHIP SHOULD BE YOUR LAST STEAL.)"

call _newline _ansi("bt;frd")
call zocwriteln "              WARNING"||_ansi("bt;fye")
call zocwriteln "  first ship should be last STEAL"
call zocwriteln "     be careful not to fake..."
call zocwriteln _ansi("bt;fgr")

i=1
do while _yesno(ynq)

 parse value _xportlearn("learn mode:  choose ship #"||i, redships) with xline.i ";" sector.i ";" ship.i

 call zocsend "d"
 type.i=""
 fed.i=0
 done2=0
 do while \done2
  ans=zocwaitmux("Command [","Beacon  :", "Ports   :")
  select
   when ans=0 then done2=1
   when ans=1 then do
    if zocwait("^M")=640 then call _error "timeout"
    if _lastline()=" FedSpace, FedLaw Enforced" then fed.i=1
   end /* when */
   when ans=2 then do
    if zocwait("^M")=640 then call _error "timeout"
    parse value _lastline() with . "Class" num "(" type.i ")"
   end /* when */
   when ans=640 then call _error "timeout"
  end /* select */
 end /* do */

 if right(type.i,1)\="B" & num\=9 then do
  sector.i=""
  call zocmsgbox "this is not an xxB port."
 end /* when */

 if _bustcheck(lpath||bname||"_bust.txt"||";"||clearfreq||";"||extern,sector.i) then do
  if \_yesno("you have busted in "||sector.i||".  steal here anyway?") then sector.i=""
 end /* if */

 if sector\="" then do

  sline.i="pt^M^M"
  if left(type.i,1)="S" then sline.i=sline.i||"0^M"
  if substr(type.i,2,1)="S" then sline.i=sline.i||"0^M"
  sline.i=sline.i||"pr^Ms3"

  parse value _getinfo("hlds;ore;org;equ;col;exp;aln;turns") with holds.i ";" ore ";" org ";" equ ";" colos ";" exp ";" align ";" turns
  if zocwait("Command [")=640 then call _error "timeout"
  if holds.i>maxholds then maxholds=holds.i
  if ore>0 | org>0 | colos>0 then do
   if \_jetisson() then call _error "jetisson failure."
   equ=0
  end /* if */
  if equ<min(trunc(exp/((sf/100)*30)),holds.i) & laststeal\=i then do
   parse value _portpeeksteal() with . ";" . ";" . ";" . "," equavail
   if (equavail+equ)<min(trunc(exp/((sf/100)*30)),holds.i) then if \_upgradeport(3,(min(holds.i,trunc(exp/((sf/100)*30)))-equavail-equ)%10+1) then call _error "port upgrade failed."
   if equ=0 then do
    ps=_portsteal(3,trunc(exp/((sf/100)*30)))
    parse var ps pm ";" pexp ";" pam ";" pav ";" ph ";" turns
    select
     when pm="##OK##" then do
      exp=exp+pexp
      if trunc(exp/((sf/100)*30))<holds.i then amount.i=trunc(exp/((sf/100)*30))||"^M"
      else amount.i="^M"
      laststeal=i
      i=i+1
     end /* when */
     when pm="##FAKE##" then do
      call _bustadd lpath||bname||"_bust.txt"||";"||clearfreq||";"||extern, sector.i
      sector.i=""
      call zocmsgbox "fake busted in learn mode.  choose another ship."
     end /* when */
     when pm="##BUSTED##" then do
      call _bustadd lpath||bname||"_bust.txt"||";"||clearfreq||";"||extern, sector.i
      sector.i=""
      call zocmsgbox "busted in learn mode.  choose another ship."
     end /* when */
     when pm="##HOLDS##" then call _error "DEBUG _portsteal holds problem"
    end /* select */
   end /* if */
   else do
    if trunc(exp/((sf/100)*30))<holds.i then amount.i=trunc(exp/((sf/100)*30))||"^M"
    else amount.i="^M"
    i=i+1
   end /* do */
  end /* if */

  else do
   if trunc(exp/((sf/100)*30))<holds.i then amount.i=trunc(exp/((sf/100)*30))||"^M"
   else amount.i="^M"
   i=i+1
  end /* do */

 end /* if */

 call _newline _ansi("bt;frd")
 do j=1 to i
  if sector.j\="" then call zocwriteln j||copies(" ",2-length(j))||"- #"||ship.j||copies(" ",3-length(ship.j))||"("||copies(" ",5-length(sector.j))||sector.j||")"
 end /* do */

 if i>1 then ynq="learn mode:  add a ship?"

end /* do */

imax=i-1
if imax<2 then call _error "you need at least 2 ships."
numships=imax

/* CHECK EXPERIENCE MODE */
if trunc(exp/((sf/100)*30))<maxholds then do
 expcheck=1
 call zocnotify "using low experience mode (slower)."
end /* if */

if watch then do
 call _onlineinit
 if zocwait("Command [")=640 then call _error "timeout"
end /* if */

parse value _getinfo("sect;turns") with currentsector ";" turns
do j=1 to imax
 if sector.j=currentsector then i=j
end /* do */

if i=laststeal then i=i+1
if i>imax then i=1

if sector.i=currentsector then do
 call zocsend sline.i||amount.i
 turns=turns-2 /* 1 sell 1 steal */
end /* if */
else do
 if fed.laststeal then call zocsend "x^M"||xline.i||sline.i||amount.i
 else call zocsend "x"||xline.i||sline.i||amount.i
 turns=turns-3 /* 1 xport 1 sell 1 steal */
end /* else */

/* MAIN LOOP */
blist=""
done=0
do while \done

 ans=zocwaitmux(" Success!", " Busted!", "There aren't that many holds", "(Y/N/Single step/Express)")
 select

  /* SUCCESS */
  when ans=0 then do

   parse value _lastline() with temp " Success!"
   if temp=="You start your droids loading the cargo and" then do

    /* CHECK EXPERIENCE */
    if expcheck then do
     if zocwait("and you receive ")=640 then call _error "timeout"
     if zocwait("experience point(s).")=640 then call _error "timeout"
     exp=exp+_stripint(_lastline())
     if trunc(exp/((sf/100)*30))>=maxholds then do
      expcheck=0
      call zocnotify "switching to high experience mode (faster)."
     end /* if */
    end /* if */

    /* CHANGE SHIP QUEUE */
    current=i
    i=i+1
    if i>imax then i=1
    do while busted.i & i\=current
     i=i+1
     if i>imax then i=1
     if i=current then done=1
    end /* do */

    if watch then if \_watchcontinue("Command [") then call _quit "script cancelled by user."

    /* FIGURE OUT HOW MANY HOLDS TO STEAL NEXT SHIP */
    if turns//20<2 & turns<100 & turns >0 then done=\_yesno("contine? (turns="||turns||")")
    if \done then do
     if expcheck then amount.i=min(trunc(exp/((sf/100)*30)),holds.i)||"^M"
     else amount.i="^M"
     if fed.current then call zocsend "x^M"||xline.i||sline.i||amount.i
     else call zocsend "x"||xline.i||sline.i||amount.i
     turns=turns-3 /* 1 sell 1 steal 1 xport */
    end /* if */

   end /* if */

  end /* when */

  /* BUST */
  when ans=1 then do

   parse value _lastline() with temp " Busted!"
   if temp=="You start your droids loading the cargo and Suddenly you're" then do

    /* UPDATE BUST LIST */
    if blist="" then blist=sector.i
    else blist=blist||" "||sector.i

    /* CHECK EXPERIENCE */
    if expcheck then do
     if zocwait("and you LOSE ")=640 then call _error "timeout"
     if zocwait("experience point(s).")=640 then call _error "timeout"
     exp=exp-_stripint(_lastline())
    end /* if */
    else do
     if zocwait("Command [")=640 then call _error "timeout"
     parse value _getinfo("exp;turns") with exp ";" turns
     if zocwait("Command [")=640 then call _error "timeout"
     if trunc(exp/((sf/100)*30))<maxholds then do
      expcheck=1
      call zocnotify "switching to low experience mode (slower)."
     end /* if */
    end /* else */

    /* SEND SS MSG */
    call _commsg "r", "busted in ship #"||ship.i||" ("||sector.i%100||"**) "||turns||" turns left"

    /* UPDATE BUST LIST */
    call _bustadd lpath||bname||"_bust.txt"||";"||clearfreq||";"||extern, sector.i
    busted.i=1
    current=i
    i=i+1
    if i>imax then i=1
    do while busted.i & i\=current
     i=i+1
     if i>imax then i=1
     if i=current then done=1
    end /* do */
    numships=numships-1
    if numships=1 then done=1

    /* FIGURE OUT HOW MANY HOLDS TO STEAL NEXT SHIP */
    if turns//20<2 & turns<100 & turns >0 then done=_yesno("contine? (turns="||turns||")")
    if \done then do
     if expcheck then amount.i=min(trunc(exp/((sf/100)*30)),holds.i)||"^M"
     else amount.i="^M"
     if fed.current then call zocsend "x^M"||xline.i||sline.i||amount.i
     else call zocsend "x"||xline.i||sline.i||amount.i
     turns=turns-3 /* 1 sell 1 steal 1 xport */
    end /* if */

   end /* if */

  end /* when */

  when ans=2 then do
   call zocsend "o31^Mqpr^Ms3"||amount.i
   turns=turns-1 /* 1 failed steal */
  end /* when */

  when ans=3 then do
   call zocsend "n"
   done=1
  end /* when */

  when ans=640 then call _error "timeout"

 end /* select */

end /* do */

call zocsend "@"
if zocwait("Average Interval Lag:")=640 then call _error "timeout"
if zocwait("Command [")=640 then call _error "timeout"

call _quit "busted in "||blist

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _halt v.2 **/
    _halt: procedure expose (globals)
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /* do */
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /* if */
    exit

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /* select */
     end /* do */
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"
    
     if arg(1,"E") then fname=arg(1)
     else fname=base
    
     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /* if */
       end /* do */
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /* else */
     end /* do */
    
     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"
    
     rslt=spath||";"||fname||";"||game
    return rslt

/** _ini_askint v.5 **/
    _ini_askint: procedure expose (globals)
     if \arg(1,"E") then msg="enter an integer"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askint"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if _stripint(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=_stripint(default)
      when rslt="##EOF##"                     then rslt=_askint(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then rslt=_stripint(rslt)
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwriteln right(fname,min(length(fname),17))||" - "||key||"="||rslt||" >"
       rslt=_stripint(rslt)
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _ini_asknum v.5 **/
    _ini_asknum: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_asknum"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if _stripnum(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=_stripnum(default)
      when rslt="##EOF##"                     then rslt=_asknum(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then rslt=_stripnum(rslt)
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwriteln right(fname,min(length(fname),17))||" - "||key||"="||rslt||" >"
       rslt=_stripnum(rslt)
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user."
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user."
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _get_log_info v.2 **/
    _get_log_info: procedure expose (globals)
     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_info"
     rslt=lpath||";"||ldefault
    return rslt

/** _xportlearn v.6 **/
    _xportlearn: procedure expose (globals)
     msg=arg(1)
     typelist=strip(arg(2))
     mode=arg(3)
     flag=0
     if mode="all" then flag=1
    
     buff=_xlgetbuff("x")
     buff=substr(buff,pos("------",buff))
     buff=substr(buff,pos(d2c(13),buff)+1)
    
     rslt=""
     num.=""
     sec.=""
     name.=""
     figs.=""
     shields.=""
     hops.=""
     type.=""
     i=1
     done=0
     cr=pos(d2c(13),buff)
     do while \done
      if cr=0 then do
       line=buff
       done=1
      end /* if */
      else do
       line=left(buff,cr-1)
       buff=substr(buff,cr+1)
      end /* else */
    
      parse value strip(line) with num.i sec.i temp
      num.i=_stripint(num.i)
      sec.i=_stripint(sec.i)
    
      select
       when num.i\="" & sec.i\="" then do
        name.i=strip(left(temp,16))
        parse value strip(substr(temp,21)) with figs.i shields.i hops.i type.i
        if _instr("T",figs.i) then figs.i=_stripint(figs.i)*1000
        else figs.i=_stripint(figs.i)
        if _instr("T",shields.i) then shields.i=_stripint(shields.i)*1000
        else shields.i=_stripint(shields.i)
        hops.i=_stripint(hops.i)
        i=i+1
       end /* when */
       when line="[Pause]" then if flag then rslt=rslt||"^M"
       when strip(line)="--<  Available Ship Scan  >--" then flag=1
       otherwise nop
      end /* select */
      cr=pos(d2c(13),buff)
     end /* do */
    
     i=i-1
    
     list=""
     call zocwriteln _ansi("bt;fgr")
     do j=1 to i
      if typelist="" | _listinstr(typelist, type.j) then do
       call zocwriteln j||copies(" ",2-length(j))||"- #"||num.j||copies(" ",3-length(num.j))||" ("||copies(" ",5-length(sec.j))||sec.j||") - "||type.j||"- "||hops.j||" hops ["||name.j||"]"
       if list="" then list="["||j||"] #"||num.j||copies(" ",2*(3-length(num.j)))||"in "||sec.j||copies(" ",2*(4-length(sec.j)))||" - "||name.j
       else list=list||";"||"["||j||"] #"||num.j||copies(" ",2*(3-length(num.j)))||"in "||sec.j||copies(" ",2*(4-length(sec.j)))||" - "||name.j
      end /* if */
     end /* do */
    
     ans=_drequestlist(msg,list,";","c")
     parse var ans "[" k "]" .
     call zocwriteln _ansi("bt;frd")||k||copies(" ",2-length(k))||"- #"||num.k||copies(" ",3-length(num.k))||" ("||copies(" ",5-length(sec.k))||sec.k||") - "||type.k||"- "||hops.k||" hops ["||name.k||"]"
    
     buff=_xlgetbuff(num.k||"^M")
     rslt=rslt||num.k||"^M"
    
     done=0
     cr=pos(d2c(13),buff)
     do while \done
      if cr=0 then do
       line=buff
       done=1
      end /* if */
      else do
       line=left(buff,cr-1)
       buff=substr(buff,cr+1)
      end /* else */
      select
       when line="[Pause]" then rslt=rslt||"^M"
       otherwise nop
      end /* select */
      cr=pos(d2c(13),buff)
     end /* do */
    
     call zocsend "q"
     if zocwait("Command [")=640 then call _error "timeout"
     rslt=rslt||"q;"||sec.k||";"||num.k
     if mode="all" then rslt="x"||rslt
    
    return rslt
    
    _xlgetbuff: procedure expose (globals)
     call zocreceivebuf 16*1024
     call zocsend arg(1)
     ans=1
     do while ans>0
      ans=zocwaitmux("<Q> Exit Transporter","[Pause]")
      select
       when ans=0 then nop
       when ans=1 then call zocsend "^M"
       when ans=640 then call _error "timeout"
       otherwise nop
      end /* select */
     end /* do */
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
    return buff

/** _lastline v.2 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     if lower(arg(1))="raw" then nop
                            else rslt=translate(rslt,"   ",d2c(0)||d2c(7)||d2c(10))
    return rslt

/** _bustcheck v.3 **/
    _bustcheck: procedure expose (globals)
     info=arg(1)
     sector=arg(2)
    
     if sector="" then rslt=0
     else do
    
      parse var info name ";" clearfreq ";" extern
     
      if name="" then call _error "no bust filename."
      if clearfreq="" then clearfreq=1
      clearfreq=(clearfreq-1)*24*60 /* convert to minutes */
      if extern="" then extern=0
      extern=extern*60              /* convert to minutes */
     
      day=date("D")
      ts1=time("M")
      if ts1>=extern then lastextern=ts1-extern
      else lastextern=24*60-extern+ts1
     
      if _fileopenr(name) then do
       eof=_fileeof(name)
       rslt=0
       do while \eof & \rslt
        line=linein(name)
        parse var line sector2 ";" day2 ";" ts2 ";" stamp
        if sector2=sector then do
         tsdiff=(day-day2)*60*24 + ts1-ts2
         if tsdiff>(lastextern+clearfreq) then rslt=0
         else rslt=1
        end /* if */
        eof=_fileeof(name)
       end /* do */
       call _fileclose name
      end /* if */
      else rslt=0
    
     end /* else */
    
    return rslt

/** _getinfo v.5 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=3*1024
     call zocreceivebuf bufflen
     call zocsend "/"
     if zocwait("Sect ")=640 then call _error "timeout"
     if zocwait("Ship ")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=space(translate(buff, "  ;;", d2c(0)||d2c(10)||d2c(13)||d2c(179)),1)
     buff=translate(space(translate(buff,", "," ,"),0),", "," ,")
    
     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /* if */
     end /* do */
    
     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /* if */
      end /* do */
      if \found then rslt=rslt||";"||"##NA##"
     end /* do */
     if rslt\="" then rslt=substr(rslt,2)
    
    return rslt

/** _jetisson v.1 **/
    _jetisson: procedure expose (globals)
     call zocsend "jy"
     if zocwait("Command [")=640 then call _error "timeout"
     rslt=1
    return rslt

/** _portpeeksteal v.2 **/
    _portpeeksteal: procedure expose (globals)
     call zocsend "pr^Ms"
    
     if zocwait("-------^M")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"
     line.1=_lastline()
     if zocwait("^M")=640 then call _error "timeout"
     line.2=_lastline()
     if zocwait("^M")=640 then call _error "timeout"
     line.3=_lastline()
     if zocwait("(Q=Quit) ?")=640 then call _error "timeout"
     call zocsend "q"
     if zocwait("Command [")=640 then call _error "timeout"
     rslt=""
    
     parse var line.1 "Fuel Ore" bs qq dd .
     qq=_stripint(qq)
     dd=_stripint(dd)
     if bs="Buying" then type="B"
     else type="S"
     rslt=rslt||";"||qq||","||dd
    
     parse var line.2 "Organics" bs qq dd .
     qq=_stripint(qq)
     dd=_stripint(dd)
     if bs="Buying" then type=type||"B"
     else type=type||"S"
     rslt=rslt||";"||qq||","||dd
    
     parse var line.3 "Equipment" bs qq dd .
     qq=_stripint(qq)
     dd=_stripint(dd)
     if bs="Buying" then type=type||"B"
     else type=type||"S"
     rslt=type||rslt||";"||qq||","||dd
    
    return rslt

/** _upgradeport v.2 **/
    _upgradeport: procedure expose (globals)
     call zocsend "o"||arg(1)||arg(2)||"^Mq"
     if zocwait("Command [")=640 then call _error "timeout"
     rslt=1
    return rslt

/** _portsteal v.3 **/
    _portsteal: procedure expose (globals)
     prod=arg(1)
     max=arg(2)
    
     msg="##OK##"
     exp=0
     amount=0
     avail=0
     holds=0
     turns=0
    
     if prod="" then call _error "specify product to steal [1,2,3]"
     if \_in(prod,"123") then call _error "specify product to steal [1,2,3]"
     if max="" then call _error "specify # holds to steal"
     if max<=0 then call _error "specify # holds to steal"
    
     select
      when prod=1 then prodn="Fuel Ore "
      when prod=2 then prodn="Organics "
      when prod=3 then prodn="Equipment"
     end /* select */
    
     call zocsend "pr"
    
     prans=zocwaitmux("One turn deducted, ", "[Pause]")
     select
      when prans=0 then do
       if zocwait(" turns left.")=640 then call _error "timeout"
       turns=_stripint(_lastline())
      end /* when */
      when prans=1 then turns=10000
      when prans=640 then call _error "timeout"
      otherwise nop
     end /* select */
    
     call zocsend "^Ms"
     fake=zocwaitmux(prodn, "Suddenly you're Busted!")
     if prod=3 then prodn="Equipment "
     select
      when fake=0 then do
    
       if zocwait("^M")=640 then call _error "timeout"
       avail=_stripint(substr(_lastline(),17,8))
    
       call zocsend prod
       if zocwait(prodn||"to swipe? [")=640 then call _error "timeout"
       if zocwait("]")=640 then call _error "timeout"
       holds=_stripint(_lastline())
    
       amount=min(holds, max, avail)
       call zocsend amount||"^M"
    
       ans=zocwaitmux("Success!", "Busted!", "There aren't that many holds")
       select
        when ans=0 then do
         if zocwait("and you receive ")=640 then call _error "timeout"
         if zocwait("experience point(s).")=640 then call _error "timeout"
         exp=_stripint(_lastline())
        end /* when */
        when ans=1 then do
         if zocwait("and you LOSE ")=640 then call _error "timeout"
         if zocwait("experience point(s).")=640 then call _error "timeout"
         exp=_stripint(_lastline())
         amount=0
         msg="##BUSTED##"
        end /* when */
        when ans=2 then msg="##HOLDS##"
        when ans=640 then call _error "timeout"
       end /* select */
    
      end /* when */
    
      when fake=1 then do
       if zocwait("and you LOSE ")=640 then call _error "timeout"
       if zocwait("experience point(s).")=640 then call _error "timeout"
       exp=_stripint(_lastline())
       msg="##FAKE##"
      end /* when */
    
      when fake=640 then call _error "timeout"
    
      otherwise nop
    
     end /* select */
    
     if zocwait("Command [")=640 then call _error "timeout"
     rslt=msg||";"||exp||";"||amount||";"||avail||";"||holds||";"||turns
    
    return rslt

/** _onlineinit v.2 **/
    _onlineinit: procedure expose (globals)
     _olist1.=""
     _olist1.0=0
     call _onlineget
    return

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _watchcontinue v.2 **/
    _watchcontinue: procedure expose (globals)
     pmpt=arg(1)
     if pmpt="" then pmpt="Command ["
     cont=1
     call _onlineget
     if zocwait(pmpt)=640 then call _error "timeout"
     if _onlinereport() then do
      call _beep "alert.wav"
      cont=_yesno("online status changed - continue?")
     end /* if */
    return cont

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _commsg v.4 **/
    _commsg: procedure expose (globals)
     select
      when lower(arg(1))="f" then do
       ch="`"
       wlong="Federation comm-link terminated."
       wshort="Message sent on Federation comm-link."
      end /* when */
      when lower(arg(1))="r" then do
       ch="'"
       wlong="Sub-space comm-link terminated"
       wshort="Message sent on sub-space channel"
      end /* when */
      otherwise call _error "missing message mode flag."
     end /* select */
     if arg(2)\="" then do
      if arg(3)="" then do
       call zocsend ch||"REV-SCRIPT:  "||arg(2)||"^M"
       if zocwait(wshort)=640 then call _error "timeout"
      end /* do */
      else do
       i=2
       call zocsend ch||"^MREV-SCRIPT:  "
       do while arg(i)\=""
        call zocsend arg(i)||"^M"
        i=i+1
       end /* do */
       call zocsend "^M"
       if zocwait(wlong)=640 then call _error "timeout"
      end /* else */
     end /* if */
    return

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /* if */
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=arg(2)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /* if */
      end /* do */
      call _fileclose fname
     end /* do */
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.2 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|",arg(3)))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user."
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /* select */
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /* do */
    
     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
    
     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /* when */
        otherwise nop
       end /* select */
      end /* do */
      call _fileclose fname 
      if \found then v="##EOF##"
     end /* if */
     else v="##EOF##"
    
    return v

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789."," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if _dwords(rslt,".")>2 then rslt=_dword(rslt,1,".")||"."||space(translate(substr(rslt,pos(".",rslt)+1)," ","."),0)
     if \datatype(rslt,"N") then rslt=""
    return rslt

/** _asknum v.4 **/
    _asknum: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an number:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripnum(rslt)\=rslt | rslt=""
      default=rslt||" [please enter a number or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _listinstr v.2 **/
    _listinstr: procedure expose (globals)
     list=arg(1)
     listr=arg(2)
     if listr="" then rslt=1
     mode=arg(3)
     if mode\="cs" then do
      list=lower(list)
      listr=lower(listr)
     end /* if */
     rslt=0
     if listr="" then rslt=1
     else do
      do i=1 to _dwords(list,";")
       if pos(_dword(list,i,";"), listr)>0 then do
        rslt=1
        leave
       end /* if */
      end /* do */
     end /* else */
    return rslt

/** _fileopenr v.3 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /* if */
     else rslt=0
    return rslt

/** _fileeof v.3 **/
    _fileeof: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileeof"
     if stream(arg(1), "S")="READY" then rslt=0
     else rslt=1
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _in v.3 **/
    _in: procedure expose (globals)
     if arg(1,"E") & arg(2,"E") & length(arg(1))>0 & verify(arg(1),arg(2),"N")=0 then rslt=1
     else rslt=0
    return rslt

/** _onlineget v.6 **/
    _onlineget: procedure expose (globals)
    
     call zocwaitforseq 1
     call zocreceivebuf 5*1024
     flag=0
     buff=""
    
    /* if arg(1)\="manual" then do
        call zocsend "#"
        if zocwait("  Who's Playing  ")=640 then call _error "timeout1"
       end */
    
     call zocsend "#"
     if zocwait("  Who's Playing  ")=640 then call _error "timeout"
     do while buff=""
      if zocwait("^M")=640 then call _error "timeout"
      if strip(_lastline())="" then do
       if flag then buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
      end /* if */
      else flag=1
     end /* do */
     call zocwaitforseq 0
    
     _olist2.=""
     do i=1 to _olist1.0
      _olist2.i=_olist1.i
     end /* do */
     _olist2.0=_olist1.0
     _olist1.=""
     _olist1.0=0
    
     k=max(pos("Who's Playing",buff),1)
     i=pos("36m",buff,k)+3
     j=0
     k=0
     if i>3 then do
      j=pos(d2c(27)||"[0;34m",buff,i)
      k=pos(d2c(13),buff,i)
      if k=0 then k=length(buff)
     end /* if */
    
     c=0
     do while i>3 & j>0
    
      name=substr(buff,i,j-i)
      corp=strip(translate(_stripansi(substr(buff,j,k-j)),"  ","[]"))
      if corp="" then corp=0
      c=c+1
      _olist1.c=translate(name,"_",";")||";"||corp
    
      i=pos("36m",buff,k)+3
      if i>3 then do
       j=pos(d2c(27)||"[0;34m",buff,i)
       k=pos(d2c(13),buff,i)
       if k=0 then k=length(buff)
      end /* if */
    
     end /* do */
     _olist1.0=c
    
    return

/** _onlinereport v.3 **/
    _onlinereport: procedure expose (globals)
    
     msg.=""
     if verbose=0 then msg.1=""
     else msg.1="REV-SCRIPT:  online update^M"
     newtag="IN"
     gonetag="OUT"
    
     do i=1 to _olist1.0
      found=0
      do j=1 to _olist2.0
       if _dword(_olist1.i,1,";")=_dword(_olist2.j,1,";") then do
        found=1
        leave
       end /* if */
      end /* do */
      if \found then msg.2=msg.2||" "||newtag||": "||_dword(_olist1.i,1,";")||"^M"
     end /* do */
    
     do i=1 to _olist2.0
      found=0
      do j=1 to _olist1.0
       if _dword(_olist2.i,1,";")=_dword(_olist1.j,1,";") then do
        found=1
        leave
       end /* if */
      end /* do */
      if \found then msg.3=msg.3||" "||gonetag||": "||_dword(_olist2.i,1,";")||"^M"
     end /* do */
    
     rslt=1
     select
      when msg.2="" & msg.3="" then rslt=0
      when msg.2\="" & msg.3\="" then call zocsend "'^M"||msg.1||msg.2||msg.3||"^M"
      when msg.3="" then call zocsend "'^M"||msg.1||msg.2||"^M"
      when msg.2="" then call zocsend "'^M"||msg.1||msg.3||"^M"
      otherwise rslt=0
     end /* select */
    
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt

/** _stripansi v.4 **/
    _stripansi: procedure expose (globals)
     if arg(1,"E") then line=arg(1)
     else call _error "missing parameter in _stripansi"
     line=_striplf(line)
     esc=d2c(27)
     incode=0
     caret=0
     rslt=""
     i=1
     do while i<=length(line)
      ch=substr(line,i,1)
      select
       when \caret & ch="^" then caret=1
       when ch=esc | (caret & ch="[") then do
        incode=1
        caret=0
       end /*when*/
       when incode & \caret & verify(ch,"[1234567890;") then incode=0
       when incode then nop
       otherwise do
        if caret then rslt=rslt||"^"||ch
        else rslt=rslt||ch
        caret=0
       end /*otherwise*/
      end /*select*/
      i=i+1
     end /*do*/
    return rslt

/** _striplf v.4 **/
    _striplf: procedure expose (globals)
     if arg(1,"E") then line=arg(1)
     else call _error "missing argument in _striplf"
     line=zocstring("REMOVE",line,d2c(10))
     line=zocstring("REMOVE",line,"^j")
     line=zocstring("REMOVE",line,"^J")
    return line
