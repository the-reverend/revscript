/* REXX _keepalive.zrx by the reverend (build 63)                             */
/*-       built by rev-builder version 1.0 on 20 May 2002 at 12:11:03        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-            http://thereverend.coastgames.com/rev-license.html            -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */
/* rev. 1 - slight modification                                               */

call zoctimeout 59
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

autoresponse=1
armessage.1="im not around, ICQ me at 83250263."
armessage.2="  available commands:  SHUTUP"
armessage.1=zocask("message?", armessage.1)
if armessage="##CANCEL##" then call _quit "script cancelled by user"

ct=-1
done=0
do while \done

 if zocwait("^M")=640 then call zocsend "#"
 else do

  line=_lastline()

  /* check for menu activity */
  if left(line, 15)="Sub-space radio" then call _waitcommand
  if left(line, 20)="Federation comm-link" then call _waitcommand
  if right(line, 13)="(?=Help)? : P" then call _waitcommand
  if right(line, 13)="(?=Help)? : M" then call _waitcommand
  if right(line, 13)="(?=Help)? : L" then call _waitcommand
  if right(line, 13)="(?=Help)? : S" then call _waitcommand
  if right(line, 13)="(?=Help)? : R" then call _waitcommand
  if right(line, 13)="(?=Help)? : W" then call _waitcommand
  if right(line, 13)="(?=Help)? : N" then call _waitcommand
  if right(line, 13)="(?=Help)? : C" then call _waitcommand
  if right(line, 13)="(?=Help)? : X" then call _waitcommand
  if right(line, 13)="(?=Help)? : T" then call _waitcommand
  if right(line, 13)="(?=Help)? : U" then call _waitcommand
  if right(line, 13)="(?=Help)? : J" then call _waitcommand
  if right(line, 13)="(?=Help)? : B" then call _waitcommand
  if right(line, 13)="(?=Help)? : Z" then call _waitcommand
  if right(line, 13)="(?=Help)? : A" then call _waitcommand
  if right(line, 13)="(?=Help)? : E" then call _waitcommand
  if right(line, 13)="(?=Help)? : F" then call _waitcommand
  if right(line, 13)="(?=Help)? : H" then call _waitcommand
  if right(line, 13)="(?=Help)? : K" then call _waitcommand
  if right(line, 13)="(?=Help)? : O" then call _waitcommand
  if right(line, 13)="(?=Help)? : Y" then call _waitcommand

  /* tw autoresponse */
  if left(line,18)="INACTIVITY WARNING" then call zocsend "#"

  /* corpie response */
  if left(line,2)="R " then do

   /* corpie commands */
   if substr(line,10,6)="SHUTUP" then ct=time("R")

   /* auto-response to corpies */
   if ct>-1 then ct=time("E")
   if (((ct=-1) | (ct>120)) & autoresponse) then
    call _commsg "r", armessage.1, armessage.2

  end /* if */

  if left(line,6)="<Quit>" then do
   call zocsend "n"
   done=1
   if zocwait("Command [")=640 then call _error "timeout"
  end /* if */

 end /* if */

end /* do while */

call _quit

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _halt v.2 **/
    _halt: procedure expose (globals)
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _lastline v.2 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     if lower(arg(1))="raw" then nop
                            else rslt=translate(rslt,"   ",d2c(0)||d2c(7)||d2c(10))
    return rslt

/** _waitcommand v.5 **/
    _waitcommand: procedure expose (globals)
     if arg(1)="" then line="Command ["
     else line=arg(1)
     done=0
     do while \done
      if zocwait(line)=640 then do
       call zocnotify "<< Script will resume at the '"||line||"' prompt. >>"
       call _beep "alert.wav"
      end /* if */
      else done=1
     end /* do */
    return

/** _commsg v.4 **/
    _commsg: procedure expose (globals)
     select
      when lower(arg(1))="f" then do
       ch="`"
       wlong="Federation comm-link terminated."
       wshort="Message sent on Federation comm-link."
      end /* when */
      when lower(arg(1))="r" then do
       ch="'"
       wlong="Sub-space comm-link terminated"
       wshort="Message sent on sub-space channel"
      end /* when */
      otherwise call _error "missing message mode flag."
     end /* select */
     if arg(2)\="" then do
      if arg(3)="" then do
       call zocsend ch||"REV-SCRIPT:  "||arg(2)||"^M"
       if zocwait(wshort)=640 then call _error "timeout"
      end /* do */
      else do
       i=2
       call zocsend ch||"^MREV-SCRIPT:  "
       do while arg(i)\=""
        call zocsend arg(i)||"^M"
        i=i+1
       end /* do */
       call zocsend "^M"
       if zocwait(wlong)=640 then call _error "timeout"
      end /* else */
     end /* if */
    return

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /* if */
    exit

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /* select */
     end /* do */
     rslt="^[["||rslt||"m"
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt
