/* REXX _connect.zrx by the reverend (build 64)                               */
/*-       built by rev-builder version 1.2 on 19 Feb 2003 at 23:34:25        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ---------------------*/ _g.!sname="_connect.zrx" /*--------------------- -*/
/*- --------------*/ _g.!sbuild=64; _g.!sdate="2003-02-19" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0  - initial release                                                  */

call zoctimeout 60
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

parse value arg(1) with arg.1 arg.2 arg.3 arg.4 arg.5 arg.6 .

scriptname=""
do i=1 to 6
 if arg.i\="" then do
  parse var arg.i aname "=" aval
  select
   when aname="sn" then scriptname=translate(aval," ",";")
   when aname="gn" then call _setgame aval
   otherwise nop
  end /*select*/
 end /*if*/
end /*do*/

call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
parse value _get_log_info() with lpath ";" ldefault
parse value zocgetglobaloption("DownloadAltPath") with . '="' destfolder '"'
loginmacro=_ini_askstr("loginmacro?", "", iname, game, "login_macro")
gamepwd=_ini_askstr("game password?", "", iname, game, "game_pwd")
cname=_ini_askstr("cim name?", "cim", iname, game, "cim")
bname=lpath||cname||"_bust.txt"
lname=lpath||cname||"_log.txt"
if scriptname="" then hide=_yesno("hide if at dock or terra?","c")
                 else hide=1

call _domacro loginmacro

ans=0
do while ans=0
 ans=zocwaitmux("[Pause]", ,
                "Enter your choice:")
 select
  when ans=0 then call zocsend "^M"
  when ans=1 then do
   call zoctimeout 60
   call _login gamepwd, cname, bname, iname, game, lname, hide
   call zoctimeout 15
  end /*when*/
  when ans=640 then call _error "timeout"
  otherwise nop
 end /*select*/
end /*do*/

if scriptname\="" then call zocdostring "^RUN="||scriptname

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.3 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. (globals)

     _verbose=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals reconnect scriptname lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _setgame v.5 **/
    _setgame: procedure expose (globals)
     if arg(1,"E") then game=arg(1)
     else do
      game=arg(1)
      spath=_get_script_path()
      fname=spath||"script.ini"
      list=_ini_getheadings(fname)
      do i=_dwords(list,";") to 1 by -1 /* remove * flagged entries */
       if left(_dword(list,i,";"),1)="*" then list=_ddelword(list,i,1,";")
      end /*do*/
      if list="##EOF##" then game=""
      else game=_drequestlist("select a game:", list||";CLEAR", ";", "c")
     end /*if*/
     if game="CLEAR" | game="" then game="%ZOCORHOST% %OPTIONS%"
     call zocsetglobaloption 'WindowTitle="'||game||'"'
    return

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"

     if arg(1,"E") then fname=arg(1)
     else fname=base

     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /*if*/
       end /*do*/
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /*else*/
     end /*do*/

     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"

     rslt=spath||";"||fname||";"||game
    return rslt

/** _get_log_info v.2 **/
    _get_log_info: procedure expose (globals)
     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_info"
     rslt=lpath||";"||ldefault
    return rslt

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user.", "nocopy"
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user.", "nocopy"
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _domacro v.4 **/
    _domacro: procedure expose (globals)
     list=arg(1)
     n=_dwords(list,"}")
     a=""
     mux=0
     rslt=0
     leav=0
     do i=1 to n
      parse value _dword(list,i,"}") with c "{" s
      if c="s" then do
       s=_dword(s,mux+1,"|")
       if pos("_x",s)>0 then do
        s=zocstring("REMOVE",s,"_x")
        rslt=1
       end /*if*/
       if pos("_c",s)>0 then do
        s=zocstring("REMOVE",s,"_c")
        leav=1
       end /*if*/
      end /*if*/
      c=strip(lower(c))
      select
       when c="s" & a\="" then do
        call zocconnect a
        do while \_isonline(15)
         call zocdisconnect
         call zocconnect a
        end /*do*/
        call zocsend s
        mux=0
        a=""
       end /*when*/
       when c="s" then do
        call zocsend s
        mux=0
       end /*when*/
       when c="w" & a\="" then do
        call zocconnect a
        do while zocwait(s)=640
         call zocdisconnect
         call zocconnect a
        end /*do*/
        a=""
       end /*when*/
       when c="w" then if zocwait(s)=640 then call _error "timeout"
       when c="m" then do
        mux=zocwaitmux(s)
        if mux=640 then call _error "timeout"
       end /*when*/
       when c="b" then call zocbeep s
       when c="d" then call zocdisconnect
       when c="l" | c="c" then a=s
       when c="r" & s="" then nop
       when c="r" then do
        if _fileexists(s) then do; call zocdostring "^RUN="||s; exit; end
       end /*when*/
       otherwise nop
      end /*select*/
      if rslt then leave
      if leav then leave
     end /*do*/
    return rslt

/** _login v.3 **/
    _login: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") | \arg(3,"E") | \arg(4,"E") | \arg(5,"E") | \arg(6,"E") then call _error "missing parameter in _login"
     gamepwd=arg(1)
     cname=arg(2)
     bname=arg(3)
     iname=arg(4)
     gname=arg(5)
     lname=arg(6)
     if \arg(7,"E") then hide=1
     else hide=arg(7)
     if \arg(8,"E") then ignorelist=""
     else ignorelist=arg(8)
     call _rseed

     call zoclogging 0, 1
     call zoclogname cname||"_log_^3^2^1_^8.txt"
     call zocsetoption 'CaptDefaultName="'||cname||'_log_^3^2^1_^8.txt"'
     call zoclogging 1, 1

     call zocsend "t^M"

     mode=0 /* 0=initial 1=logs 2=returning 3=new */
     newname=""
     done=0
     pset=0
     pflag=1
     lg_i=0
     do while \done

      select
       when mode=0 then ans=zocwaitmux("[Pause]",,
                                       "Show today's log? (Y/N) [N]",,
                                       "Include time/date stamp? (Y/N) [N]",,
                                       "       Hello ",,
                                       "Password?",,
                                       "messages received since your last",,
                                       "new character",,
                                       "destroyed your ship today...")
       when mode=1 then ans=zocwaitmux("[Pause]",,
                                       "No messages received.",,
                                       "> ",,
                                       "::",,
                                       "/14:",,
                                       "/15:",,
                                       "entered sector.",,
                                       "Sub Space Ether Probe.",,
                                       "I.D. code.",,
                                       "disrupted all of your mines in ",,
                                       "Delete messages? (Y/N) [N]")
       when mode=2 then ans=zocwaitmux("[Pause]",,
                                       "Do you wish to clear some avoids? (Y/N) [N]",,
                                       "(?=Help)? :",,
                                       "Planet command (?=help) [D]",,
                                       "Option? (A,D,I",,
                                       "Class 9 (Special)",,
                                       "Sector  : 1 in",,
                                       "What do you want to name your ship? (30 letters)",,
                                       "Password?")
       when mode=3 then ans=zocwaitmux("[Pause]",,
                                       "Password?",,
                                       "Use (N)ew Name or (B)BS Name [B] ?",,
                                       "cannot use the name",,
                                       "That alias would look",,
                                       "name your ship?",,
                                       "name your home planet?",,
                                       "(?=Help)? :")
      end /*select*/

      select
       when mode=0 & ans=0 then call zocsend " "
       when mode=0 & ans=1 then call zocsend "n"
       when mode=0 & ans=2 then call zocsend "y"
       when mode=0 & ans=3 then do
        bbsname=_grabit(", welcome")
        bbsname=left(bbsname,pos(", welcome",bbsname)-1)
       end /*when*/
       when mode=0 & ans=4 then do
        if _ini_read(iname,gname,"game_pwd")="##EOF##" then do
         if \_ini_write(iname,gname,"game_pwd",gamepwd) then call _error "unable to write to "||iname
        end /*if*/
        call zocsend gamepwd||"^M"
       end /*when*/
       when mode=0 & ans=5 then mode=1
       when mode=0 & ans=6 then do
        call zocsend "y"
        mode=3
       end /*when*/
       when mode=0 & ans=7 then done=1

       when mode=1 & ans=0 then do
        call zocdelay 1
        select
         when _pcheck("[Pause] - [") & pflag then do
          call zocsend " "
          pflag=0
         end /*when*/
         when _pcheck("[Pause] - [") then nop
         when _pcheck("[Pause] - D") then do
          call zocsend "y"
          mode=2
         end /*when*/
         otherwise do
          call zocsend " "
          pflag=0
         end /*otherwise*/
        end /*select*/
       end /*when*/
       when mode=1 & ans=1 then mode=2
       when mode=1 & ans=2 & \pflag then pflag=1
       when mode=1 & ans=2 then nop
       when mode=1 & ans=3 then do
        line=_lastline()
        parse var line brand "-" typ " : " cmd . sect . stamp .
        if typ="CMD" & bname\=0 then call _bust_tool cmd, sect, stamp, bname, lg_name
       end /*when*/
       when mode=1 & ans<=5 then do
        line=_lastline()
        parse var line "Received from " lg_name " at " lg_hr ":" lg_mn ":" lg_sc lg_ampm " S.D. " lg_ds ":"
        if lg_ampm="PM" & lg_hr<12 then lg_hr=lg_hr+12
        lg_ts=lg_hr||":"||lg_mn||":"||lg_sc
        lg_stamp=lg_ds||", "||lg_ts
       end /*when*/
       when mode=1 & ans=6 then do /* entered sector. */
        line=_lastline()
        parse var line "Report Sector " lg_sect ": " lg_name " entered sector."
        lg_player=left(lg_name,lastpos("'s",lg_name)-1)
        lg_ship=substr(lg_name,lastpos("'s",lg_name)+3)
        lg_sect=_stripint(lg_sect)
        if lg_sect\="" then do
         lg_i=lg_i+1
         if _listinstr(ignorelist, lg_player) then lg_list.lg_i=_pad(lg_sect,5,"L")||": "||lg_stamp||" - ENTER IGNORE ("||_abbrv_words(lg_ship,3)||")"
                                              else lg_list.lg_i=_pad(lg_sect,5,"L")||": "||lg_stamp||" - ENTER "||lg_player||" ("||_abbrv_words(lg_ship,3)||")"
        end /*if*/
       end /*when*/
       when mode=1 & ans=7 then do /* probe */
        line=_lastline()
        parse var line . "sector " lg_sect .
        lg_sect=_stripint(lg_sect)
        pflag=1
       end /*when*/
       when mode=1 & ans=8 then do /* probe traced */
        line=_lastline()
        parse var line . "to " lg_player "'s I.D. code." .
        if lg_sect\="" & \_listinstr(ignorelist, lg_player) then do
         lg_i=lg_i+1
         lg_list.lg_i=_pad(lg_sect,5,"L")||": "||lg_stamp||" - PROBE "||lg_player
        end /*if*/
       end /*when*/
       when mode=1 & ans=9 then do
        line=_lastline()
        lg_sect=_stripint(_grabit("^M"))
        parse var line lg_player " disrupted all " .
        if lg_sect\="" & \_listinstr(ignorelist, lg_player) then do
         lg_i=lg_i+1
         lg_list.lg_i=_pad(lg_sect,5,"L")||": "||lg_stamp||" - DISRUPT "||lg_player
        end /*if*/
       end /*when*/
       when mode=1 & ans=10 then do
        call zocsend "y"
        mode=2
       end /*when*/

       when mode=2 & ans=0 then call zocsend " "
       when mode=2 & ans=1 then call zocsend "n"
       when mode=2 & ans=2 then do
        call zocsend "zn"
        done=1
       end /*when*/
       when mode=2 & ans=3 then do
        call zocsend "c"
        done=1
       end /*when*/
       when mode=2 & ans=4 then done=1
       when mode=2 & ans=5 then do
        if hide then do
         if _sendwait("  psgyg","<Galactic Bank>")=640 then call _error "timeout"
         done=1
        end /*if*/
       end /*when*/
       when mode=2 & ans=6 then do
        if hide then do
         if _sendwait("  l1^M","colonists ready")=640 then call _error "timeout"
         done=1
        end /*if*/
       end /*when*/
       when mode=2 & ans=7 then call zocsend "Merchant Marines^My"
       when mode=2 & ans=8 then do
        gamepwd=_askstr("what password for this game?",gamepwd,"c")
        if \_ini_write(iname,gname,"game_pwd",gamepwd) then call _error "unable to write to "||iname
        call zocsend gamepwd||"^M"
       end /*when*/

       when mode=3 & ans=0 then call zocsend " "
       when mode=3 & ans=1 & \pset then do
        gamepwd=_askstr("what password for this game?",gamepwd,"c")
        call zocsend gamepwd||"^M"
        if \_ini_write(iname,gname,"game_pwd",gamepwd) then call _error "unable to write to "||iname
        pset=1
       end /*when*/
       when mode=3 & ans=1 then call zocsend gamepwd||"^M"
       when mode=3 & ans=2 then do
        newname=_askstr("what name for this game?",bbsname,"c")
        if newname=bbsname then call zocsend "b"
        else call zocsend "n"||newname||"^M"
       end /*when*/
       when mode=3 & ans=3 then do
        newname=_askstr("what name for this game?",newname||random(1,100),"c")
        call zocsend newname||"^M"
       end /*when*/
       when mode=3 & ans=4 then call zocsend "y"
       when mode=3 & ans=5 then do
        if newname="" then newname=bbsname
        shipname=_askstr("what name for your ship?","Merchant Marines","c")
        call zocsend shipname||"^My"
       end /*when*/
       when mode=3 & ans=6 then do
        planetname=_askstr("what name for this planet?",newname||"'s home planet","c")
        call zocsend planetname||"^Mq"
       end /*when*/
       when mode=3 & ans=7 then do
        /* get stardock */
           sd=""
           call zocsend "v"
           ans2=zocwaitmux("The StarDock is located in sector","Photon Missile Wave duration")
           select
            when ans2=0 then sd=_stripint(_grabit("."))
            when ans2=1 then nop
            when ans2=640 then call _error "timeout"
            otherwise nop
           end /*select*/
        /* turn off animations */
           call zocsend "cn2qq"
        /* get server time */
           now=_getservertime("stamp")
        /* get ship catalog */
           call _set_ship_catalog
        /* write other settings to script.ini */
           call zocwrite _ansi("bt;fwh")||"writing settings."
           if \_ini_write(iname,gname,"player_name",newname) then call _error "unable to write to "||iname
           call zocwrite "."
           if \_ini_write(iname,gname,"sd",sd) then call _error "unable to write to "||iname
           call zocwrite "."
           if \_ini_write(iname,gname,"log_ignore","") then call _error "unable to write to "||iname
           call zocwrite "."
           if \_ini_write(iname,gname,"rylos","") then call _error "unable to write to "||iname
           call zocwrite "."
           if \_ini_write(iname,gname,"alpha","") then call _error "unable to write to "||iname
           call zocwrite "."
           if \_ini_write(iname,gname,"timediff",_g.!timediff) then call _error "unable to write to "||iname
           call zocwrite "."
        /* build ship catalog */
        /* setshortname */
        /* set other script.ini stuff */
        done=1
       end /*when*/
       when ans=640 then call _error "timeout"
       otherwise nop
      end /*select*/
     end /*do*/
     if _fileopenw(lname) then do
      do i=1 to lg_i
       call lineout lname, lg_list.i
      end /*do*/
      call _fileclose lname
     end /*if*/
    return

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=left(arg(2),1)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*do*/
     if list="" then list="##EOF##"
    return list

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _ddelword v.1 **/
    _ddelword: procedure expose (globals)
     if arg(3,"E") then rslt=translate(delword(translate(arg(1),arg(4)||" "," "||arg(4)),arg(2),arg(3))," "||arg(4),arg(4)||" ")
                   else rslt=translate(delword(translate(arg(1),arg(4)||" "," "||arg(4)),arg(2))," "||arg(4),arg(4)||" ")
    return rslt

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))

     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"

    return v

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _isonline v.3 **/
    _isonline: procedure expose (globals)
     if zocgetinfo("ONLINE")="##YES##" then return 1
     if arg(1,"E") then t=arg(1)
     else call _error "missing parameter in _isonline"
     rslt=0
     o="##NO##"
     call time "R"
     do while time("E")<=t & o\="##YES##"
      o=zocgetinfo("ONLINE")
      if o="##YES##" then rslt=1
     end /*do*/
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _rseed v.7 **/
    _rseed: procedure expose (globals)
     if arg(1,"E") then width=min(max(arg(1),2),86400)
     else width=1000
     parse value time("L") with r1 ":" r2 ":" r3 "." r4
     r4=strip(left(r4,5))
     seed=r4||copies(0,5-length(r4))
     rslt=random(0, 99999, seed)//width
    return rslt

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if zocwait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _ini_write v.3 **/
    /*_ v.3 tested -*/
    _ini_write: procedure expose (globals)
     /* argument check */
     do i=1 to 4
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_write."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
     v=strip(arg(4))

     tname=fname||".tmp"
     written=0

     rslt=0
     if _fileopenr(fname) then do
      if _fileexists(tname) then if \dosdel(tname) then call _error "file delete failed."
      if _fileopenw(tname) then do
       insection=0
       linenum=0
       do while \_fileeof(fname)
        line=strip(linein(fname))
        linenum=linenum+1
        select
         when line="["||s||"]" then do
          insection=1
          if linenum>1 then call lineout tname, ""
          call lineout tname, line
          call charout tname, k||"="||v
          written=1
         end /*when*/
         when insection & left(line,length(k)+1)=k||"=" then nop
         when insection & left(line,1)="[" then do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
          insection=0
         end /*when*/
         when line="" then do
          if linenum>1 then call lineout tname, ""
          call charout tname, ""
         end /*when*/
         otherwise do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
         end /*otherwise*/
        end /*select*/
       end /*do*/
       if \written then do
        if linenum>1 then call lineout tname, ""
        call lineout tname, "["||s||"]"
        call charout tname, k||"="||v
        written=1
       end /*if*/
       call _fileclose(tname)
      end /*if*/
      call _fileclose(fname)
     end /*if*/
     if written then do
      if \dosdel(fname) then call _error "file delete failed."
      if \dosrename(tname,fname) then call _error "file rename failed."
     end /*if*/
     else do
      if \_fileexists(fname) then do
       if _filenew(fname) then do
        call lineout fname, "["||s||"]"
        call charout fname, k||"="||v
        call _fileclose(fname)
        written=1
       end /*if*/
      end /*if*/
     end /*else*/
    return written

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _bust_tool v.1 **/
    _bust_tool: procedure expose (globals)
     cmd=arg(1)
     sector=arg(2)
     stamp=arg(3)
     fname=arg(4)
     note=arg(5)
     msg=cmd||" : "||_pad(sector,5,"R")||" : "||stamp
     if note\="" then msg=msg||" : "||note
     if _fileopenw(fname) then do
      call lineout fname, msg
      call _fileclose fname
     end /*if*/
     else call _error "unable to open file "||fname||"."
    return

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=_space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||_space(translate(rslt," ","-"),0)
     else rslt=_space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _listinstr v.3 **/
    _listinstr: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listinstr"
     abbrlist=arg(1)
     archetype=arg(2)
     if arg(3,"E") then mode=arg(3)
     else mode=""
     if arg(4,"E") then delim=left(arg(4),1)
     else delim=";"
     if mode\="cs" then do
      abbrlist=lower(abbrlist)
      archetype=lower(archetype)
     end /*if*/
     rslt=0
     if archetype="" then rslt=1
     else do
      do i=1 to _dwords(abbrlist,delim)
       if pos(_dword(abbrlist,i,delim), archetype)>0 then do
        rslt=1
        leave
       end /*if*/
      end /*do*/
     end /*else*/
    return rslt

/** _pad v.1 **/
    _pad: procedure expose (globals)
     rslt=arg(1)
     if arg(2,"E") then w=arg(2); else return rslt
     if \arg(3,"E") then m="L"; else m=arg(3)
     select
      when m="L" then rslt=left(rslt,w)
      when m="R" then rslt=reverse(left(reverse(rslt),w))
      when m="C" then rslt=center(rslt,w)
      otherwise       rslt=left(rslt,w)
     end /*select*/
    return rslt

/** _abbrv_words v.1 **/
    _abbrv_words: procedure expose (globals)
     rslt=""
     if \arg(2,"E") then len=4
     else len=arg(2)
     do i=1 to words(arg(1))
      w=word(arg(1),i)
      select
       when len<1 then nop
       when len=1 then rslt=rslt||" "||left(w,1)
       when len>2 then rslt=rslt||" "||left(w,1)||strip(left(_space(translate(substr(w,2),"          ","aeiouAEIOU"),0),len-1))
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(rslt)
    return rslt

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=zocwait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _getservertime v.7 **/
    _getservertime: procedure expose (globals)

     /* get real date/time values */
        parse value date("N") with . . year
        parse value date("O") with . "/" month "/" day
        sod=time("S")
        doy=date("D")
        base=date("B")
        parse value time("N") with hr ":" mn ":" sc
        leapyear=abs((year//4=0)-1)
        base=base-_baseday.2000
        base_sec=base*86400+sod

     /* get game date/time values */
        if _g.!timediff="_G.!TIMEDIFF" then do
         if _sendwait("ct","(?=Help)? T")=640 then call _error "timeout"
         if zocwaitmux(", "||year+11, ", "||year+12, ", "||year+13)=640 then call _error "timeout"
         line=_lastline()
         call zocsend "q"
         parse var line g_hr ":" g_min ":" g_sec g_ampm . g_month g_day ", " g_year .
         g_year=g_year-12
         if g_ampm="PM" & g_hr\=12 then g_hr=g_hr+12
         g_month=lower(g_month)
         do i=12 to 1 by -1
          if g_month=_dword(_monthnames,i,";") then leave
         end /*do*/
         g_month=i
         parse value _calc_base_date(g_year, g_month, g_day, g_hr, g_min, g_sec) with g_base ";" g_doy ";" g_sod ";" g_base_sec
         _g.!timediff=base_sec-g_base_sec
        end /*if*/
        else do
         g_base_sec=base_sec-_g.!timediff
         g_sod=g_base_sec//86400
         g_base=g_base_sec%86400
         do i=2000 to 2008
          if (_baseday.i-_baseday.2000)<=g_base then g_year=i
         end /*do*/
         g_doy=g_base-_baseday.g_year+_baseday.2000
        end /*else*/

     select
      when arg(1)="seconds"   then rslt=g_sod
      when arg(1)="minutes"   then rslt=g_sod%60
      when arg(1)="hours"     then rslt=g_sod%3600
      when arg(1)="stamp_old" then rslt=g_year-2000||copies("0",3-length(g_doy))||g_doy||copies("0",5-length(g_sod))||g_sod
      when arg(1)="stamp"     then rslt=g_base_sec
      otherwise                    rslt=g_base_sec
     end /*select*/
    return rslt

/** _set_ship_catalog v.1 **/
    _set_ship_catalog: procedure expose (globals)
     call _twmsg "OFF"
     call zocsend "cc"
     if zocwait("Which ship are you interested in (?=List) ?")=640 then call _error "timeout"

     /* setup ship array */
     nextpage=0
     ship.0=0
     i=1
     buflen=3*1024
     done=0
     do while \done

      /* read catalog page into buffer */
      call zocreceivebuf buflen
      if i=1 then call zocsend "?"
      else call zocsend "+"
      if zocwait("Which ship are you interested in (?=List) ?")=640 then call _error "timeout"
      buff=translate(zocreceivebuf(buflen),"  ",d2c(0)||d2c(10))
      if length(buff)=buflen then call _error "buffer overflow"

      /* parse ship catalog page */
      j=ship.0
      jj=1
      ii=pos("<",buff,jj)
      if ii>0 then jj=pos(d2c(13),buff,ii)
      do while ii>0 & jj>0
       parse value substr(buff,ii,jj-ii) with "<" letter "> " shipname
       select
        when i>1 & letter="A" & shipname=_dword(ship.1,3,";") then do
         done=1
         leave
        end /*when*/
        when shipname="Next Page" then nextpage=1
        when shipname="To Leave" then nop
        otherwise do
         j=j+1
         ship.j=i||";"||letter||";"||shipname
        end /*otherwise*/
       end /*select*/
       ii=pos("<",buff,jj)
       if ii>0 then jj=pos(d2c(13),buff,ii)
       else jj=0
      end /*do*/
      ship.0=j

      if \nextpage then done=1
      i=i+1

     end /*do*/

     currentpage=1
     do i=1 to ship.0

      mshlds=0
      mfigs=0
      mfigattack=0
      offodds=0
      defodds=0

      /* get ship description */
      parse var ship.i page ";" letter ";" shipname
      if page>currentpage then do
       currentpage=page
       call zocsend "+"
       if zocwait("Which ship are you interested in (?=List) ?")=640 then call _error "timeout"
       buff=translate(zocreceivebuf(buflen),"  ",d2c(0)||d2c(10))
       if length(buff)=buflen then call _error "buffer overflow"
      end /*if*/
      call zocsend letter
      if zocwait("Which ship are you interested in (?=List) ?")=640 then call _error "timeout"
      buff=translate(zocreceivebuf(buflen),"  ",d2c(0)||d2c(10))
      if length(buff)=buflen then call _error "buffer overflow"

      line.i=_parse_ship_desc(buff)

      /* parse ship description
      ii=pos("Maximum Shields:",buff)
      if ii>0 then jj=pos(d2c(13),buff,ii)
      else jj=0
      if ii>0 & jj>0 then parse value substr(buff,ii,jj-ii)with "Maximum Shields:" mshlds

      ii=pos("Max Fighters:",buff)
      if ii>0 then jj=pos("Offensive Odds:",buff,ii)
      else jj=0
      if ii>0 & jj>0 then parse value substr(buff,ii,jj-ii) with "Max Fighters:" mfigs
      if jj>0 then kk=pos(":1",buff,jj)
      else kk=0
      if jj>0 & kk>0 then parse value substr(buff,jj,kk-jj) with "Offensive Odds:" offodds

      ii=pos("Turns Per Warp:",buff)
      if ii>0 then jj=pos("Defensive Odds:",buff,ii)
      else jj=0
      if ii>0 & jj>0 then parse value substr(buff,ii,jj-ii) with "Turns Per Warp:" tpw
      if jj>0 then kk=pos(":1",buff,jj)
      else kk=0
      if jj>0 & kk>0 then parse value substr(buff,jj,kk-jj) with "Defensive Odds:" defodds

      ii=pos("Max Figs Per Attack:",buff)
      if ii>0 then jj=pos("TransWarp Drive:",buff,ii)
      else jj=0
      if ii>0 & jj>0 then parse value substr(buff,ii,jj-ii) with "Max Figs Per Attack:" mfigattack

      ii=pos("Maximum Holds:",buff)
      if ii>0 then jj=pos("Transport Range:",buff,ii)
      else jj=0
      if ii>0 & jj>0 then parse value substr(buff,ii,jj-ii) with "Maximum Holds:" mholds
      if jj>0 then kk=pos("Photon Missiles:",buff,jj)
      else kk=0
      if jj>0 & kk>0 then parse value substr(buff,jj,kk-jj) with "Transport Range:" range

      mshlds=_space(translate(mshlds," ",","),0)
      mfigs=_space(translate(mfigs," ",","),0)
      mfigattack=_space(translate(mfigattack," ",","),0)
      offodds=strip(offodds)
      defodds=strip(defodds)
      mholds=strip(mholds)
      range=strip(range)
      tpw=strip(tpw)
      line.i=mshlds||";"||mfigs||";"||mfigattack||";"||offodds||";"||defodds||";"||mholds||";"||range||";"||tpw
      */

     end /*do*/

     /* exit ship catalog */
     call zocsend "qq"
     if zocwaitmux("Command [","Citadel command")=640 then call _error "timeout"

     call _newline
     parse value _getgameinfo() with spath ";" iname ";" game
     call zocwrite _ansi("bt;fwh")||"writing ship catalog to "||iname||" ["||game||"] "

     do i=ship.0 to 1 by -1
      call zocwrite "."
      if \_ini_write(iname,game,"ship."||strip(left(_dword(ship.i,3,";"),23)),line.i) then call _error "unable to write to "||iname
     end /*do*/
     call zocwrite "."
     if \_ini_write(iname,game,"ship.key_long","shipbasecost;maxfigsperattack;maximumholds;initialholds;maxfighters;turnsperwarp;minemax;genesismax;transwarpdrive;transportrange;maximumshields;offensiveodds;defensiveodds;beaconmax;longrangescan;planetscanner;photonmissiles") then call _error "unable to write to "||iname
     if \_ini_write(iname,game,"ship.key","1bcst;2mfgpa;3mhlds;4ihlds;5mfg;6tpw;7mmine;8mgent;9tw;10trng;11mshlds;12offodds;13defodds;14mbeac;15lrs;16ps;17phot") then call _error "unable to write to "||iname

     call zocsend "|"
     if zocwaitmux("Command [","Citadel command")=640 then call _error "timeout"

    return

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenw"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN WRITE"
      call stream arg(1), "C", "SEEK <0"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=_filenew(arg(1))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     rslt=\lines(arg(1))
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _calc_base_date v.3 **/
    /* v.3 tested */
    _calc_base_date: procedure expose (globals)

     yr=arg(1); mm=arg(2); dd=arg(3); hr=arg(4); mn=arg(5); sc=arg(6)

     /* leapyear? */
        leapyear=abs((yr//4=0)-1)

     /* day of year */
        doy=dd-1
        do i=1 to mm-1
         doy=doy+_dword(_monthdays,i,";")
        end /*do*/
        if mm>2 & leapyear then doy=doy+1

     /* base day since 2000 */
        base=_baseday.yr-_baseday.2000+doy

     /* seconds of day */
        sod=((hr*60)+mn)*60+sc

     /* base day in seconds */
        base_sec=base*86400+sod

     rslt=base||";"||doy||";"||sod||";"||base_sec

    return rslt

/** _twmsg v.2 **/
    _twmsg: procedure expose (globals)
     if arg(1)="" then call _error "missing parameter."
     select
      when lower(arg(1))="on" then do
       msg1="Silencing"
       msg2="Displaying all messages"
      end /*when*/
      when lower(arg(1))="off" then do
       msg1="Displaying"
       msg2="Silencing all messages"
      end /*when*/
      otherwise call _error "invalid parameter."
     end /*select*/
     call zocrespond msg1, "|"
     call zocsend "|"
     if zocwait(msg2)=640 then call _error "timeout"
     call zocrespond msg1
    return

    /* _parse_ship_desc v.1 */
    _parse_ship_desc:  procedure expose (globals)
     buff=arg(1)
     rslt=""

     i=pos("Basic Hold Cost:",buff)
     j=pos(d2c(13),buff,i)
     line.1=strip(substr(buff,i,j-i))
     parse var line.1 ":" basicholdcost . ":" initialholds . ":" maximumshields .
     basicholdcost=_stripcomma(strip(basicholdcost))
     maximumshields=_stripcomma(strip(maximumshields))

     i=pos("Main Drive Cost:",buff,j+1)
     j=pos(d2c(13),buff,i)
     line.2=strip(substr(buff,i,j-i))
     parse var line.2 ":" maindrivecost . ":" maxfighters . ":" offensiveodds .
     maindrivecost=_stripcomma(strip(maindrivecost))
     maxfighters=_stripcomma(strip(maxfighters))
     offensiveodds=_dword(strip(offensiveodds),1,":")

     i=pos("Computer Cost:",buff,j+1)
     j=pos(d2c(13),buff,i)
     line.3=strip(substr(buff,i,j-i))
     parse var line.3 ":" computercost . ":" turnsperwarp . ":" defensiveodds .
     computercost=_stripcomma(strip(computercost))
     defensiveodds=_dword(strip(defensiveodds),1,":")

     i=pos("Ship Hull Cost:",buff,j+1)
     j=pos(d2c(13),buff,i)
     line.4=strip(substr(buff,i,j-i))
     parse var line.4 ":" shiphullcost . ":" minemax . ":" beaconmax .
     shiphullcost=_stripcomma(strip(shiphullcost))
     minemax=strip(minemax)
     beaconmax=strip(beaconmax)

     i=pos("Ship Base Cost:",buff,j+1)
     j=pos(d2c(13),buff,i)
     line.5=strip(substr(buff,i,j-i))
     parse var line.5 ":" shipbasecost . ":" genesismax . ":" longrangescan .
     shipbasecost=_stripcomma(strip(shipbasecost))
     genesismax=strip(genesismax)
     longrangescan=pos("Y",strip(longrangescan))

     i=pos("Max Figs Per Attack:",buff,j+1)
     j=pos(d2c(13),buff,i)
     line.6=strip(substr(buff,i,j-i))
     parse var line.6 ":" maxfigsperattack . ":" transwarpdrive . ":" planetscanner .
     maxfigsperattack=_stripcomma(strip(maxfigsperattack))
     transwarpdrive=pos("Y",strip(transwarpdrive))
     planetscanner=pos("Y",strip(planetscanner))

     i=pos("Maximum Holds:",buff,j+1)
     j=pos(d2c(13),buff,i)
     line.7=strip(substr(buff,i,j-i))
     parse var line.7 ":" maximumholds . ":" transportrange . ":" photonmissiles .
     maximumholds=strip(maximumholds)
     transportrange=strip(transportrange)
     photonmissiles=pos("Y",strip(photonmissiles))

     rslt=shipbasecost maxfigsperattack maximumholds initialholds maxfighters turnsperwarp minemax genesismax ,
          transwarpdrive transportrange maximumshields offensiveodds defensiveodds beaconmax longrangescan ,
          planetscanner photonmissiles
     rslt=translate(rslt,";"," ")

    return rslt

    /*

    Which ship are you interested in (?=List) ?
    You shut off the Vid Term.

    Computer command [TL=00:00:00]:[3156] (?=Help)? ;

                                  Corporate FlagShip

         Basic Hold Cost:   10,000   Initial Holds:     20 Maximum Shields: 1,500
         Main Drive Cost:    5,000    Max Fighters: 20,000  Offensive Odds: 1.2:1
           Computer Cost:  120,000  Turns Per Warp:      3  Defensive Odds: 1.2:1
          Ship Hull Cost:   28,500        Mine Max:    100      Beacon Max:   100
          Ship Base Cost:  163,500     Genesis Max:     10 Long Range Scan:   Yes
     Max Figs Per Attack:     6000 TransWarp Drive:    Yes  Planet Scanner:   Yes
           Maximum Holds:       85 Transport Range:     10 Photon Missiles:    No

    Computer command [TL=00:00:00]:[3156] (?=Help)?
    */

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt
