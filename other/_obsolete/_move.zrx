/* REXX _move.zrx by the reverend (build 98)                                  */
/*-       built by rev-builder version 1.2 on 19 Feb 2003 at 23:34:30        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ----------------------*/ _g.!sname="_move.zrx" /*----------------------- -*/
/*- --------------*/ _g.!sbuild=98; _g.!sdate="2003-02-19" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 30
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

if \_pcheck("Command [") then call _error "please start at the command prompt."

call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
cr=_ini_askint("cr?", 600, iname, game, "cr")
ns=_ini_askint("how many sectors in universe?", 5000, iname, game, "ns")
if ns<1 | ns>20000 then call _error "number out of range"

destination=_asknum("where to?",20)
if destination<1 | destination>ns then call _error "destination out of range"

/*
if _yesno("pay tolls?") then tolls="p"
else tolls=""
*/
tolls="p"

corp=_getinfo("corp")
if corp>0 then corp=_chooselist("corp or personal?", "corp;personal", ";", "c")
else corp="personal"

select
 when corp="corp" then do
  figs=_chooselist("figs?","none;fct1;fcd8;fco99",";","c")
  mines=_chooselist("mines?","none;mc1;mc5;mc10",";","c")
  limps=_chooselist("mines?","none;lc1;lc2;lc5",";","c")
 end /*when*/
 when corp="personal" then do
  figs=_chooselist("figs?","none;fpt1;fpd8;fpo99",";","c")
  mines=_chooselist("mines?","none;mp1;mp5;mp10",";","c")
  limps=_chooselist("mines?","none;lp1;lp2;lp5",";","c")
 end /*when*/
end /*select*/

actions=""
if figs\="none" then actions=actions||";"||figs
if mines\="none" then actions=actions||";"||mines
if limps\="none" then actions=actions||";"||limps
if actions\="" then actions=substr(actions,2)

if _move(destination,tolls,actions,cr) then call _beep "alert.wav"

call _quit

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.3 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. (globals)

     _verbose=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals reconnect scriptname lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"

     if arg(1,"E") then fname=arg(1)
     else fname=base

     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /*if*/
       end /*do*/
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /*else*/
     end /*do*/

     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"

     rslt=spath||";"||fname||";"||game
    return rslt

/** _ini_askint v.5 **/
    _ini_askint: procedure expose (globals)
     if \arg(1,"E") then msg="enter an integer"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askint"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if _stripint(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=_stripint(default)
      when rslt="##EOF##"                     then rslt=_askint(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then rslt=_stripint(rslt)
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwriteln right(fname,min(length(fname),17))||" - "||key||"="||rslt||" >"
       rslt=_stripint(rslt)
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _asknum v.4 **/
    _asknum: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an number:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripnum(rslt)\=rslt | rslt=""
      default=rslt||" [please enter a number or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _getinfo v.5 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=3*1024
     call zocreceivebuf bufflen
     call zocsend "/"
     if zocwait("Sect ")=640 then call _error "timeout"
     if zocwait("Ship ")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, "  ;;", d2c(0)||d2c(10)||d2c(13)||d2c(179)),1)
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/

     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _chooselist v.6 **/
    _chooselist: procedure expose (globals)
     prompt=arg(1)
     list=arg(2)
     if list="" then call _error "no list"
     delim=arg(3)
     if delim="" then delim=" "
     if length(delim)>1 then call _error "long delimiter"

     ch.=""
     i=_dwords(list,delim)
     do j=1 to i
      ch.j=_dword(list,j,delim)
     end /*do*/

     if i<7 then max=1
     if i<5 then max=0
     if i>=7 then max=(i-5)%2+1

     done=0
     loc=0
     do while \done
      if loc<0 then loc=0
      if loc>max then loc=max

      select
       when loc=0 then do
        if max=0 then rslt=zocrequest(prompt, ch.1, ch.2, ch.3, ch.4)
        else rslt=zocrequest(prompt, ch.1, ch.2, ch.3, "next")
       end /*when*/
       when loc=max then do
        p1=(loc-1)*2+4
        p2=p1+1
        p3=p1+2
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, ch.p3)
       end /*when*/
       otherwise do
        p1=(loc-1)*2+4
        p2=p1+1
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, "next")
       end /*otherwise*/
      end /*select*/

      select
       when rslt="next" then loc=loc+1
       when rslt="back" then loc=loc-1
       when rslt="##CANCEL##" then done=1
       when rslt="" then nop
       otherwise done=1
      end /*select*/

     end /*do*/

     if lower(arg(4))="c" & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"

    return rslt

/** _move v.2 **/
    _move: procedure expose (globals)
     sector=arg(1)
     figresp=lower(arg(2)) /* possible modes: par pr ar r parv prv arv rv*/
     figresp="p"           /* harwired to pay tolls */
     task=lower(arg(3))    /* possible modes: fct#,lc#,lp#,mc#,mp# etc. */
     cr=arg(4)

     list=_getmovepath(sector)
     if zocwait("Command [")=640 then call _error "timeout"

     parse var list . ";" list

     rslt=_movelist(list,figresp,task,cr)
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=left(arg(2),1)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*do*/
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=_space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||_space(translate(rslt," ","-"),0)
     else rslt=_space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))

     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"

    return v

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789."," "),0)
     rslt=_space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||_space(translate(rslt," ","-"),0)
     else rslt=_space(translate(rslt," ","-"),0)
     if _dwords(rslt,".")>2 then rslt=_dword(rslt,1,".")||"."||_space(translate(substr(rslt,pos(".",rslt)+1)," ","."),0)
     if \datatype(rslt,"N") then rslt=""
    return rslt

/** _getmovepath v.3 **/
    _getmovepath: procedure expose (globals)
     if arg(1)="" then call _error "no destination sector."

     if arg(2)="" then do
      gmp1=""
      gmp2=arg(1)
     end /*do*/
     else do
      gmp1=arg(1)
      gmp2=arg(2)
     end /*else*/

     call zocsend "^^f"||gmp1||"^M"||gmp2||"^Mq"
     if zocwait("TO >")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"

     done=0
     lin1.=""
     i=1
     do while \done
      if zocwait("^M")=640 then call _error "timeout"
      line.i=_lastline()
      if line.i="" then done=1
      else i=i+1
     end /*do*/

     if zocwait("ENDINTERROG")=640 then call _error "timeout"

     /* create semi-colon list of sectors in path */
     i=1
     l=line.1
     list=""
     do while l\=""
      parse var l sec ">" l
      if list="" then list=_stripint(sec)
      else list=list||";"||_stripint(sec)
      if l="" then do
       i=i+1
       l=line.i
      end /*if*/
     end /*do*/

    return list

/** _movelist v.2 **/
    _movelist: procedure expose (globals)
     list=arg(1)
     figresp=arg(2)
     tasks=arg(3)
     cr=arg(4)
     rslt=1
     holo=1

     do while list\=""
      parse var list sec ";" list

      fed=0
      figs=0
      unexpl=0
      done=0

      if cr="" then call zocend "m"||sec||"^M"
      else do
       if sec<cr then call zocsend sec||"^M"
       else call zocsend sec
      end /*else*/

      do while \done
       ans=zocwaitmux("Command [", ,
                        "Option? (A,D,I,R,P,?):?", ,
                        "Beacon  : FedSpace, FedLaw Enforced", ,
                        "Warps to Sector(s) :", ,
                        "Option? (A,D,I,R,?):?", ,
                        "(F)lee, (A)ttack, (S)urrender, (I)nfo ?", ,
                        "Avoid this sector in the future? (Y/N)", ,
                        "Fighters:")
       select
        when ans=0 then do
         done=1
         if zocwait("]:[")=640 then call _error "timeout"
         if zocwait("]")=640 then call _error "timeout"
         if _lastline()=sec||"]" then rslt=1
         else rslt=0
        end /*when*/
        when ans=1 then do
         select
          when _in(figresp,"p") then call zocsend "py"
         end /*select*/
        end /*when*/
        when ans=2 then fed=1
        when ans=3 then do
         if zocwait("^M")=640 then call _error "timeout"
         parse value _lastline() with . "(" unexpl
         if unexpl\="" then unexpl=1
         else unexpl=0
        end /*when*/
        when ans=4 then do
         call _beep "alert.wav"
         call zocnotify "manual assistance is needed."
        end /*when*/
        when ans=5 then do
         call _beep "alert.wav"
         call zocnotify "manual assistance is needed."
        end /*when*/
        when ans=6 then call zocsend "n"
        when ans=7 then figs=1
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*do*/

      if unexpl & holo then do
       call zocsend "s"
       ans=zocwaitmux("You don't have a long range scanner.", ,
                        "Select (H)olo Scan or (D)ensity Scan or (Q)uit?", ,
                        "Relative Density Scan")
       select
        when ans=0 then holo=0
        when ans=1 then call zocsend "h"
        when ans=2 then holo=0
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       if zocwait("Command [")=640 then call _error "timeout"
      end /*if*/

      tasklist=tasks
      do i=1 to _dwords(tasklist,";")
       task=_word(tasklist,i,";")
       select
        when left(task,3)="fct" & \fed & \figs then call _deployfigs substr(task, 4), "c", "t"
        when left(task,3)="fcd" & \fed & \figs then call _deployfigs substr(task, 4), "c", "d"
        when left(task,3)="fco" & \fed & \figs then call _deployfigs substr(task, 4), "c", "o"
        when left(task,3)="fpt" & \fed & \figs then call _deployfigs substr(task, 4), "p", "t"
        when left(task,3)="fpd" & \fed & \figs then call _deployfigs substr(task, 4), "p", "d"
        when left(task,3)="fpo" & \fed & \figs then call _deployfigs substr(task, 4), "p", "o"
        when left(task,1)="lc" & \fed then call _deploylimpet substr(task,3), "c"
        when left(task,1)="lp" & \fed then call _deploylimpet substr(task,3), "p"
        when left(task,1)="mc" & \fed then call _deployarmid substr(task,3), "c"
        when left(task,1)="mp" & \fed then call _deployarmid substr(task,3), "p"
        otherwise nop
       end /*select*/
      end /*do*/

     end /*do*/

    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     rslt=\lines(arg(1))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _in v.3 **/
    _in: procedure expose (globals)
     if arg(1,"E") & arg(2,"E") & length(arg(1))>0 & verify(arg(2),arg(1),"N")=0 then rslt=1
     else rslt=0
    return rslt

/** _deployfigs v.2 **/
    _deployfigs: procedure expose (globals)
     num=arg(1)
     corp=arg(2)
     type=arg(3)

     call zocsend "f"
     if zocwait("leaving ")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"
     leav=_stripint(_lastline())

     if num<leav then num=leav
     call zocsend num||"^M"
     ans=zocwaitmux("(C)orporate fighters", "(D)efensive")
     select
      when ans=0 then call zocsend corp||type
      when ans=1 then call zocsend type
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/

     ans=zocwaitmux("in close support.", ,
                      "You don't have that many fighters available.")
     select
      when ans=0 then do
       parse value _lastline() with "Done. You have " rslt .
       rslt=_stripint(rslt)
      end /*when*/
      when ans=1 then rslt=0
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
     if zocwait("Command [")=640 then call _error "timeout"

    return rslt

/** _deploylimpet v.2 **/
    _deploylimpet: procedure expose (globals)
     call zocsend "h2"||arg(1)||"^M"
     ans=zocwaitmux("Command [", "(C)orporate mines or (P)ersonal mines?")
     select
      when ans=0 then nop
      when ans=1 then do
       call zocsend arg(2)
       if zocwait("Command [")=640 then call _error "timeout"
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
    return

/** _deployarmid v.2 **/
    _deployarmid: procedure expose (globals)
     call zocsend "h1"||arg(1)||"^M"
     ans=zocwaitmux("Command [", "(C)orporate mines or (P)ersonal mines?")
     select
      when ans=0 then nop
      when ans=1 then do
       call zocsend arg(2)
       if zocwait("Command [")=640 then call _error "timeout"
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
    return

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt
