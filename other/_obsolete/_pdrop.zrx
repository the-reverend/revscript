/* REXX _pdrop.zrx by the reverend (build 99)                                 */
/*-       built by rev-builder version 1.2 on 19 Feb 2003 at 23:34:31        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ----------------------*/ _g.!sname="_pdrop.zrx" /*---------------------- -*/
/*- --------------*/ _g.!sbuild=99; _g.!sdate="2003-02-19" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 60
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

if _synchronize()\="command" then call _error "please start at the command prompt."

/* GET INFORMATION FROM USER OR INI FILE */
call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
targetlist.1=_ini_askstr("##DEFAULT##", "", iname, game, "target")
targetlist.2=_ini_askstr("##DEFAULT##", "", iname, game, "ignore")

targetlist.1=zocask("enter a list of players to TARGET separated by semi-colons",targetlist.1)
if targetlist.1="##CANCEL##" then call _quit "script cancelled by user."
resetlist.1=targetlist.1

targetlist.2=zocask("enter a list of players to IGNORE separated by semi-colons",targetlist.2)
if targetlist.2="##CANCEL##" then call _quit "script cancelled by user."
resetlist.2=targetlist.2

autoattack=_yesno("auto attack?")
if autoattack then do
 call zocsend "qd"
 if zocwait(" in sector")=640 then call _error "timeout"
 parse value _lastline() with "Planet #" planet " in sector" .
 call zocsend "m^M^M^Mc"
 if zocwait("Citadel command")=640 then call _error "timeout"
 call zocsend "c;"
 if zocwait("TransWarp Drive:")=640 then call _error "timeout"
 parse value _lastline() with . "Max Figs Per Attack:" figs "TransWarp Drive:"
 figs=_stripint(figs)
 call zocsend "q"
 if zocwait("Citadel command")=640 then call _error "timeout"
end /*if*/

call _onlineinit

call zocwrite _ansi("bt;frd")||"<< pdrop script running >> "||_ansi("fmg")
done=0
do while \done
 ans=zocwaitmux("Deployed Fighters Report Sector ", ,
                "Limpet mine in ", ,
                "You leave the citadel", ,
                "Citadel command (?=help)", ,
                "Computer command", ,
                "Sub-space radio", ,
                "Federation comm-link", ,
                "  Who's Playing  ", ,
                "INACTIVITY WARNING", ,
                "STATUS")
 select

  when ans=0 then do
   parse value _lastline() with temp "Deployed Fighters Report Sector "
   if temp=="" | temp==d2c(0) then do
    ans2=zocwaitmux("sector.", "is attacking!", "retreated.")
    select
     when ans2=0 then do
      parse value _lastline() with sector ": " player " entered sector."
      player=strip(player)
      sector=_stripint(sector)
      if sector\="" then done=_kill(sector, player)
     end /*when*/
     when ans2=1 then nop
     when ans2=2 then nop
     when ans2=640 then call _error "timeout"
    end /*select*/
   end /*if*/
  end /*when*/

  when ans=1 then do
   parse value _lastline() with temp "Limpet mine in "
   if temp=="" | temp==d2c(0) then do
    if zocwait(" activated")=640 then call _error "timeout"
    parse value _lastline() with sector " activated" .
    sector=_stripint(sector)
    if sector\="" then done=_kill(sector, "unknown player")
   end /*if*/
  end /*when*/

  when ans=2 then done=1
  when ans=3 then call zocwrite _ansi("bt;frd")||"<< pdrop script running >> "||_ansi("fmg")
  when ans=4 then call _waitcommand "Citadel command (?=help)"
  when ans=5 then call _waitcommand "Citadel command (?=help)"
  when ans=6 then call _waitcommand "Citadel command (?=help)"
  when ans=7 then do
   call _onlineget "manual"
   if _onlinereport() then call _beep "alert.wav"
  end /*when*/
  when ans=8 then do
   call _onlineget
   if _onlinereport() then call _beep "alert.wav"
  end /*when*/
  when ans=9 then call zocsend "'REV-SCRIPT: _pdrop running...^M"
  when ans=640 then do
   call _onlineget
   if _onlinereport() then call _beep "alert.wav"
  end /*when*/

 end /*select*/
end /*do*/

do while autoattack & ans<2
 call zocsend "qqayay"||figs||"^Ml"||planet||"^Mm^M^M^Mcs"
 if zocwait("Citadel command")=640 then call _error "timeout"
 autoattack=_yesno("attack again?")
end /*if*/

call _quit

exit

_kill:
 ksector=arg(1)
 kplayer=arg(2)
 ksuccess=0

 if (targetlist.1="" | _listinstr(targetlist.1, kplayer)) & (kplayer="" | \_listinstr(targetlist.2, kplayer)) then do
  call zocsend "p"||ksector||"^My"
  if zocwait("<Planetary TransWarp Drive>")=640 then call _error "timeout"
  kans=zocwaitmux("Citadel command (?=help)", "Blind Jump")
  select
   when kans=0 then do
    ksuccess=1
    if _verbose then call zocsend "'REV-SCRIPT: pdrop executed at "||sector||"^M"
    if zocwait("Citadel command (?=help)")=640 then call _error "timeout"
    call zocwrite _ansi("bt;frd")||"<< pdrop executed at "||ksector||". >> "||_ansi("fmg")
   end /*when*/
   when kans=1 then do
    if zocwait("Citadel command (?=help)")=640 then call _error "timeout"
    if _verbose then call zocsend "'^MREV-SCRIPT: pdrop failed at "||sector||"^M  "||player||" got away.^M^M"
    if zocwait("Citadel command (?=help)")=640 then call _error "timeout"
    call zocwrite _ansi("bt;frd")||"<< pdrop failed at "||ksector||". >> "||_ansi("fmg")
   end /*when*/
   when kans=640 then call _error "timeout"
  end /*select*/
 end /*if*/
return ksuccess

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.3 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. (globals)

     _verbose=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals reconnect scriptname lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"

     if arg(1,"E") then fname=arg(1)
     else fname=base

     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /*if*/
       end /*do*/
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /*else*/
     end /*do*/

     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"

     rslt=spath||";"||fname||";"||game
    return rslt

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user.", "nocopy"
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user.", "nocopy"
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=_space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||_space(translate(rslt," ","-"),0)
     else rslt=_space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _onlineinit v.2 **/
    _onlineinit: procedure expose (globals)
     _olist1.=""
     _olist1.0=0
     call _onlineget
    return

/** _waitcommand v.5 **/
    _waitcommand: procedure expose (globals)
     if arg(1)="" then line="Command ["
     else line=arg(1)
     done=0
     do while \done
      if zocwait(line)=640 then do
       call zocnotify "<< Script will resume at the '"||line||"' prompt. >>"
       call _beep "alert.wav"
      end /*if*/
      else done=1
     end /*do*/
    return

/** _onlineget v.7 **/
    _onlineget: procedure expose (globals)

     if _g.RED.0="_G.RED.0" then call _load_rank_names

     bufsize=5*1024
     call zocreceivebuf bufsize
     blanklines=0

     if _sendwait("#","  Who's Playin")=640 then call _error "timeout"
     do while blanklines<2
      if zocwaitmux("e","a","^M")=640 then call _error "timeout"
      line=strip(_lastline())
      if line="" then blanklines=blanklines+1
     end /*do*/
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)=bufsize then call _error "buffer overflow in _onlineget"

     _olist2.=""
     do i=1 to _olist1.0
      _olist2.i=_olist1.i
     end /*do*/
     _olist2.0=_olist1.0
     _olist1.=""
     _olist1.0=0

     i=max(pos("Who's Playing",buff),1)
     i=pos(d2c(13),buff,i)+1
     c=0
     do while i>1
      j=pos(d2c(13),buff,i)
      if j>0 then line=strip(substr(buff,i,j-i))
      i=j+1
      if line\="" then do
       c=c+1
       line.c=line
      end /*if*/
     end /*do*/

     do i=1 to c

      /* split rank and name */
      do j=1 to 23
       k=word(_g.BLUE.0,j)
       if left(line.i,length(_g.BLUE.k))=_g.BLUE.k then leave
      end /*do*/
      if j<24 then do
       rank.i=k-1
       name.i=substr(line.i,length(_g.BLUE.k)+2)
      end /*if*/
      else do
       do j=1 to 22
        k=word(_g.RED.0,j)
        if left(line.i,length(_g.RED.k))=_g.RED.k then leave
       end /*do*/
       if j<23 then do
        rank.i=-k
        name.i=substr(line.i,length(_g.RED.k)+2)
       end /*if*/
       else k=0
      end /*else*/

      /* split name and corp */
      parse value reverse(name.i) with temp1 "]" num "[" temp2
      corp.i=0
      if num="" then ,
       if _stripint(num)=num & temp1="" & strip(temp2)\="" then do
        corp.i=reverse(num)
        name.i=reverse(substr(reverse(name.i),4+length(num)))
       end /*if*/

      _olist1.i=name.i||";"||corp.i||";"||rank.i

     end /*do*/
     _olist1.0=c

    return

/** _onlinereport v.3 **/
    _onlinereport: procedure expose (globals)

     msg.=""
     if _verbose then msg.1="REV-SCRIPT:  online update^M"
                 else msg.1=""
     newtag="IN"
     gonetag="OUT"

     do i=1 to _olist1.0
      found=0
      do j=1 to _olist2.0
       if _dword(_olist1.i,1,";")=_dword(_olist2.j,1,";") then do
        found=1
        leave
       end /*if*/
      end /*do*/
      if \found then msg.2=msg.2||" "||newtag||": "||_dword(_olist1.i,1,";")||"^M"
     end /*do*/

     do i=1 to _olist2.0
      found=0
      do j=1 to _olist1.0
       if _dword(_olist2.i,1,";")=_dword(_olist1.j,1,";") then do
        found=1
        leave
       end /*if*/
      end /*do*/
      if \found then msg.3=msg.3||" "||gonetag||": "||_dword(_olist2.i,1,";")||"^M"
     end /*do*/

     rslt=1
     select
      when msg.2="" & msg.3="" then rslt=0
      when msg.2\="" & msg.3\="" then call zocsend "'^M"||msg.1||msg.2||msg.3||"^M"
      when msg.3="" then call zocsend "'^M"||msg.1||msg.2||"^M"
      when msg.2="" then call zocsend "'^M"||msg.1||msg.3||"^M"
      otherwise rslt=0
     end /*select*/

    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _listinstr v.3 **/
    _listinstr: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listinstr"
     abbrlist=arg(1)
     archetype=arg(2)
     if arg(3,"E") then mode=arg(3)
     else mode=""
     if arg(4,"E") then delim=left(arg(4),1)
     else delim=";"
     if mode\="cs" then do
      abbrlist=lower(abbrlist)
      archetype=lower(archetype)
     end /*if*/
     rslt=0
     if archetype="" then rslt=1
     else do
      do i=1 to _dwords(abbrlist,delim)
       if pos(_dword(abbrlist,i,delim), archetype)>0 then do
        rslt=1
        leave
       end /*if*/
      end /*do*/
     end /*else*/
    return rslt

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=left(arg(2),1)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*do*/
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))

     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"

    return v

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _load_rank_names v.1 **/
    _load_rank_names: procedure expose (globals)
     _g.RED.0="12 10 7 8 9 11 22 13 1 2 3 15 4 5 6 14 21 17 18 19 20 16"
     _g.RED.1="Nuisance 3rd Class"
     _g.RED.2="Nuisance 2nd Class"
     _g.RED.3="Nuisance 1st Class"
     _g.RED.4="Menace 3rd Class"
     _g.RED.5="Menace 2nd Class"
     _g.RED.6="Menace 1st Class"
     _g.RED.7="Smuggler 3rd Class"
     _g.RED.8="Smuggler 2nd Class"
     _g.RED.9="Smuggler 1st Class"
     _g.RED.10="Smuggler Savant"
     _g.RED.11="Robber"
     _g.RED.12="Terrorist"
     _g.RED.13="Pirate"
     _g.RED.14="Infamous Pirate"
     _g.RED.15="Notorious Pirate"
     _g.RED.16="Dread Pirate"
     _g.RED.17="Galactic Scourge"
     _g.RED.18="Enemy of the State"
     _g.RED.19="Enemy of the People"
     _g.RED.20="Enemy of Humankind"
     _g.RED.21="Heinous Overlord"
     _g.RED.22="Prime Evil"

     _g.BLUE.0="11 21 7 10 6 20 3 2 14 16 15 4 8 23 13 5 19 17 1 12 18 22 9"
     _g.BLUE.1="Civilian"
     _g.BLUE.2="Private"            /* match 2 */
     _g.BLUE.3="Private 1st Class"  /* match 1 */
     _g.BLUE.4="Lance Corporal"
     _g.BLUE.5="Corporal"
     _g.BLUE.6="Sergeant"           /* match 9 */
     _g.BLUE.7="Staff Sergeant"
     _g.BLUE.8="Gunnery Sergeant"
     _g.BLUE.9="1st Sergeant"
     _g.BLUE.10="Sergeant Major"     /* match 5 */
     _g.BLUE.11="Warrant Officer"
     _g.BLUE.12="Chief Warrant Officer"
     _g.BLUE.13="Ensign"
     _g.BLUE.14="Lieutenant J.G."      /* match 14 */
     _g.BLUE.15="Lieutenant"           /* match 13,15 */
     _g.BLUE.16="Lieutenant Commander" /* match 14 */
     _g.BLUE.17="Commander"
     _g.BLUE.18="Captain"
     _g.BLUE.19="Commodore"
     _g.BLUE.20="Rear Admiral"
     _g.BLUE.21="Vice Admiral"
     _g.BLUE.22="Admiral"
     _g.BLUE.23="Fleet Admiral"
    return

    /*
    Nuisance 3rd Class
    Nuisance 2nd Class
    Nuisance 1st Class
    Menace 3rd Class
    Menace 2nd Class
    Menace 1st Class
    Smuggler 3rd Class
    Smuggler 2nd Class
    Smuggler 1st Class
    Smuggler Savant
    Robber
    Terrorist
    Pirate
    Infamous Pirate
    Notorious Pirate
    Dread Pirate
    Galactic Scourge
    Enemy of the State
    Enemy of the People
    Enemy of Humankind
    Heinous Overlord
    Prime Evil

    Private
    Private 1st Class
    Lance Corporal
    Corporal
    Sergeant
    Staff Sergeant
    Gunnery Sergeant
    1st Sergeant
    Sergeant Major
    Warrant Officer
    Chief Warrant Officer
    Ensign
    Lieutenant J.G.
    Lieutenant
    Lieutenant Commander
    Commander
    Captain
    Commodore
    Rear Admiral
    Vice Admiral
    Admiral
    Fleet Admiral
    */

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=zocwait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     rslt=\lines(arg(1))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt
