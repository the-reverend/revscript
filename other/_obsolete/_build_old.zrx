/* REXX _build_old.zrx by the reverend (build 69)                             */
/*-       built by rev-builder version 1.0 on 26 Apr 2002 at 20:13:42        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-            http://thereverend.coastgames.com/rev-license.html            -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

globals=_setglobals()
call on halt name _halt

libpath="script\_library\"
license=libpath||"rev-license.txt"
if \_fileexists(license) then call _quit "missing license definition."

sname=zocgetfilename("choose script to update:", "script\*.*")
do while sname\="##CANCEL##"

 buildname=_dword(sname,_dwords(sname,"\"),"\")
/* buildname=_dword(buildname,1,".") */

 if \_fileexists(sname) then call _error sname||" does not exist."
 if \_fileopenr(sname) then call _error "unable to open "||sname

 uname=sname||".tmp"

 call zocwriteln _ansi("bt;fwh")
 call zocwriteln "updating: "||sname
 call zocwriteln "tempfile: "||uname

 if _fileexists(uname) then call dosdel uname
 if \_filenew(uname) then call _error "unable to create "||uname

 library=0
 liblist.=""
 libcount=0
 do while \_fileeof(sname)

  line=linein(sname)

  select

   when left(line,7)="/* REXX" & \library then do
    bpos=pos("(build",line)+7
    if bpos=7 then build=0
    else build=substr(line,bpos,pos(")",line,bpos)-bpos)+1
    line="/* REXX "||buildname||" by the reverend (build "||build||") "
    line=line||copies(" ",78-length(line))||"*/"
    call lineout uname, line
    if \_fileopenr(license) then call _error "unable to open "||license
    do while \_fileeof(license)
     line=linein(license)
     call lineout uname,line
    end /* do */
    call _fileclose(license)
   end /* when */

   when left(line,5)="/*** " then do
    header="/*** THE REVEREND'S TW LIBRARY FOR ZOC/REXX ***/"
    subhead="/*"||center("last updated: "||date("N")||", "||time("N"),44," ")||"*/"
    call lineout uname, header
    call lineout uname, subhead
    call lineout uname, ""
    library=1
   end /* when */

   when left(line,4)="/** " & library then do
    parse var line . lib version .
    lib=libpath||lib||".zrl"
    if \_fileexists(lib) then do
     call _fileclose(sname)
     call _fileclose(uname)
     call _error "library not found: "||lib
    end /* if */
    else do
     flag=1
     do i=1 to libcount
      if liblist.i=lib then flag=0
     end /* do */
     if flag then do
      libcount=libcount+1
      liblist.libcount=lib
      call zocwriteln "library: "||lib
     end /* if */
    end /* else */
   end /* when */

   when left(line,3)="/*-" then nop

   when \library then do
    if strip(line)="" then call lineout uname, ""
    else call lineout uname, line
   end /* when */

   otherwise nop

  end /* select */

 end /* do */

 /* read library list for more headers */
 j=1
 do while liblist.j\=""
  lib1=liblist.j
  if \_fileopenr(lib1) then call _error "library not found: "||lib1
  done=0
  do while \done
   if _fileeof(lib1) then done=1
   else do 
    line=linein(lib1)
    if left(line,4)="/** " then do
     parse var line . lib2 version .
     lib2=libpath||lib2||".zrl"
     if \_fileexists(lib2) then do
      call _fileclose(sname)
      call _fileclose(uname)
      call dosdel uname
      call _error "library not found: "||lib2||" in "||lib1
     end /* if */
     else do
      flag=1
      do i=1 to libcount
       if liblist.i=lib2 then flag=0
      end /* do */
      if flag then do
       libcount=libcount+1
       liblist.libcount=lib2
       call zocwriteln "library: "||lib2
      end /* if */
     end /* else */
    end /* if */
   end /* else */
  end /* do */
  call _fileclose lib1
  j=j+1
 end /* do */

 /* sort library list */
 do i=1 to libcount
  temp=liblist.i
  do j=i to libcount
   if liblist.j<temp then do
    temp=liblist.j
    liblist.j=liblist.i
    liblist.i=temp
   end /* if */
  end /* do */
 end /* do */

 /* write library list */
 do i=1 to libcount
  lib=liblist.i
  if \_fileopenr(lib) then call _error "library not found: "||lib
  done=0
  flag=1
  do while \_fileeof(lib)
   line=linein(lib)
   select
    when left(line,4)="/** " & flag then do
     call lineout uname, line
     flag=0
    end /* when */
    when left(line,4)="/** " then nop
    when left(line,3)="/*-" then nop
    when line="" then call lineout uname, ""
    otherwise call lineout uname, "    "||line
   end /* select */
  end /* do */
  call _fileclose lib
  call lineout uname, ""
 end /* do */

 call _fileclose sname
 call _fileclose uname

 if \library then do
  call dosdel uname
  call _error "missing library header in source script."
 end /* if */

 if \_fileopenr(uname) then call _error "unable to open "||uname
 call dosdel sname
 if \_filenew(sname) then call _error "unable to create "||sname

 done=0
 do while \done
  if _fileeof(uname) then done=1
  else do
   line=linein(uname)
   if \_fileeof(uname) then call lineout sname, line
  end /* else */
 end /* do */

 call _fileclose sname
 call _fileclose uname
 call dosdel uname

 sname=zocgetfilename("choose script to update:", "script\*.zrx")
end /* do */ 

call _quit

exit


/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.1 **/
    _setglobals: procedure expose (globals)
     rslt=space("_g. _s. _p. _d. _v. _f. _m. _q. _path. _dist. _dtomsl. _dfrmsl. _bg. _nwi. _od. _sv. _pv. _bust. _olist1. _olist2. _clvlist1. _clvlist2. globals verbose reconnect scriptname "||arg(1))
    return rslt

/** _halt v.2 **/
    _halt: procedure expose (globals)
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 do /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _dword v.2 **/
    _dword: procedure expose (globals)
    /* _dword(string, index, delimiter) */
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
    /* _dwords(string, delimiter) */
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _error v.6 **/
    _error: procedure expose (globals)
     if arg(1)="" then msg="<< script error. >>"
     else msg="<< script error:  "||arg(1)||" >>"
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwriteln "^[[1;31m"||msg
     call zocwriteln "^[[1;33m"||"<< if this is a serious problem, email me at: the.reverend@coastgames.com >> "
     call zocwriteln "<< ZOC "||zocgetinfo("VERSION")||", OS "||zocgetinfo("OSYS")||", LOC "||zocgetinfo("CONNECTEDTO")||" >>"
     if arg(2)\="" then call zocwriteln arg(2)
     call zocwrite "^[[0m"
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln "<< ATTEMPTING TO RECONNECT >>"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
      exit
     end /* if */
     exit
    return

/** _fileopenr v.3 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /* if */
     else rslt=0
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /* select */
     end /* do */
     rslt="^[["||rslt||"m"
    return rslt

/** _filenew v.3 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt

/** _fileeof v.3 **/
    _fileeof: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileeof"
     if stream(arg(1), "S")="READY" then rslt=0
     else rslt=1
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _beep v.2 **/
    _beep: procedure expose (globals)
     fname=arg(1)
     if fname\="" then if \_fileexists(fname) then fname=""
     if fname="" then call zocwrite d2c(7)
     else call zocplaysound fname
    return
