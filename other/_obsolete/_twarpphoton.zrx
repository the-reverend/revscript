/* REXX _twarpphoton.zrx by the reverend (build 84)                           */
/*-       built by rev-builder version 1.1 on 19 Sep 2002 at 17:20:18        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */
/* rev. 1 - new map format                                                    */

call zoctimeout 60
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

/* CHECK PROMPT AND ASK QUESTIONS */
cp=_pcheck("Command [")

/* GET INFORMATION FROM USER OR INI FILE */
call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
cr=_ini_askint("cr?", 600, iname, game, "cr")
ns=_ini_askint("how many sectors in universe?", 5000, iname, game, "ns")
if ns<1 | ns>20000 then call _error "number out of range"
fname=_ini_askstr("enter cim filename (no extension):", "cim", iname, game, "cim")
parse value _get_log_info() with lpath ";" ldefault
fname=lpath||fname||".map"
figname=lpath||fname||"_figs.txt"
if \_fileexists(fname) then call _error "file not found: "||fname

/* WARNING */
call _warning

/* ASK FIGS */
figmode=""
if _fileexists(figname) then do
 if _yesno("use offline fig data?") then figmode="file"
end /*if*/
if \cp & figmode="" then call _error "please start at the command prompt."

/* TARGET/IGNORE */
targetlist.1="hekate;illusion;<-- Adomma -->"
targetlist.1=zocask("enter a list of players to TARGET separated by semi-colons",targetlist.1)
if targetlist.1="##CANCEL##" then call _quit "script cancelled by user."
resetlist.1=targetlist.1

targetlist.2=""
targetlist.2=zocask("enter a list of players to IGNORE separated by semi-colons",targetlist.2)
if targetlist.2="##CANCEL##" then call _quit "script cancelled by user."
resetlist.2=targetlist.2

player=""

/* MAKE SURE YOU HAVE PHOTONS AND COMMISSION*/
ptc=_getinfo("phot")
if zocwait("Command")=640 then call _error "timeout"
if ptc=0 then call _error "you don't have any photon torpedoes."

/* GET FIG AND SECTORCIM INFO */
call _getfigs figname, figmode
_s.=""
_p.=""
reclen=_mapinit(fname)
call _onlineinit

/* MAIN LOOP - WAIT FOR FIG MESSAGES AND KILL */
done=0
call zocwrite _ansi("bt;frd")||"<< twp "||ptc||" photon(s) >> "||_ansi("fmg")
do while \done
 ans=zocwaitmux("entered sector.", ,
                "activated", ,
                "<Quit>", ,
                "of your fighters in sector ", ,
                "Command [", ,
                "Computer command", ,
                "STATUS", ,
                "INACTIVITY WARNING", ,
                "Sub-space radio", ,
                "Federation comm-link")
 select

  when ans=0 then do
   line=strip(_lastline())
   parse value strip(_lastline()) with temp "Deployed Fighters Report Sector " sector ":" line
   if strip(temp)="" then do
    parse value _lastline() with sector ": " player " entered sector."
    player=strip(player)
    if _kill(sector, player) then do
     done=1
     call _beep "photon.wav"
     call zocsend "tt<< twarp photon launched into "||sector||". >>^M^Mq"
    end /*if*/
    else call _commsg "r", "twarp photon failed at "||sector||":", "one-way, no figs, not enough ore,", "or "||player||" not a target."
   end /*if*/
  end /*when*/

  when ans=1 then do
   parse value strip(_lastline()) with temp "Limpet mine in " sector " activated"
   if strip(temp)="" then do
    if _kill(sector, "") then do
     done=1
     call _beep "photon.wav"
     call zocsend "tt<< twarp photon launched into "||sector||". LIMPET ACTIVATED. >>^M^Mq"
    end /*if*/
    else call _commsg "r", "twarp photon failed at "||sector||":", "one-way, no figs, not enough ore,", "LIMPET activated."
   end /*if*/
  end /*when*/

  when ans=2 then do
   call zocsend "n"
   done=1
  end /*when*/

  when ans=3 then do
   if zocwait("^M")=640 then call _error "timeout"
   sector=_lastline()
   _f.sector=0
  end /*when*/

  when ans=4 then call zocwrite _ansi("bt;frd")||"<< twp "||ptc||" photon(s) >> "||_ansi("fmg")

  when ans=5 then do
   call zocsend "q"
   if zocwait("Command [")=640 then call _error "timeout"
   call _getfigs figname
  end /*when*/

  when ans=6 then do
   parse value _lastline() with ch player " STATUS" .
   player=strip(player)
   call _userstatus ch, player
  end /*when*/

  when ans=7 then call zocsend "@"
  when ans=8 then call _waitcommand "Command ["
  when ans=9 then call _waitcommand "Command ["
  when ans=640 then do
   call _onlineget
   if _onlinereport() then call _beep "alert.wav"
  end /*when*/

 end /*select*/
end /*do*/

call _quit

exit

_userstatus:
 uch=arg(1)
 uplayer=arg(2)
 if uch="R" | uch=d2c(0)||"R" then do
  call zocnotify "["||uplayer||"] requested status check."
  statuslist.1=targetlist.1
  if targetlist.1="" then statuslist.1="[everyone is a target]"
  statuslist.2=targetlist.2
  if targetlist.2="" then statuslist.2="[nobody is ignored]"
  call _commsg "r", "status report for ["||uplayer||"]", "  photons onboard ("||ptc||")", "  targets: "||statuslist.1, "  ignore: "||statuslist.2
 end /*do*/
return

_kill:
 ksector=_stripint(arg(1))
 kmoved=0
 kplayer=arg(2)

 if ksector\="" then do
  call _mapseek fname, reclen, ksector
  if (targetlist.1="" | _listinstr(targetlist.1, kplayer)) & \_listinstr(targetlist.2, kplayer) then do
   alist=_s.ksector
   do while alist\=""
    parse var alist asec ";" alist
    awarptype=asec%20000
    asec=asec//20000
    call _mapseek fname, reclen, asec
    if _f.asec>0 & awarptype<2 then do
     if _twarp(asec,cr) then do
      call zocsend "cpy"||ksector||"^Mq"
      if zocwait("Command [")=640 then call _error "timeout"
      call _commsg "r", "twarp photon launched from "||asec||" to "||ksector||"."
      if zocwait("Command [")=640 then call _error "timeout"
      call _newline
      call zocwriteln _ansi("bt;frd")||"<< twarp photon launched from "||asec||" to "||ksector||", "||ptc-1||" photons remain. >> "||_ansi("fmg")
      kmoved=1
      alist=""
     end /*if*/
    end /*if*/
   end /*do*/
  end /*if*/
 end /*if*/
return kmoved

_warning:
 msg0="DO NOT GIVE THIS SCRIPT TO ANYBODY.  IF YOU DO I WILL FIND OUT AND NOBODY WILL EVER TRUST YOU AGAIN."
 msg1="enter a list of players you want to target for pdrop here.  the list must be semi-colon "
 msg2="delimited.  for example, if you want to hit hekate, illusion, and <-- Adomma -->, then enter the following list:  "
 msg3="hekate;illusion;<-- Adomma -->"
 msg4="this list is not case sensitive.  you can also put partial names, so the following will also work:  "
 msg5="hek;ill;adom"
 msg6="keep in mind though that if you abbreviate, then the script will kill hekate, thekiller, and hekman."

 call zocwriteln _ansi("bt;fye")
 call _notice 30, msg0
 call zocwriteln _ansi("bt;fgr")
 call _notice 70, msg1, msg2
 call zocwrite _ansi("bt;frd")
 call _notice 70, msg3
 call zocwrite _ansi("bt;fgr")
 call _notice 70, msg4
 call zocwrite _ansi("bt;frd")
 call _notice 70, msg5
 call zocwrite _ansi("bt;fgr")
 call _notice 70, msg6
return

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"
    
     if arg(1,"E") then fname=arg(1)
     else fname=base
    
     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /*if*/
       end /*do*/
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /*else*/
     end /*do*/
    
     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"
    
     rslt=spath||";"||fname||";"||game
    return rslt

/** _ini_askint v.5 **/
    _ini_askint: procedure expose (globals)
     if \arg(1,"E") then msg="enter an integer"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askint"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if _stripint(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=_stripint(default)
      when rslt="##EOF##"                     then rslt=_askint(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then rslt=_stripint(rslt)
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwriteln right(fname,min(length(fname),17))||" - "||key||"="||rslt||" >"
       rslt=_stripint(rslt)
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _get_log_info v.2 **/
    _get_log_info: procedure expose (globals)
     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_info"
     rslt=lpath||";"||ldefault
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user."
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user."
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _getinfo v.5 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=3*1024
     call zocreceivebuf bufflen
     call zocsend "/"
     if zocwait("Sect ")=640 then call _error "timeout"
     if zocwait("Ship ")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=space(translate(buff, "  ;;", d2c(0)||d2c(10)||d2c(13)||d2c(179)),1)
     buff=translate(space(translate(buff,", "," ,"),0),", "," ,")
    
     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/
    
     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)
    
    return rslt

/** _getfigs v.12 **/
    _getfigs: procedure expose (globals)
     fname=arg(1)
     mode=arg(2)
     _f.=0
     c=0
     if lower(mode)="file" then do
      if _fileopenr(fname) then do
       call zocwrite _ansi("bt;fye")
       mon=0
       do while \_fileeof(fname)
        n=linein(fname)
        if _stripint(n)\="" then do
         _f.n=1
         c=c+1
         mon=_spinner(mon,100)
        end /*if*/
       end /*do*/
       call _fileclose(fname)
       call zocwrite " ("||c||") "||_ansi("dl;fmg")
      end /*if*/
     end /*if*/
     else do
      buflen=1024*1024
      call zocreceivebuf buflen
      call zocsend "g"
      if zocwait("Deployed  Fighter  Scan")=640 then call _error "timeout"
      ans=0
      do while ans=0
       ans=zocwaitmux("r","Total")
      end /*do*/
      if ans=640 then call _error "timeout"
      buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
      if length(buff)=buflen then call _error "buffer overflow"
      call zocwrite _ansi("bt;fye")
    
      s=0
      i=0
      j=0
      i=pos(d2c(13),buff,pos("==",buff)+1)+1
      if i>1 then j=pos(d2c(13),buff,i)
      finish=pos("Total",buff,i)
      mon=0
      do while j>0 & j<finish
       line=strip(substr(buff,i,j-i))
       parse var line s1 . type .
       s1=_stripint(s1)
       if (type="Corp" | type="Personal") & s1\="" then do
        _f.s1=1
        c=c+1
        s=max(s,s1)
       end /*if*/
       i=j+1
       j=pos(d2c(13),buff,i)
       mon=_spinner(mon,100)
      end /*do*/
      call zocwrite " ("||c||") "||_ansi("dl;fmg")
      if fname\="" then do
       if _fileexists(fname) then call dosdel fname
       if _filenew(fname) then do
        call zocwrite _ansi("bt;fye")
        mon=0
        do i=1 to s
         if _f.i>0 then do
          call lineout fname, i
          mon=_spinner(mon,100)
         end /*if*/
        end /*do*/
        call _fileclose(fname)
        call zocwriteln " "||_ansi("dl;fmg")
       end /*if*/
      end /*if*/
     end /*else*/
    
    return c

/** _mapinit v.3 **/
    _mapinit: procedure expose (globals)
     if _s.0="_S.0" then _s.=""
     if _p.0="_P.0" then _p.=""
     if _dist.0.0="_DIST.0.0" then _dist.=255
     if _path.0.0="_PATH.0.0" then _path.=""
     if _dtomsl.0="_DTOMSL.0" then _dtomsl.=255
     if _dfrmsl.0="_DFRMSL.0" then _dfrmsl.=255
     if _bg.0="_BG.0" then _bg.=0
     if _nwi.0="_NWI.0" then _nwi.=0
     if _od.0="_OD.0" then _od.=0
     if _sv.0="_SV.0" then _sv.=0
     if _pv.0="_PV.0" then _pv.=0
     if _bust.0="_BUST.0" then _bust.=0
     fname=arg(1)
     if \_fileopenr(fname) then call _error "unable to open map file: "||fname
     reclen=c2d(charin(fname))
    return reclen

/** _onlineinit v.2 **/
    _onlineinit: procedure expose (globals)
     _olist1.=""
     _olist1.0=0
     call _onlineget
    return

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _commsg v.4 **/
    _commsg: procedure expose (globals)
     select
      when lower(arg(1))="f" then do
       ch="`"
       wlong="Federation comm-link terminated."
       wshort="Message sent on Federation comm-link."
      end /*when*/
      when lower(arg(1))="r" then do
       ch="'"
       wlong="Sub-space comm-link terminated"
       wshort="Message sent on sub-space channel"
      end /*when*/
      otherwise call _error "missing message mode flag."
     end /*select*/
     if arg(2)\="" then do
      if arg(3)="" then do
       call zocsend ch||"REV-SCRIPT:  "||arg(2)||"^M"
       if zocwait(wshort)=640 then call _error "timeout"
      end /*do*/
      else do
       i=2
       call zocsend ch||"^MREV-SCRIPT:  "
       do while arg(i)\=""
        call zocsend arg(i)||"^M"
        i=i+1
       end /*do*/
       call zocsend "^M"
       if zocwait(wlong)=640 then call _error "timeout"
      end /*else*/
     end /*if*/
    return

/** _waitcommand v.5 **/
    _waitcommand: procedure expose (globals)
     if arg(1)="" then line="Command ["
     else line=arg(1)
     done=0
     do while \done
      if zocwait(line)=640 then do
       call zocnotify "<< Script will resume at the '"||line||"' prompt. >>"
       call _beep "alert.wav"
      end /*if*/
      else done=1
     end /*do*/
    return

/** _onlineget v.6 **/
    _onlineget: procedure expose (globals)
    
     call zocwaitforseq 1
     call zocreceivebuf 5*1024
     flag=0
     buff=""
    
    /* if arg(1)\="manual" then do
        call zocsend "#"
        if zocwait("  Who's Playing  ")=640 then call _error "timeout1"
       end */
    
     call zocsend "#"
     if zocwait("  Who's Playing  ")=640 then call _error "timeout"
     do while buff=""
      if zocwait("^M")=640 then call _error "timeout"
      if strip(_lastline())="" then do
       if flag then buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
      end /*if*/
      else flag=1
     end /*do*/
     call zocwaitforseq 0
    
     _olist2.=""
     do i=1 to _olist1.0
      _olist2.i=_olist1.i
     end /*do*/
     _olist2.0=_olist1.0
     _olist1.=""
     _olist1.0=0
    
     k=max(pos("Who's Playing",buff),1)
     i=pos("36m",buff,k)+3
     j=0
     k=0
     if i>3 then do
      j=pos(d2c(27)||"[0;34m",buff,i)
      k=pos(d2c(13),buff,i)
      if k=0 then k=length(buff)
     end /*if*/
    
     c=0
     do while i>3 & j>0
    
      name=substr(buff,i,j-i)
      corp=strip(translate(_stripansi(substr(buff,j,k-j)),"  ","[]"))
      if corp="" then corp=0
      c=c+1
      _olist1.c=translate(name,"_",";")||";"||corp
    
      i=pos("36m",buff,k)+3
      if i>3 then do
       j=pos(d2c(27)||"[0;34m",buff,i)
       k=pos(d2c(13),buff,i)
       if k=0 then k=length(buff)
      end /*if*/
    
     end /*do*/
     _olist1.0=c
    
    return

/** _onlinereport v.3 **/
    _onlinereport: procedure expose (globals)
    
     msg.=""
     if verbose=0 then msg.1=""
     else msg.1="REV-SCRIPT:  online update^M"
     newtag="IN"
     gonetag="OUT"
    
     do i=1 to _olist1.0
      found=0
      do j=1 to _olist2.0
       if _dword(_olist1.i,1,";")=_dword(_olist2.j,1,";") then do
        found=1
        leave
       end /*if*/
      end /*do*/
      if \found then msg.2=msg.2||" "||newtag||": "||_dword(_olist1.i,1,";")||"^M"
     end /*do*/
    
     do i=1 to _olist2.0
      found=0
      do j=1 to _olist1.0
       if _dword(_olist2.i,1,";")=_dword(_olist1.j,1,";") then do
        found=1
        leave
       end /*if*/
      end /*do*/
      if \found then msg.3=msg.3||" "||gonetag||": "||_dword(_olist2.i,1,";")||"^M"
     end /*do*/
    
     rslt=1
     select
      when msg.2="" & msg.3="" then rslt=0
      when msg.2\="" & msg.3\="" then call zocsend "'^M"||msg.1||msg.2||msg.3||"^M"
      when msg.3="" then call zocsend "'^M"||msg.1||msg.2||"^M"
      when msg.2="" then call zocsend "'^M"||msg.1||msg.3||"^M"
      otherwise rslt=0
     end /*select*/
    
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _mapseek v.3 **/
    _mapseek: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") | \arg(3,"E") then call _error "missing parameter in _mapseek"
     fname=arg(1)
     reclen=arg(2)
     sector=arg(3)
    
     if _s.sector="_S."||sector | _s.sector="" then do
    
      call stream fname, "C", "SEEK "||(sector-1)*reclen+2
     
      vis=0
      one=0
      prt=0
      pvis=0
      bore=0
      borg=0
      bequ=0
      flags=c2d(charin(fname))
      if flags%128=1 then do
       bequ=1
       flags=flags-128
      end /*if*/
      if flags%64=1 then do
       borg=1
       flags=flags-64
      end /*if*/
      if flags%32=1 then do
       bore=1
       flags=flags-32
      end /*if*/
      if flags%16=1 then do
       _pv.sector=1
       flags=flags-16
      end /*if*/
      if flags%8=1 then do
       prt=1
       flags=flags-8
      end /*if*/
      if flags%4=1 then flags=flags-4
      if flags%2=1 then do
       _od.sector=1
       flags=flags-2
      end /*if*/
      if flags%1=1 then do
       _sv.sector=1
       flags=flags-1
      end /*if*/
     
      if prt then do
       if bore then _p.sector="B"
       else _p.sector="S"
       if borg then _p.sector=_p.sector||"B"
       else _p.sector=_p.sector||"S"
       if bequ then _p.sector=_p.sector||"B"
       else _p.sector=_p.sector||"S"
       do i=1 to 3
        ms1=charin(fname)
        ms2=charin(fname)
        ms3=charin(fname)
        _p.sector=_p.sector||";"c2d(ms1)+c2d(ms2)*256||","||c2d(ms3)
       end /*do*/
      end /*if*/
      else do
       _p.sector=""
       call stream fname, "C", "SEEK "||1+(sector-1)*reclen+11
      end /*else*/
      _dtomsl.sector=c2d(charin(fname))
      _dfrmsl.sector=c2d(charin(fname))
      _bg.sector=c2d(charin(fname))+c2d(charin(fname))*256
      _nwi.sector=c2d(charin(fname))
    
      ms1=c2d(charin(fname))+c2d(charin(fname))*256
      if ms1=0 then _s.sector=""
      else do
       _s.sector=ms1
       do i=1 to ((reclen-15)%2-1)
        ms1=c2d(charin(fname))+c2d(charin(fname))*256
        if ms1>0 then _s.sector=_s.sector||";"||ms1
       end /*do*/
      end /*else*/
    
     end /*if*/
    return

/** _listinstr v.3 **/
    _listinstr: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listinstr"
     abbrlist=arg(1)
     archetype=arg(2)
     if arg(3,"E") then mode=arg(3)
     else mode=""
     if arg(4,"E") then delim=left(arg(4),1)
     else delim=";"
     if mode\="cs" then do
      abbrlist=lower(abbrlist)
      archetype=lower(archetype)
     end /*if*/
     rslt=0
     if archetype="" then rslt=1
     else do
      do i=1 to _dwords(abbrlist,delim)
       if pos(_dword(abbrlist,i,delim), archetype)>0 then do
        rslt=1
        leave
       end /*if*/
      end /*do*/
     end /*else*/
    return rslt

/** _twarp v.3 **/
    _twarp: procedure expose (globals)
     success=0
     sector=arg(1)
     cr=arg(2)
    
     if cr="" then call zocsend "m"||sector||"^M"
     else do
      if sector<cr then call zocsend sector||"^M"
      else call zocsend sector
     end /*else*/
     if zocwait("<Move>")=640 then call _error "timeout"
    
     ans=zocwaitmux("Command [", ,
                    "already in that sector!", ,
                    "Engage the Autopilot?", ,
                    "engage the TransWarp drive?")
     select
      when ans=0 then do
       if zocwait("(?=Help)?")=640 then call _error "timeout"
       parse value _lastline() with . "]:[" check "] (?=Help)?" .
       if check=sector then success=1
      end /*when*/
      when ans=1 then nop
      when ans=2 then do
       call zocsend "n"
       if zocwait("Command [")=640 then call _error "timeout"
       success=0
      end /*when*/
      when ans=3 then do
       call zocsend "y"
       ans2=zocwaitmux("not have enough Fuel Ore", ,
                         "make this jump blind?", ,
                         "shall we engage?")
       select
        when ans2=0 then if zocwait("Command [")=640 then call _error "timeout"
        when ans2=1 then do
         call zocsend "n"
         if zocwait("Command [")=640 then call _error "timeout"
        end /*when*/
        when ans2=2 then do
         call zocsend "y"
         if zocwait("Command [")=640 then call _error "timeout"
         success=1
        end /*when*/
        when ans2=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
    
    return success

/** _notice v.3 **/
    _notice: procedure expose (globals)
     width=arg(1)
     if width>75 then width=75
     line=arg(2)
    
     i=3
     do while arg(i)\=""
      nw1=length(arg(i))
      if nw1+width>250 then width=250-nw1
      i=i+1
     end /*do*/
     if width<20 then call _error "notice error"
    
     i=3
     do while length(line)>0
      if length(line)<=width & arg(i)\="" then do
       line=line||arg(i)
       i=i+1
      end /*if*/
      if length(line)<=width then do
       call zocwriteln "<< "||line||copies(" ",width-length(line))||">>"
       line=""
      end /*if*/
      else do
       np=width
       do while substr(line,np,1)\=" "
        np=np-1
       end /*do*/
       call zocwriteln "<< "||left(line,np)||copies(" ",width-np)||">>"
       line=substr(line,np+1)
      end /*else*/
     end /*do*/
    return

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=left(arg(2),1)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*do*/
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.2 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|",arg(3)))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user."
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/
    
     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
    
     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname 
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"
    
    return v

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _fileopenr v.3 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.3 **/
    _fileeof: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileeof"
     if stream(arg(1), "S")="READY" then rslt=0
     else rslt=1
    return rslt

/** _spinner v.3 **/
    _spinner: procedure expose (globals)
     if arg(1,"E") then count=arg(1)
     else call _error "missing parameter in _spinner"
     if arg(2,"E") then width=arg(2)
     else width=50
     if arg(3,"E") & length(arg(3))=5 then chs=arg(3)
     else chs="-\|/."
     select
      when count=-1        then call zocwrite d2c(27)||"[1D"||substr(chs,5,1)
      when count<0         then count=-1
      when count=0         then call zocwrite left(chs,1)
      when count=width     then call zocwrite d2c(27)||"[1D"||substr(chs,2,1)
      when count=(width*2) then call zocwrite d2c(27)||"[1D"||substr(chs,3,1)
      when count=(width*3) then call zocwrite d2c(27)||"[1D"||substr(chs,4,1)
      when count=(width*4) then do
       call zocwrite d2c(27)||"[1D"||left(chs,1)
       count=0
      end /*when*/
      otherwise nop
     end /*select*/
     count=count+1
    return count

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _filenew v.3 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt

/** _stripansi v.4 **/
    _stripansi: procedure expose (globals)
     if arg(1,"E") then line=arg(1)
     else call _error "missing parameter in _stripansi"
     line=_striplf(line)
     esc=d2c(27)
     incode=0
     caret=0
     rslt=""
     i=1
     do while i<=length(line)
      ch=substr(line,i,1)
      select
       when \caret & ch="^" then caret=1
       when ch=esc | (caret & ch="[") then do
        incode=1
        caret=0
       end /*when*/
       when incode & \caret & verify(ch,"[1234567890;") then incode=0
       when incode then nop
       otherwise do
        if caret then rslt=rslt||"^"||ch
        else rslt=rslt||ch
        caret=0
       end /*otherwise*/
      end /*select*/
      i=i+1
     end /*do*/
    return rslt

/** _striplf v.4 **/
    _striplf: procedure expose (globals)
     if arg(1,"E") then line=arg(1)
     else call _error "missing argument in _striplf"
     line=zocstring("REMOVE",line,d2c(10))
     line=zocstring("REMOVE",line,"^j")
     line=zocstring("REMOVE",line,"^J")
    return line
