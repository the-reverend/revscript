/* REXX _3uso.zrx by the reverend (build 11)                                  */
/*-       built by rev-builder version 1.2 on 07 Apr 2003 at 21:30:15        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ----------------------*/ _g.!sname="_3uso.zrx" /*----------------------- -*/
/*- --------------*/ _g.!sbuild=11; _g.!sdate="2003-04-07" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 30
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

/* configuration variables */
   type="USO"
   sd=1232

/* setup log */
   log="usos.txt"
   if \_fileopenw(log) then call _error "unable to open log"

/* verify prompt and cn9 settings, announce script */
   pmt=_synchronize()
   if pmt\="citadel" then call _error "start in citadel"
   call _cn9 "allkeys"
   call zocsend "'"||_g.!sname||" : build "||_g.!sbuild||"^M"

/* get main planet number, define flags and macros */
   mp=_get_planet_number(pmt)
   p.=0; p.mp=1
   refillmacro="f1^Mcdy1^Mql"||mp||"^Mmnt^Mtnt1^Mctf350000^Mb"||sd||"^Mypsgygqha5^Ma3^Ma2^Ma1^Mt5^Mt3^Mt2^Mt1^Mqqn1yyzn@"

/* get ship and player stats */
   parse value _getinfo("atmdt;gtorp;sect;aln") with dets ";" gens ";" sector ";" align
   if align<1000 then call _error "you need a federal commission"

/* void adjacents, clear current and stardock */
   call zocsend "s"
   if zocwait("Warps to Sector(s) :")=640 then call _error "timeout"
   warps=_space(translate(_grabit("^M")," ","()-"))
   call zocsend "^M^^c"||sector||"^Mc"||sd||"^M"
   do i=1 to words(warps); call zocsend "s"||word(warps,i)||"^M"; end; call zocsend "q"

/* lift, pop 3 planets */
   call zocsend "qmnt^Mq"
   if gens=0 then do
    if _sendwait(refillmacro, "Average Interval Lag:")=640 then call _error "timeout"
    parse value _getinfo("atmdt;gtorp") with dets ";" gens
   end /*if*/
   do i=1 to 3
    call zocsend "uyn^H.^Mc"
    if i=gens then if _sendwait(refillmacro, "Average Interval Lag:")=640 then call _error "timeout"
   end
   if _sendwait("@", "Average Interval Lag:")=640 then call _error "timeout"
   parse value _getinfo("atmdt;gtorp") with dets ";" gens
   if gens=0 | dets=0 then do
    if _sendwait(refillmacro, "Average Interval Lag:")=640 then call _error "timeout"
    parse value _getinfo("atmdt;gtorp") with dets ";" gens
   end /*if*/

/* main loop */
   startover:
     list=_get_planet_list()
     if list=0 | list="" then signal done

     i=0
     next:
       i=i+1; if i>_dwords(list,";") then signal done
       n=_dword(list,i,";")
       if n=0 | n="" then signal done
       if p.n then signal next
       call zocsend "l"||n||"^M"
       if zocwait("Planet #")=640 then call _error "timeout"
       if zocwait("Class")=640 then call _error "timeout"
       if zocwait(", ")=640 then call _error "timeout"
       s=_grabit("^M")
       if s=type then do; p.n=1; call zocsend "q"; call lineout log, sector n; signal next; end
       call zocsend "zdyuyn^H.^Mc@"; dets=dets-1; gens=gens-1; if zocwait("Average Interval Lag:")=640 then call _error "timeout"
       if dets=0 | gens=0 then do
        if _sendwait(refillmacro, "Average Interval Lag:")=640 then call _error "timeout"
        parse value _getinfo("atmdt;gtorp") with dets ";" gens
       end /*if*/
     signal startover

   done:
     call _fileclose log
     call zocsend "l"||mp||"^Mc"
     call zocsend "^^"; do i=1 to words(warps); call zocsend "c"||word(warps,i)||"^M"; end; call zocsend "q"
     call zocsend "'"||_g.!sname||" : done^M"

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.4 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. (globals)

     _verbose=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _q. _sl. _ex. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. _msg _msg. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenw"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN WRITE"
      call stream arg(1), "C", "SEEK <0"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=_filenew(arg(1))
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
    exit

/** _synchronize v.3 **/
    _synchronize: procedure expose (globals)

     synchw="Pausing",
         ||"|&&",
         ||"|Command [",
         ||"|Citadel command",
         ||"|Planet command",
         ||"|<StarDock>",
         ||"|ship to sell",
         ||"|Still interested ?",
         ||"|wish to buy? (A,B,C,Q,?)",
         ||"|<Galactic Bank>",
         ||"|<Hardware Emporium>",
         ||"|<Shipyards>",
         ||"|<Tavern>",
         ||"|Enter your choice [T] ?",
         ||"|do you want to sell [",
         ||"|do you want to buy [",
         ||"|Computer command",
         ||"|Corporate command",
         ||"|Colonists? [T]",
         ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]"

     synchr="other other command citadel planet stardock shipsell shipinterested class0 bank hardware shipyards tavern portmenu porthaggle porthaggle computer corporate terra stop_in_this_sector?"

     if _sendwait("&&","Pausing")=640 then call _error "timeout"
     ans=zocwaitmux(synchw)
     if ans=640 then rslt="timeout"
                else rslt=word(synchr,ans+1)

     select
      when rslt="computer" then do
       call zocsend "q"
       ans=zocwaitmux("Command [","Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=zocwaitmux("Command [","Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _cn9 v.1 **/
    _cn9: procedure expose (globals)
     if arg(1,"E") then mod=_list_select(lower(arg(1)),"spaces;s;0;allkeys;a;1;query;q;2","spaces;spaces;spaces;allkeys;allkeys;allkeys;query;query;query")
                   else mod="query"
     if mod="" then return "##UNKNOWN##"
     if arg(2,"E") then pmt=arg(2)
                   else pmt=_synchronize()
     if _listin(pmt,"command;citadel;computer;computer_cit") then do
      call zocsend _list_select(pmt,"command;citadel;computer;computer_cit","cn;cn;n;n")
      a=zocwaitmux("ALL KEYS|SPACE")
      select
       when a=0 & mod="spaces"  then call zocsend "9"
       when a=0 & mod="query"   then mod="allkeys"
       when a=1 & mod="allkeys" then call zocsend "9"
       when a=1 & mod="query"   then mod="spaces"
       when a=640 then call _error "timeout"
       otherwise nop
      end /*select*/
      call zocsend _list_select(pmt,"command;citadel;computer;computer_cit","qq;qq;q;q")
      rslt="##"||upper(mod)||"##"
     end /*if*/
     else rslt="##UNKNOWN##"
    return rslt

/** _get_planet_number v.2 **/
    _get_planet_number: procedure expose (globals)
     if arg(1,"E") then prompt=arg(1)
                   else prompt=_synchronize()
     select
      when prompt="citadel" then do
       if _sendwait("qd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("c","Citadel command (?=help)")=640 then call _error "timeout"
      end /*when*/
      when prompt="computer_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cc","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="corporate_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cx","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="planet" then do
       if _sendwait("d","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
      end /*when*/
      otherwise planet=0
     end /*select*/
    return planet

/** _getinfo v.5 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=3*1024
     call zocreceivebuf bufflen
     call zocsend "/"
     if zocwait("Sect ")=640 then call _error "timeout"
     if zocwait("Ship ")=640 then call _error "timeout"
     if zocwait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, "  ;;", d2c(0)||d2c(10)||d2c(13)||d2c(179)),1)
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/

     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if zocwait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=zocwait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _get_planet_list v.1 **/
    _get_planet_list: procedure expose (globals)
     rslt=""
     if _sendwait("l","<Preparing ship")=640 then call _error "timeout"
     ans=zocwaitmux("isn't a planet", "stress of landing", "blocks your attempt", "[Pause]", "Planet command", "Registry#")
     select
      when ans=0 then nop
      when ans<=2 then rslt=0
      when ans=3 then do; rslt=0; call zocsend "^M^Mzr^M"; end /* COMBAT */
      when ans=4 then do; rslt=_get_planet_number("planet"); call zocsend "q"; end
      when ans=5 then do
       ans2=zocwaitmux("> ","Q to abort")
       do while ans2=0
        n=strip(_lastline())
        if zocwait("^M")=640 then call _error "timeout"
        if left(n,9)\="Owned by:" then do /* p-scanner e.g. "owned by: < dr who >" */
         n=_stripint(n)
         if n>0 then rslt=rslt||" "||n
        end /*if*/
        ans2=zocwaitmux("> ","Q to abort")
       end
       call zocsend "q^M"
       if ans2=640 then call _error "timeout"
       rslt=translate(_space(rslt),";"," ")
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

    /* _list_select v.1 */
    _list_select: procedure expose (globals)
     f=arg(1)
     a=arg(2)
     b=arg(3)
     if arg(4,"E") then d=arg(4)
                   else d=";"
     rslt=""
     do i=1 to _dwords(a,d)
      if f=_dword(a,i,d) then do; rslt=_dword(b,i,d); leave; end
     end /*do*/
    return rslt

/** _listin v.3 **/
    _listin: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listin"
     find=arg(1)
     list=arg(2)
     if arg(3,"E") then delim=left(arg(3),1)
                   else delim=";"
     rslt=0
     do i=1 to _dwords(list,delim)
      if find==_dword(list,i,delim) then do
       rslt=1
       leave
      end /*if*/
     end /*do*/
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then rslt=0
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt
