/* REXX _macro_key.zrx by the reverend (build 51)                             */
/*-       built by rev-builder version 1.0 on 20 May 2002 at 12:10:41        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-            http://thereverend.coastgames.com/rev-license.html            -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */
/* rev. 1 - added ^RUN=                                                       */

globals=_setglobals()
/* call zockeyboard "LOCK" */
iname="script\macros.ini"

call zocwrite _ansi("bt;bbl;fye")||"<macrokey>"||_ansi("bt;bbk;fwh")
done=0
do while \done
 parse value zockeyboard("GETNEXTKEY") with hexkey"|"scan"|"shift"|"ctrl"|"alt
 key=_scancode_to_abc123(x2d(scan))
 select
  when x2d(scan)=53 then call _keyhelp
  when x2d(scan)=1  then done=1
  when x2d(scan)=12 then done=1
  when key\="" then do
   select
    when alt  & shift then heading="alt-shift"
    when ctrl & shift then heading="ctrl-shift"
    when ctrl         then heading="ctrl"
    when alt          then heading="alt"
    when shift        then heading="shift"
    otherwise              heading="none"
   end /* select */
   macro=_ini_askstr("##DEFAULT##", "", "script\macros.ini", heading, key, "quiet")
   if pos(";",macro)>0 then parse var macro descr ";" macro
   else descr=""
/* 
   if ctrl then call zocwrite "ctrl-"
   if alt then call zocwrite "alt-"
   if shift then call zocwrite "shift-"
   call zocwriteln key" ("macro")"
*/ 
   if macro\="" then do
    done=1
    if upper(left(macro,5))="^RUN=" then call zocdostring(macro)
    else call zocsend macro
   end /* if */
   else do
    call _newline
    call zocwriteln _ansi("bt;fwh")||"(no macro press ? for a list)"
   end /* else */
  end /* when */
  otherwise nop
 end /* select */
end /* do */

exit

_keyhelp:
 call _newline _ansi("bt;fye")
 ansi1="fgr"
 call zocwriteln "# "center("none",12)||" "||center("ctrl",12)||" "||center("alt",12)||" "||center("shift",12)||" "||center("ctrl-shift",12)||" "||center("alt-shift",12)
 do i=c2d("a") to c2d("z")
  line.1=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "none", d2c(i), "quiet")
  line.2=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "ctrl", d2c(i), "quiet")
  line.3=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "alt", d2c(i), "quiet")
  line.4=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "shift", d2c(i), "quiet")
  line.5=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "ctrl-shift", d2c(i), "quiet")
  line.6=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "alt-shift", d2c(i), "quiet")
  if line.1||line.2||line.3||line.4||line.5||line.6\="" then do
   call zocwrite d2c(i)
   do j=1 to 6
    if pos(";",line.j)>0 then parse var line.j descr ";" line.j
    else descr=strip(left(line.j,10))
    if pos("^",descr)>0 then descr=left(descr,pos("^",descr)-1)
    if descr="" then call zocwrite "             "
    else call zocwrite " "||center(descr,12)
   end /* do */
   call zocwriteln _ansi("bt;"||ansi1)
   if ansi1="fye" then ansi1="fgr"
   else ansi1="fye"
  end /* if */
 end /* do */
 do i=0 to 9
  line.1=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "none", i, "quiet")
  line.2=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "ctrl", i, "quiet")
  line.3=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "alt", i, "quiet")
  line.4=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "shift", i, "quiet")
  line.5=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "ctrl-shift", i, "quiet")
  line.6=_ini_askstr("##DEFAULT##", "", "script\macros.ini", "alt-shift", i, "quiet")
  if line.1||line.2||line.3||line.4||line.5||line.6\="" then do
   call zocwrite i
   do j=1 to 6
    if pos(";",line.j)>0 then parse var line.j descr ";" line.j
    else descr=strip(left(line.j,10))
    if descr="" then call zocwrite "             "
    else call zocwrite " "||center(descr,12)
   end /* do */
   call zocwriteln _ansi("bt;"||ansi1)
   if ansi1="fye" then ansi1="fgr"
   else ansi1="fye"
  end /* if */
 end /* do */
 call zocwriteln "ESC=Quit"
return

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /* select */
     end /* do */
     rslt="^[["||rslt||"m"
    return rslt

/** _scancode_to_abc123 v.2 **/
    _scancode_to_abc123: procedure expose (globals)
     code=arg(1)
     select
      when code=30 then rslt="a"
      when code=48 then rslt="b"
      when code=46 then rslt="c"
      when code=32 then rslt="d"
      when code=18 then rslt="e"
      when code=33 then rslt="f"
      when code=34 then rslt="g"
      when code=35 then rslt="h"
      when code=23 then rslt="i"
      when code=36 then rslt="j"
      when code=37 then rslt="k"
      when code=38 then rslt="l"
      when code=50 then rslt="m"
      when code=49 then rslt="n"
      when code=24 then rslt="o"
      when code=25 then rslt="p"
      when code=16 then rslt="q"
      when code=19 then rslt="r"
      when code=31 then rslt="s"
      when code=20 then rslt="t"
      when code=22 then rslt="u"
      when code=33 then rslt="v"
      when code=17 then rslt="w"
      when code=45 then rslt="x"
      when code=21 then rslt="y"
      when code=44 then rslt="z"
      when code=2  then rslt="1"
      when code=3  then rslt="2"
      when code=4  then rslt="3"
      when code=5  then rslt="4"
      when code=6  then rslt="5"
      when code=7  then rslt="6"
      when code=8  then rslt="7"
      when code=9  then rslt="8"
      when code=10 then rslt="9"
      when code=11 then rslt="0"
      otherwise rslt=""
     end /* when */
    return rslt

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /* if */
    exit

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /* do */
    
     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
    
     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /* when */
        otherwise nop
       end /* select */
      end /* do */
      call _fileclose fname 
      if \found then v="##EOF##"
     end /* if */
     else v="##EOF##"
    
    return v

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _fileopenr v.3 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /* if */
     else rslt=0
    return rslt

/** _fileeof v.3 **/
    _fileeof: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileeof"
     if stream(arg(1), "S")="READY" then rslt=0
     else rslt=1
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt
