/* REXX _tdrop.zrx by the reverend (build 81)                                 */
/*-       built by rev-builder version 1.1 on 19 Sep 2002 at 17:20:18        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

call zoctimeout 60
call zocsynctime 500
globals=_setglobals()
call on halt name _halt

if \_pcheck("Command [") then call _error "please start at the command prompt."

/* GET INFORMATION FROM USER OR INI FILE */
call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
targetlist.1=_ini_askstr("##DEFAULT##", "", iname, game, "target")
targetlist.2=_ini_askstr("##DEFAULT##", "", iname, game, "ignore")

targetlist.1=zocask("enter a list of players to TARGET separated by semi-colons",targetlist.1)
if targetlist.1="##CANCEL##" then call _quit "script cancelled by user."
resetlist.1=targetlist.1

targetlist.2=zocask("enter a list of players to IGNORE separated by semi-colons",targetlist.2)
if targetlist.2="##CANCEL##" then call _quit "script cancelled by user."
resetlist.2=targetlist.2

figs=_asknum("how many figs to attack with? (0 for no attack)",0)

call _onlineinit

call zocwrite _ansi("bt;frd")||"<< tdrop script running >> "||_ansi("fmg")
done=0
do while \done
 ans=zocwaitmux("entered sector.", ,
                "activated", ,
                "<Quit>", ,
                "Command [", ,
                "Computer command", ,
                "Sub-space radio", ,
                "Federation comm-link", ,
                "  Who's Playing  ", ,
                "INACTIVITY WARNING", ,
                "STATUS")
 select

  when ans=0 then do
   parse value _lastline() with temp "Deployed Fighters Report Sector " sector ": " player " entered sector."
   if strip(temp)="" then do
    parse value _lastline() with sector ": " player " entered sector."
    player=strip(player)
    sector=_stripint(sector)
    if sector\="" & (targetlist.1="" | _listinstr(targetlist.1, player)) & (player="" | \_listinstr(targetlist.2, player)) then done=_twarp(sector)
   end /*if*/
  end /*when*/

  when ans=1 then do
   parse value _lastline() with temp "Limpet mine in " sector " activated" .
   if strip(temp)="" then do
    sector=_stripint(sector)
    if sector\="" then done=_twarp(sector)
   end /*if*/
  end /*when*/

  when ans=2 then do
   done=1
   call zocsend "n"
   if zocwait("Command [")=640 then call _error "timeout"
  end /*when*/
  when ans=3 then call zocwrite _ansi("bt;frd")||"<< tdrop script running >> "||_ansi("fmg")
  when ans=4 then call _waitcommand "Command ["
  when ans=5 then call _waitcommand "Command ["
  when ans=6 then call _waitcommand "Command ["
  when ans=7 then do
   call _onlineget "manual"
   if _onlinereport() then call _beep "alert.wav"
  end /*when*/
  when ans=8 then do
   call _onlineget
   if _onlinereport() then call _beep "alert.wav"
  end /*when*/
  when ans=9 then call zocsend "'REV-SCRIPT: _tdrop^M"
  when ans=640 then do
   call _onlineget
   if _onlinereport() then call _beep "alert.wav"
  end /*when*/
  otherwise nop

 end /*select*/
end /*do*/

if figs>0 & ans<2 then do
 call zocsend "ayay"||figs||"^M"
 if zocwait("Command")=640 then call _error "timeout"
end /*if*/

call _quit

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"
    
     if arg(1,"E") then fname=arg(1)
     else fname=base
    
     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /*if*/
       end /*do*/
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /*else*/
     end /*do*/
    
     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"
    
     rslt=spath||";"||fname||";"||game
    return rslt

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _asknum v.4 **/
    _asknum: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an number:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripnum(rslt)\=rslt | rslt=""
      default=rslt||" [please enter a number or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _onlineinit v.2 **/
    _onlineinit: procedure expose (globals)
     _olist1.=""
     _olist1.0=0
     call _onlineget
    return

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _listinstr v.3 **/
    _listinstr: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listinstr"
     abbrlist=arg(1)
     archetype=arg(2)
     if arg(3,"E") then mode=arg(3)
     else mode=""
     if arg(4,"E") then delim=left(arg(4),1)
     else delim=";"
     if mode\="cs" then do
      abbrlist=lower(abbrlist)
      archetype=lower(archetype)
     end /*if*/
     rslt=0
     if archetype="" then rslt=1
     else do
      do i=1 to _dwords(abbrlist,delim)
       if pos(_dword(abbrlist,i,delim), archetype)>0 then do
        rslt=1
        leave
       end /*if*/
      end /*do*/
     end /*else*/
    return rslt

/** _twarp v.3 **/
    _twarp: procedure expose (globals)
     success=0
     sector=arg(1)
     cr=arg(2)
    
     if cr="" then call zocsend "m"||sector||"^M"
     else do
      if sector<cr then call zocsend sector||"^M"
      else call zocsend sector
     end /*else*/
     if zocwait("<Move>")=640 then call _error "timeout"
    
     ans=zocwaitmux("Command [", ,
                    "already in that sector!", ,
                    "Engage the Autopilot?", ,
                    "engage the TransWarp drive?")
     select
      when ans=0 then do
       if zocwait("(?=Help)?")=640 then call _error "timeout"
       parse value _lastline() with . "]:[" check "] (?=Help)?" .
       if check=sector then success=1
      end /*when*/
      when ans=1 then nop
      when ans=2 then do
       call zocsend "n"
       if zocwait("Command [")=640 then call _error "timeout"
       success=0
      end /*when*/
      when ans=3 then do
       call zocsend "y"
       ans2=zocwaitmux("not have enough Fuel Ore", ,
                         "make this jump blind?", ,
                         "shall we engage?")
       select
        when ans2=0 then if zocwait("Command [")=640 then call _error "timeout"
        when ans2=1 then do
         call zocsend "n"
         if zocwait("Command [")=640 then call _error "timeout"
        end /*when*/
        when ans2=2 then do
         call zocsend "y"
         if zocwait("Command [")=640 then call _error "timeout"
         success=1
        end /*when*/
        when ans2=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
    
    return success

/** _waitcommand v.5 **/
    _waitcommand: procedure expose (globals)
     if arg(1)="" then line="Command ["
     else line=arg(1)
     done=0
     do while \done
      if zocwait(line)=640 then do
       call zocnotify "<< Script will resume at the '"||line||"' prompt. >>"
       call _beep "alert.wav"
      end /*if*/
      else done=1
     end /*do*/
    return

/** _onlineget v.6 **/
    _onlineget: procedure expose (globals)
    
     call zocwaitforseq 1
     call zocreceivebuf 5*1024
     flag=0
     buff=""
    
    /* if arg(1)\="manual" then do
        call zocsend "#"
        if zocwait("  Who's Playing  ")=640 then call _error "timeout1"
       end */
    
     call zocsend "#"
     if zocwait("  Who's Playing  ")=640 then call _error "timeout"
     do while buff=""
      if zocwait("^M")=640 then call _error "timeout"
      if strip(_lastline())="" then do
       if flag then buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
      end /*if*/
      else flag=1
     end /*do*/
     call zocwaitforseq 0
    
     _olist2.=""
     do i=1 to _olist1.0
      _olist2.i=_olist1.i
     end /*do*/
     _olist2.0=_olist1.0
     _olist1.=""
     _olist1.0=0
    
     k=max(pos("Who's Playing",buff),1)
     i=pos("36m",buff,k)+3
     j=0
     k=0
     if i>3 then do
      j=pos(d2c(27)||"[0;34m",buff,i)
      k=pos(d2c(13),buff,i)
      if k=0 then k=length(buff)
     end /*if*/
    
     c=0
     do while i>3 & j>0
    
      name=substr(buff,i,j-i)
      corp=strip(translate(_stripansi(substr(buff,j,k-j)),"  ","[]"))
      if corp="" then corp=0
      c=c+1
      _olist1.c=translate(name,"_",";")||";"||corp
    
      i=pos("36m",buff,k)+3
      if i>3 then do
       j=pos(d2c(27)||"[0;34m",buff,i)
       k=pos(d2c(13),buff,i)
       if k=0 then k=length(buff)
      end /*if*/
    
     end /*do*/
     _olist1.0=c
    
    return

/** _onlinereport v.3 **/
    _onlinereport: procedure expose (globals)
    
     msg.=""
     if verbose=0 then msg.1=""
     else msg.1="REV-SCRIPT:  online update^M"
     newtag="IN"
     gonetag="OUT"
    
     do i=1 to _olist1.0
      found=0
      do j=1 to _olist2.0
       if _dword(_olist1.i,1,";")=_dword(_olist2.j,1,";") then do
        found=1
        leave
       end /*if*/
      end /*do*/
      if \found then msg.2=msg.2||" "||newtag||": "||_dword(_olist1.i,1,";")||"^M"
     end /*do*/
    
     do i=1 to _olist2.0
      found=0
      do j=1 to _olist1.0
       if _dword(_olist2.i,1,";")=_dword(_olist1.j,1,";") then do
        found=1
        leave
       end /*if*/
      end /*do*/
      if \found then msg.3=msg.3||" "||gonetag||": "||_dword(_olist2.i,1,";")||"^M"
     end /*do*/
    
     rslt=1
     select
      when msg.2="" & msg.3="" then rslt=0
      when msg.2\="" & msg.3\="" then call zocsend "'^M"||msg.1||msg.2||msg.3||"^M"
      when msg.3="" then call zocsend "'^M"||msg.1||msg.2||"^M"
      when msg.2="" then call zocsend "'^M"||msg.1||msg.3||"^M"
      otherwise rslt=0
     end /*select*/
    
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=left(arg(2),1)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /*if*/
      end /*do*/
      call _fileclose fname
     end /*do*/
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.2 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|",arg(3)))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user."
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/
    
     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
    
     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname 
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"
    
    return v

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789."," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if _dwords(rslt,".")>2 then rslt=_dword(rslt,1,".")||"."||space(translate(substr(rslt,pos(".",rslt)+1)," ","."),0)
     if \datatype(rslt,"N") then rslt=""
    return rslt

/** _stripansi v.4 **/
    _stripansi: procedure expose (globals)
     if arg(1,"E") then line=arg(1)
     else call _error "missing parameter in _stripansi"
     line=_striplf(line)
     esc=d2c(27)
     incode=0
     caret=0
     rslt=""
     i=1
     do while i<=length(line)
      ch=substr(line,i,1)
      select
       when \caret & ch="^" then caret=1
       when ch=esc | (caret & ch="[") then do
        incode=1
        caret=0
       end /*when*/
       when incode & \caret & verify(ch,"[1234567890;") then incode=0
       when incode then nop
       otherwise do
        if caret then rslt=rslt||"^"||ch
        else rslt=rslt||ch
        caret=0
       end /*otherwise*/
      end /*select*/
      i=i+1
     end /*do*/
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt

/** _fileopenr v.3 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.3 **/
    _fileeof: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileeof"
     if stream(arg(1), "S")="READY" then rslt=0
     else rslt=1
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _striplf v.4 **/
    _striplf: procedure expose (globals)
     if arg(1,"E") then line=arg(1)
     else call _error "missing argument in _striplf"
     line=zocstring("REMOVE",line,d2c(10))
     line=zocstring("REMOVE",line,"^j")
     line=zocstring("REMOVE",line,"^J")
    return line
