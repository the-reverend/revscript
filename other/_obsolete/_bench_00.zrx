/* REXX _bench_00.zrx by the reverend (build 44)                              */
/*-       built by rev-builder version 1.2 on 14 Mar 2003 at 12:39:02        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- --------------------*/ _g.!sname="_bench_00.zrx" /*--------------------- -*/
/*- --------------*/ _g.!sbuild=44; _g.!sdate="2003-03-14" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0  - initial release                                                  */

/* SET TEST VARIABLES HERE */
   username="col sanders"
   password="chick filet is SATAN"
   gameletter="c"
   testname="_test_a"
   buyjet=150
   wait=25
   sd=1234
   ns=5000
   cr=600
   gamepwd=""
/* END TEST VARIABLES      */

num=22
start:

num=num+1
username="LoadTest"||num
password="test"

loginmacro='c{buede.com} w{type "New":} s{'||username||'^M} w{Password:} s{'||password||'^M} w{(N)onstop:} s{n} w{(N)onstop:} s{n} w{(N)onstop:} s{n} w{(N)onstop:} s{n} w{(N)onstop:} s{n} w{(N)onstop:} s{n} w{X to exit):} s{g^M} w{Your Choice:} s{'||gameletter||'}'
logoutmacro='s{qy} w{X - Exit} s{x^M} w{Your Choice:} s{q} w{X to exit):} s{x^M} w{re-logon)?} s{y}'

call zoctimeout 15
call zocsynctime 500
globals=_setglobals("logname")
call on halt name _halt
call _rseed

parse value _get_log_info() with lpath ";" ldefault
cname=testname
bname=lpath||cname||"_bust.txt"

call _domacro loginmacro

ans=0
do while ans=0
 ans=zocwaitmux("[Pause]", ,
                "Enter your choice:")
 select
  when ans=0 then call zocsend "^M"
  when ans=1 then call _login gamepwd, cname, bname, username
  when ans=640 then call _error "timeout"
  otherwise nop
 end /*select*/
end /*do*/
call zocsend "qqz0^M" /* leave stardock or terra */

call _domacro logoutmacro

if num=70 then exit
signal start

exit

_login: procedure expose (globals)
 gamepwd=arg(1)
 cname=arg(2)
 bname=arg(3)
 uname=arg(4)
 call _rseed

 call zocsend "t^M"

 mode=0 /* 0=initial 1=normal 2=new */
 newname=""
 done=0
 pset=0
 mflag=0
 pflag=1
 do while \done

  select
   when mode=0 then ans=zocwaitmux("[Pause]", ,
                                   "Show today's log? (Y/N) [N]", ,
                                   "       Hello ", ,
                                   "Password?", ,
                                   "messages received since your last", ,
                                   "new character")
   when mode=1 then ans=zocwaitmux("[Pause]", ,
                                   "Delete messages? (Y/N) [N]", ,
                                   "Include time/date stamp? (Y/N) [N]", ,
                                   "Do you wish to clear some avoids? (Y/N) [N]", ,
                                   "(?=Help)? :", ,
                                   "Planet command (?=help) [D]", ,
                                   "Option? (A,D,I", ,
                                   "Class 9 (Special)", ,
                                   "Sector  : 1 in", ,
                                   "::", ,
                                   "What do you want to name your ship? (30 letters)", ,
                                   "No messages received.", ,
                                   "messages received since your last", ,
                                   "> ", ,
                                   "Password?")
   when mode=2 then ans=zocwaitmux("[Pause]", ,
                                   "Password?", ,
                                   "Use (N)ew Name or (B)BS Name [B] ?", ,
                                   "cannot use the name", ,
                                   "That alias would look", ,
                                   "name your ship?", ,
                                   "name your home planet?", ,
                                   "(?=Help)? :")
  end /*select*/

  select
   when ans=0 & mflag then do
    call zocdelay 1
    select
     when _pcheck("[Pause] - [") & pflag then do
      call zocsend " "
      pflag=0
     end /*when*/
     when _pcheck("[Pause] - [") then nop
     when _pcheck("[Pause] - D") then call zocsend "y"
     otherwise do
      call zocsend " "
      pflag=0
     end /*otherwise*/
    end /*select*/
   end /*when*/
   when ans=0 then call zocsend " "

   when mode=0 & ans=1 then call zocsend "n"
   when mode=0 & ans=2 then do
    bbsname=_grabit(", welcome")
    bbsname=left(bbsname,pos(", welcome",bbsname)-1)
   end /*when*/
   when mode=0 & ans=3 then do
    call zocsend gamepwd||"^M"
    mode=1
   end /*when*/
   when mode=0 & ans=4 then mode=1
   when mode=0 & ans=5 then do
    call zocsend "y"
    mode=2
   end /*when*/

   when mode=1 & ans=0 then call zocsend " "
   when mode=1 & ans=1 then call zocsend "y"
   when mode=1 & ans=2 then call zocsend "n"
   when mode=1 & ans=3 then call zocsend "n"
   when mode=1 & ans=4 then do
    call zocsend "zn"
    done=1
   end /*when*/
   when mode=1 & ans=5 then do
    call zocsend "c"
    done=1
   end /*when*/
   when mode=1 & ans=6 then done=1
   when mode=1 & ans=7 then do
    if _sendwait("  psg","<Galactic Bank>")=640 then call _error "timeout"
    done=1
   end /*when*/
   when mode=1 & ans=8 then do
    call zocsend "  l1^M"
    done=1
   end /*when*/
   when mode=1 & ans=9 then do
    line=_lastline()
    parse var line "> " brand "-" typ " : " cmd . sect . stamp .
    if typ="CMD" then call _bust_tool cmd, sect, stamp, bname
   end /*when*/
   when mode=1 & ans=10 then call zocsend "Merchant Marines^My"
   when mode=1 & ans=11 then mflag=0
   when mode=1 & ans=12 then mflag=1
   when mode=1 & ans=13 & mflag & \pflag then pflag=1
   when mode=1 & ans=14 then do
    gamepwd=_askstr("what password for this game?",gamepwd,"c")
    call zocsend gamepwd||"^M"
   end /*when*/

   when mode=2 & ans=1 & \pset then do
    gamepwd=""
    call zocsend gamepwd||"^M"
    pset=1
   end /*when*/
   when mode=2 & ans=1 then call zocsend gamepwd||"^M"
   when mode=2 & ans=2 then do
    newname=uname
    if newname=bbsname then call zocsend "b"
    else call zocsend "n"||newname||"^M"
   end /*when*/
   when mode=2 & ans=3 then do
    newname=uname
    call zocsend newname||"^M"
   end /*when*/
   when mode=2 & ans=4 then call zocsend "y"
   when mode=2 & ans=5 then do
    if newname="" then newname=bbsname
    shipname="Merchant Marines"
    call zocsend shipname||"^My"
   end /*when*/
   when mode=2 & ans=6 then do
    planetname=newname||"'s home planet"
    call zocsend planetname||"^Mq"
   end /*when*/
   when mode=2 & ans=7 then do
    /* turn off animations */
       call zocsend "cn2qq"
    done=1
   end /*when*/
   when ans=640 then call _error "timeout"
   otherwise nop
  end /*select*/
 end /*do*/
return

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.3 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. (globals)

     _verbose=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _data. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. _msg _msg. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals reconnect scriptname lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _rseed v.7 **/
    _rseed: procedure expose (globals)
     if arg(1,"E") then width=min(max(arg(1),2),86400)
     else width=1000
     parse value time("L") with r1 ":" r2 ":" r3 "." r4
     r4=strip(left(r4,5))
     seed=r4||copies(0,5-length(r4))
     rslt=random(0, 99999, seed)//width
    return rslt

/** _get_log_info v.2 **/
    _get_log_info: procedure expose (globals)
     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_info"
     rslt=lpath||";"||ldefault
    return rslt

/** _domacro v.4 **/
    _domacro: procedure expose (globals)
     list=arg(1)
     n=_dwords(list,"}")
     a=""
     mux=0
     rslt=0
     leav=0
     do i=1 to n
      parse value _dword(list,i,"}") with c "{" s
      if c="s" then do
       s=_dword(s,mux+1,"|")
       if pos("_x",s)>0 then do
        s=zocstring("REMOVE",s,"_x")
        rslt=1
       end /*if*/
       if pos("_c",s)>0 then do
        s=zocstring("REMOVE",s,"_c")
        leav=1
       end /*if*/
      end /*if*/
      c=strip(lower(c))
      select
       when c="s" & a\="" then do
        call zocconnect a
        do while \_isonline(15)
         call zocdisconnect
         call zocconnect a
        end /*do*/
        call zocsend s
        mux=0
        a=""
       end /*when*/
       when c="s" then do
        call zocsend s
        mux=0
       end /*when*/
       when c="w" & a\="" then do
        call zocconnect a
        do while zocwait(s)=640
         call zocdisconnect
         call zocconnect a
        end /*do*/
        a=""
       end /*when*/
       when c="w" then if zocwait(s)=640 then call _error "timeout"
       when c="m" then do
        mux=zocwaitmux(s)
        if mux=640 then call _error "timeout"
       end /*when*/
       when c="b" then call zocbeep s
       when c="d" then call zocdisconnect
       when c="l" | c="c" then a=s
       when c="r" & s="" then nop
       when c="r" then do
        if _fileexists(s) then do; call zocdostring "^RUN="||s; exit; end
       end /*when*/
       otherwise nop
      end /*select*/
      if rslt then leave
      if leav then leave
     end /*do*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /*if*/
    exit

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if zocwait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=zocwait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _bust_tool v.1 **/
    _bust_tool: procedure expose (globals)
     cmd=arg(1)
     sector=arg(2)
     stamp=arg(3)
     fname=arg(4)
     note=arg(5)
     msg=cmd||" : "||_pad(sector,5,"R")||" : "||stamp
     if note\="" then msg=msg||" : "||note
     if _fileopenw(fname) then do
      call lineout fname, msg
      call _fileclose fname
     end /*if*/
     else call _error "unable to open file "||fname||"."
    return

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _isonline v.3 **/
    _isonline: procedure expose (globals)
     if zocgetinfo("ONLINE")="##YES##" then return 1
     if arg(1,"E") then t=arg(1)
     else call _error "missing parameter in _isonline"
     rslt=0
     o="##NO##"
     call time "R"
     do while time("E")<=t & o\="##YES##"
      o=zocgetinfo("ONLINE")
      if o="##YES##" then rslt=1
     end /*do*/
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _pad v.1 **/
    _pad: procedure expose (globals)
     rslt=arg(1)
     if arg(2,"E") then w=arg(2); else return rslt
     if \arg(3,"E") then m="L"; else m=arg(3)
     select
      when m="L" then rslt=left(rslt,w)
      when m="R" then rslt=reverse(left(reverse(rslt),w))
      when m="C" then rslt=center(rslt,w)
      otherwise       rslt=left(rslt,w)
     end /*select*/
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenw"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN WRITE"
      call stream arg(1), "C", "SEEK <0"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=_filenew(arg(1))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt
