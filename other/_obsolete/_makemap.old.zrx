/* REXX _makemap by the reverend (build 21) */
/* rev. 0 - initial release        */

call zoctimeout 60
call zocsynctime 500
call on halt name _halt

call _newline _ansi("b", "green")
parse value _getgameinfo() with spath ";" iname ";" game
parse value _get_log_info() with lpath ";" ldefault
parse value zocgetglobaloption("DownloadAltPath") with . '="' destfolder '"'
destfolder=destfolder||"\"

ns=_ini_askint("how many sectors in this game?", 5000, iname, game, "ns")
if ns<1 | ns>20000 then call _error "number out of range"
cname=_ini_askstr("enter cim filename (no extension):", "cim", iname, game, "cim")
if cname="" then call _error "script cancelled by user."

parsecim=0
pname=spath||"pmap.exe"
if _fileexists(pname) then do
 if _yesno("Would you like to run PMap after the map build?") then parsecim=1
end /* if */
else do
 pname=lpath||"pmap.exe"
 if _fileexists(pname) then do
  if _yesno("Would you like to run PMap after the map build?") then parsecim=1
 end /* if */
end /* else */

if parsecim then parseparams=strip(zocask("PMAP options?","/s+ /t+"))
if parseparams="##CANCEL##" then call _quit "script cancelled by user."

call _buildmap lpath, cname, ns

if parsecim then do
 fullout=destfolder||cname||".txt"
 if _fileexists(fullout) then call dosdel fullout
 call zocdostring '^SHELL='||pname||' '||lpath||cname||' '||parseparams||' >"'||fullout||'"'
 call _newline _ansi("b","yellow")
 call zocwriteln "<"||pname||' '||lpath||cname||' '||parseparams||' >"'||fullout||'">'
end /* if */

call _quit

exit

/*** THE REVEREND'S TW LIBRARY FOR ZOC/REXX ***/
/*    last updated: 13 Oct 2001, 14:20:39     */

/** _ansi v.1 **/
    _ansi:
     b=0
     if arg(1)="b" then do
      b=1
      c=arg(2)
     end /* if */
     else c=arg(1)
     select
      when c="gray" then ansi=30
      when c="red" then ansi=31
      when c="green" then ansi=32
      when c="yellow" then ansi=33
      when c="blue" then ansi=34
      when c="magenta" then ansi=35
      when c="cyan" then ansi=36
      when c="white" then ansi=37
      otherwise ansi=37
     end /* select */
     ansi="^[["||b||";"||ansi||"m"
    return ansi

/** _ini_askint v.2 **/
    _ini_askint:
     aipmt=arg(1)
     aidef=arg(2)
     aifname=arg(3)
     aisect=arg(4)
     aivar=arg(5)
     aimode=arg(6)
     aiflag=0

     if aisect="##EOF##" then aiflag=1
     if \aiflag then aiint=_getinivar(aifname, aisect, aivar)
     if aiint="##EOF##" then aiflag=1
     aiint=_stripint(aiint)
     if aiint="" then aiflag=1
     if aiflag then do
      if aipmt="##DEFAULT##" then aiint=aidef
      else aiint=_asknum(aipmt||" ("||aivar||"=)",aidef)
     end /* if */
     else if aimode="" then call zocwriteln "<< using "||aifname||" - "||aivar||"="||aiint||" >>"
     if aiint="##CANCEL##" then call _quit "script cancelled by user."
    return aiint

/** _ini_askstr v.3 **/
    _ini_askstr:
     aipmt=arg(1)
     aidef=arg(2)
     aifname=arg(3)
     aisect=arg(4)
     aivar=arg(5)
     aimode=arg(6)
     aiflag=0

     if aigame="##EOF##" then aiflag=1
     if \aiflag then aistr=_getinivar(aifname, aisect, aivar)
     if aistr="##EOF##" then aiflag=1
     if aiflag then do
      if aipmt="##DEFAULT##" then aistr=aidef
      else aistr=zocask(aipmt||" ("||aivar||"=)",aidef)
     end /* if */
     else do
      parse var aistr aitemp "^" .
      if length(aitemp)>17 then aitemp=left(aitemp,20)
      if aitemp\=aistr then aitemp=aitemp||"..."
      if aimode="" then call zocwriteln "<< using "||aifname||" - "||aivar||"="||aitemp||" >>"
     end /* else */
     if aistr="##CANCEL##" then call _quit "script cancelled by user."
    return aistr

/** _asknum v.3 **/
    _asknum:
     aninit=arg(2)
     andone=0
     do while \andone
      anans=zocask(arg(1), aninit)
      if anans="##CANCEL##" then andone=1
      else do
       anans=_stripint(anans)
       if anans\="" then andone=1
      end /* else */
      if \andone then aninit="please enter a number or ESC to cancel."
     end /* do */
     if lower(arg(3))="c" & anans="##CANCEL##" then call _quit "script cancelled by user."
    return anans

/** _beep v.1 **/
    _beep:
     bpfile=arg(1)
     if bpfile\="" then if \_fileexists(bpfile) then bpfile=""
     if bpfile="" then call zocwrite d2c(7)
     else do
      bptemp=zocgetprogramoption("SoundBellWav")
      parse var bptemp 'SoundBellWav="' bptemp '"'
      call zocsetglobaloption('SoundBellWav="'||bpfile||'"')
      call zocwrite d2c(7)
      call zocsetglobaloption('SoundBellWav="'||bptemp||'"')
     end /* else */
    return

/** _buildmap v.1 **/
    _buildmap:
     bmpath=arg(1)
     bmname=arg(2)
     bmns=arg(3)

     bmmapname=bmpath||bmname||".map"

     call _newline
     call zocwrite _ansi("b", "cyan")||"loading map data for "||bmmapname||":"

     bmsr.=""
     if _fileexists(bmpath||bmname||".srf") then do
      call _loadsectorcim bmpath||bmname||".srf"
      do bmi=1 to bmns
       bmsr.bmi=s.bmi
      end /* do */
      call _loadsectorcim bmpath||bmname||".sct"
     end /* if */
     else call _loadsectorcim bmpath||bmname||".sct"
 
     bmpr.=""
     if _fileexists(bmpath||bmname||"_ref.prt") then do
      call _loadportcim bmpath||bmname||"_ref.prt"
      do bmi=1 to bmns
       bmpr.bmi=p.bmi
      end /* do */
      call _loadportcim bmpath||bmname||".prt"
     end /* if */
     else call _loadportcim bmpath||bmname||".prt"
 
     bmreclen=22
 
     call _newline
     call zocwrite _ansi("b", "cyan")||"constructing map "||bmmapname||" "

     if \_filenew(bmmapname, "delete") then call _error "unable to create file:  "||bmmapname
 
     call charout bmmapname, d2c(bmreclen) /* record length   */
 
     bmmon=0
     do bmi=1 to bmns
 
      bmrec.=0
 
      /* set flags in record #1 */
      if s.bmi\="" then bmrec.1=32                        /* sector explored */
      if p.bmi\="" | bmpr.bmi\="" then bmrec.1=bmrec.1+16 /* port exists     */
      if p.bmi\="" then bmrec.1=bmrec.1+8                 /* port available  */
 
      /* set port type in record #1 */
      if p.bmi="" then bmportinfo=bmpr.bmi
      else bmportinfo=p.bmi
 
      /* set port info in records #2-10 */
      if bmportinfo\="" then do
       if substr(bmportinfo,3,1)="B" then bmrec.1=bmrec.1+1 /* buy ore */
       if substr(bmportinfo,2,1)="B" then bmrec.1=bmrec.1+2 /* buy org */
       if substr(bmportinfo,1,1)="B" then bmrec.1=bmrec.1+4 /* buy equ */
       parse var bmportinfo . ";" bmpq.1 "," bmpp.1 ";" bmpq.2 "," bmpp.2 ";" bmpq.3 "," bmpp.3
       do bmj=1 to 3
        bmk=2+(bmj-1)*3
        bmrec.bmk=abs(bmpq.bmj)//256
        bmk=bmk+1
        bmrec.bmk=abs(bmpq.bmj)%256
        bmk=bmk+1
        bmrec.bmk=bmpp.bmj
       end /* do */
      end /* else */
 
      /* set warp info in records #11-22 */
      if s.bmi="" then bmseclist=bmsr.bmi
      else bmseclist=s.bmi
      bmj=11
      do while bmseclist\="" & bmj<=22
       parse var bmseclist bmsector ";" bmseclist
       if bmsector\="" then do
        bmrec.bmj=bmsector//256
        bmj=bmj+1
        bmrec.bmj=bmsector%256
        bmj=bmj+1
       end /* if */
      end /* do */
 
      do bmj=1 to bmreclen
       call charout bmmapname, d2c(bmrec.bmj) 
      end /* do */
 
      bmmon=_spinner(bmmon,500)

     end /* do */
 
     call _fileclose bmmapname
 
     call zocwriteln

    return

/** _chooselist v.4 **/
    _chooselist:
     clprompt=arg(1)
     cllist=arg(2)
     if cllist="" then call _error "no list"
     cldelim=arg(3)
     if cldelim=""        then call _error "missing delimiter"
     if length(cldelim)>1 then call _error "long delimiter"
     clch.=""

     cldone=0
     cli=0
     cld=pos(cldelim, cllist)
     if cld=0 then do
      clch.1=cllist
      cldone=1
     end /* if */

     do while \cldone
      cli=cli+1
      clch.cli=left(cllist, cld-1)
      cllist=substr(cllist, cld+1)
      cld=pos(cldelim, cllist)
      if cld=0 then cldone=1
     end /* while */
     if length(cllist)>0 then do
      cli=cli+1
      clch.cli=cllist
     end /* if */
     if cli<7 then clmax=1
     if cli<5 then clmax=0
     if cli>=7 then clmax=(cli-5)%2+1

     cldone=0
     clpos=0
     do while \cldone
      if clpos<0 then clpos=0
      if clpos>clmax then clpos=clmax

      select
       when clpos=0 then do
        if clmax=0 then clans=zocrequest(clprompt, clch.1, clch.2, clch.3, clch.4)
        else clans=zocrequest(clprompt, clch.1, clch.2, clch.3, "next")
       end /* when */
       when clpos=clmax then do
        clp1=(clpos-1)*2+4
        clp2=clp1+1
        clp3=clp1+2
        clans=zocrequest(clprompt, "back", clch.clp1, clch.clp2, clch.clp3)
       end /* when */
       otherwise do
        clp1=(clpos-1)*2+4
        clp2=clp1+1
        clans=zocrequest(clprompt, "back", clch.clp1, clch.clp2, "next")
       end /* otherwise */
      end /* select */

      select
       when clans="next" then clpos=clpos+1
       when clans="back" then clpos=clpos-1
       when clans="##CANCEL##" then cldone=1
       when clans="" then nop
       otherwise cldone=1
      end /* select */

     end /* do */

     if lower(arg(4))="c" & clans="##CANCEL##" then call _quit "script cancelled by user."

    return clans

/** _error v.3 **/
    _error:
     if arg(1)="" then call zocterminate
     else errmsg="<< script error:  "||arg(1)||" >>"
     errmail="<< if this is a serious problem, email me at: tw.the_reverend@excite.com >> "

     eline=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     if length(eline)>0 then call zocwriteln
     call zocwriteln "^[[1;31m"||errmsg||"^[[0;35m"
     if arg(1)\="timeout" then call zocwriteln "^[[1;33m"||errmail||"^[[0;35m"
     if length(eline)>0 then call zocwrite eline
     call _beep "error.wav"
     exit
    return

/** _fileclose v.1 **/
    _fileclose:
     call stream arg(1), "C", "CLOSE"
    return

/** _fileeof v.1 **/
    _fileeof:
     if stream(arg(1), "S")="READY" then feofr=0
     else feofr=1
    return feofr

/** _fileexists v.1 **/
    _fileexists:
     if stream(arg(1), "C", "QUERY EXISTS")="" then fer=0
     else fer=1
    return fer

/** _filenew v.1 **/
    _filenew:
     fnr=1
     fnname=arg(1)
     if fnname="" then call _error "no filename"
     if \_fileexists(fnname) then call stream fnname, "C", "OPEN WRITE"
     else do
      if lower(arg(2))="delete" then do
       call dosdel fnname
       if \_fileexists(fnname) then call stream fnname, "C", "OPEN WRITE"
       else fnr=0
      end /* if */
      else fnr=0
     end /* else */
    return fnr

/** _fileopenr v.1 **/
    _fileopenr:
     for=1
     foname=arg(1)
     if foname="" then call _error "no filename"
     for=_fileexists(foname)
     if for then do
      call stream foname, "C", "OPEN READ"
      for=\_fileeof(foname)
      if \for then call _fileclose foname
     end /* if */
    return for

/** _fileopenw v.1 **/
    _fileopenw:
     for=1
     foname=arg(1)
     if foname="" then call _error "no filename"
     for=_fileexists(foname)
     if for then do
      call stream foname, "C", "OPEN WRITE"
      call stream foname, "C", "SEEK <0"
     end /* if */
     else for=_filenew(foname)
    return for

/** _getgameinfo v.2 **/
    _getgameinfo:
     parse value zocgetglobaloption("ScriptPath") with . '="' ggpath '"'
     ggpath=ggpath||"\"
     ggini=ggpath||"script.ini"
 
     parse value zocgetglobaloption("WindowTitle") with . '="' gggame '"'
     if gggame="" | gggame="%ZOCORHOST% %OPTIONS%" then do
      gglist=_getiniheadings(ggini)
      if gglist="##EOF##" then gggame="##EOF##"
      else gggame=_chooselist("select a game:", gglist, ";", "c")
     end /* do */

     call zocwriteln "<< using "||ggini||" - ["||gggame||"] >>"

     ggr=ggpath||";"||ggini||";"||gggame
    return ggr

/** _getiniheadings v.2 **/
    _getiniheadings:
     ininame=arg(1)
     if ininame="" then call _error "no filename"
     if stream(ininame, "C", "QUERY EXISTS")="" then inilist="##EOF##"
     else do
      call stream ininame, "C", "OPEN READ"
 
      inilist=""
      inieof=0
      if stream(ininame, "S")\="READY" then inieof=1
 
      do while \inieof
       iniline=linein(ininame)
       if left(iniline,1)=="[" then do
        if inilist="" then inilist=substr(iniline,2,length(iniline)-2)
        else inilist=inilist||";"||substr(iniline,2,length(iniline)-2)
       end /* if */
       if stream(ininame, "S")\="READY" then inieof=1
      end /* do */
 
      if length(inilist)=0 then inilist="##EOF##"
      call stream ininame, "C", "CLOSE"
     end /* else */
    return inilist

/** _getinivar v.1 **/
    _getinivar:
     ininame=arg(1)
     inihead=arg(2)
     inivar=arg(3)

     if ininame="" then call _error "no filename"
     if inihead="" then call _error "no heading"
     if inivar="" then call _error "no variable"

     if stream(ininame, "C", "QUERY EXISTS")="" then inival="##EOF##"
     else do
      call stream ininame, "C", "OPEN READ"
 
      inidone=0
      inieof=0
      if stream(ininame, "S")\="READY" then inieof=1
 
      do while \(inidone | inieof)
       iniline=linein(ininame)
       if left(iniline,1)=="[" then do
        if substr(iniline,2,length(iniline)-2)==inihead then inidone=1
       end /* if */
       if stream(ininame, "S")\="READY" then inieof=1
      end /* do */
 
      inidone=0
 
      do while \(inidone | inieof)
       iniline=linein(ininame)
       if left(iniline,1)="[" then inieof=1
       inieq=pos("=",iniline)
       if inieq>0 then do
        if left(iniline,inieq-1)==inivar then inidone=1
       end /* if */
       if stream(ininame, "S")\="READY" then inieof=1
      end /* do */
 
      call stream ininame, "C", "CLOSE"
 
      if inieof then inival="##EOF##"
      else inival=substr(iniline,inieq+1)
     end /* else */

    return inival

/** _get_log_info v.1 **/
    _get_log_info:
     parse value zocgetoption("CaptDefaultName") with . '="' gldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' glpath '"'
     glpath=glpath||"\"
     glr=glpath||";"||gldefault
    return glr

/** _halt v.1 **/
    _halt:
     call zocwriteln
     call zocwriteln "^[[1;33m<< script aborted by user. >>^[[0;35m "
     exit
    return

/** _in v.1 **/
    _in:
     if length(arg(1))=0 then ir=0
     else do
      if verify(arg(1),arg(2))=0 then ir=1
      else ir=0
     end /* else */
    return ir

/** _instr v.2 **/
    _instr:
     ifind=arg(1)
     istr=arg(2)
     if lower(arg(3))\="cs" then do
      ifind=lower(ifind)
      istr=lower(istr)
     end /* if */
     if pos(ifind,istr)>0 then ir=1
     else ir=0
    return ir

/** _loadportcim v.3 **/
    _loadportcim:
     lcname=arg(1)
     if p.1="P.1" then p.=""

     call _newline
     call zocwrite _ansi("b", "cyan")||"reading "||lcname||" "
     if _fileopenr(lcname) then do

      lceof=_fileeof(lcname)

      p.=""
      lcmon=0
      do while \lceof
  
       lcline=strip(linein(lcname))
       parse var lcline lcrow " " lcline
       lcline=" "||lcline
       if lcline\="" & lcrow\="" then do

        lcneg1=0
        lcneg2=0
        lcneg3=0
        lcp1=pos("%",lcline)
        lcp2=pos("%",substr(lcline,lcp1+1))+lcp1
        lcp3=pos("%",substr(lcline,lcp2+1))+lcp2
        if pos("-",substr(lcline,1,3))>0 then lcneg1=1
        if pos("-",substr(lcline,lcp1+1,3))>0 then lcneg2=1
        if pos("-",substr(lcline,lcp2+1,3))>0 then lcneg3=1
  
        if lcneg1 then p.lcrow="B"
        else p.lcrow="S"
        if lcneg2 then p.lcrow=p.lcrow||"B"
        else p.lcrow=p.lcrow||"S"
        if lcneg3 then p.lcrow=p.lcrow||"B"
        else p.lcrow=p.lcrow||"S"
  
        lctemp=_stripint(substr(lcline,3,lcp1-7))
        if lcneg1 then lctemp=-lctemp
        p.lcrow=p.lcrow||";"||lctemp||","||_stripint(substr(lcline,lcp1-4,4))
  
        lctemp=_stripint(substr(lcline,lcp1+3,lcp2-lcp1-7))
        if lcneg2 then lctemp=-lctemp
        p.lcrow=p.lcrow||";"||lctemp||","||_stripint(substr(lcline,lcp2-4,4))
  
        lctemp=_stripint(substr(lcline,lcp2+3,lcp3-lcp2-7))
        if lcneg3 then lctemp=-lctemp
        p.lcrow=p.lcrow||";"||lctemp||","||_stripint(substr(lcline,lcp3-4,4))
  
        lcmon=_spinner(lcmon,500)
       end /* if */
  
       lceof=_fileeof(lcname)
  
      end /* do */
  
      call _fileclose lcname

     end /* if */
     else call zocwrite "x"

    return

/** _loadsectorcim v.3 **/
    _loadsectorcim:
     lcname=arg(1)
     if s.1="S.1" then s.=""

     call _newline
     call zocwrite _ansi("b", "cyan")||"reading "||lcname||" "
     if _fileopenr(lcname) then do

      lceof=_fileeof(lcname)

      s.=""
      lcmon=0
      do while \lceof
  
       lcline=linein(lcname)
       parse var lcline lcrow lcline
       lcrow=strip(lcrow)
       if lcline\="" & lcrow\="" then do

        parse var lcline s.lcrow lcline
        s.lcrow=_stripint(s.lcrow)
  
        do while lcline\=""
         parse var lcline lctemp lcline
         lctemp=_stripint(lctemp)
         s.lcrow=s.lcrow||";"||lctemp
        end /* do */
  
        lcmon=_spinner(lcmon,500)
       end /* if */
  
       lceof=_fileeof(lcname)
  
      end /* do */
  
      call _fileclose lcname

     end /* if */
     else call zocwrite "x"

    return

/** _newline v.1 **/
    _newline:
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _quit v.3 **/
    _quit:
     if arg(1)=="" then qmsg="<< script ended. >>"
     if arg(1)="nocopy" then qmsg="<< script ended. >>"
     else qmsg="<< script ended:  "||arg(1)||" >>"
     qline=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     if length(qline)>0 then call zocwriteln
     call zocwriteln "^[[1;32m"||qmsg||"^[[0;35m"
     if length(qline)>0 & arg(1)\="nocopy" then call zocwrite qline
     if arg(1)="script cancelled by user." then call _beep "cancel.wav"
     else call _beep "quit.wav"
     exit
    return 1

/** _spinner v.1 **/
    _spinner:
     spincount=arg(1)
     if arg(2)="" then spinwidth=50
     else spinwidth=arg(2)
     select
      when spincount=0 then call zocwrite "-"
      when spincount=spinwidth then call zocwrite d2c(27)||"[1D\"
      when spincount=(spinwidth*2) then call zocwrite d2c(27)||"[1D|"
      when spincount=(spinwidth*3) then call zocwrite d2c(27)||"[1D/"
      when spincount=(spinwidth*4) then do
       call zocwrite d2c(27)||"[1D-"
       spincount=0
      end /* when */
      otherwise nop
     end /* select */
     spincount=spincount+1
    return spincount

/** _stripint v.2 **/
    _stripint:
     stint=""
     sttemp=strip(arg(1))
     if bdflag=1 then call _error
     do sti=1 to length(sttemp)
      stchar=substr(sttemp,sti,1)
      if length(stint)=0 then do
       if verify(stchar,"1234567890-")=0 then stint=stint||stchar
      end /* if */
      else if verify(stchar,"1234567890")=0 then stint=stint||stchar
     end /* do */
     if \datatype(stint,"W") then stint=""
    return stint

/** _yesno v.2 **/
    _yesno:
     select
      when arg(2)="yn" then yn=zocrequest(arg(1)||" (ESC=no)", "yes", "no")
      otherwise yn=zocrequest(arg(1), "yes", "no", "cancel")
     end /* select */
     select
      when yn="cancel" then call _quit "script cancelled by user."
      when yn="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user."
      when yn="yes" then yn=1
      otherwise yn=0
     end /* select */
    return yn

