/* REXX _cim.zrx by the reverend (build 85)                                   */
/*-       built by rev-builder version 1.0 on 20 May 2002 at 12:10:59        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2001 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-            http://thereverend.coastgames.com/rev-license.html            -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0  - initial release                                                  */
/* rev. 1  - updated error response                                           */
/* rev. 2  - added automatic cimparse                                         */
/* rev. 3  - library update                                                   */
/* rev. 4  - command prompt no longer required (run anywhere)                 */
/* rev. 5  - improved ini handling                                            */
/* rev. 6  - added partial options                                            */
/* rev. 7  - library update                                                   */
/* rev. 8  - now uses program variable for destination folder                 */
/* rev. 9  - updated error handling; now uses DownloadAltPath                 */
/* rev. 10 - major enhancements; new data tracking; new PMAP parser           */
/* rev. 11 - now runs makemap whether you pick PMAP or not                    */
/* rev. 12 - now uses PMAP2 parser; zoc 4.04 compatible                       */
/* rev. 13 - if you start at the command prompt, it will ask to refresh figs  */

call zoctimeout 60
call zocsynctime 1500
globals=_setglobals()
call on halt name _halt

cp=_pcheck("Command [")

call _newline _ansi("bt;fgr")
parse value _getgameinfo() with spath ";" iname ";" game
parse value _get_log_info() with lpath ";" ldefault
parse value zocgetglobaloption("DownloadAltPath") with . '="' destfolder '"'
/* destfolder=destfolder||"\" */

ns=_ini_askint("how many sectors in this game?", 5000, iname, game, "ns")
call zoctimeout ns%10

alpha=_ini_askint("##DEFAULT##", 0, iname, game, "alpha")
rylos=_ini_askint("##DEFAULT##", 0, iname, game, "rylos")
sd=_ini_askint("##DEFAULT##", 0, iname, game, "sd")
if ns<1 | ns>20000 then call _error "number out of range"
fname=_ini_askstr("enter cim filename (no extension):", "cim", iname, game, "cim")
if fname="" then call _error "script cancelled by user."

parser=1
select
 when _fileexists(spath||"pmap2a.exe") then pname=spath||"pmap2a.exe"
 when _fileexists(lpath||"pmap2a.exe") then pname=lpath||"pmap2a.exe"
 when _fileexists(spath||"pmap2.exe") then pname=spath||"pmap2.exe"
 when _fileexists(lpath||"pmap2.exe") then pname=lpath||"pmap2.exe"
 otherwise parser=0
end /* if */

if parser then menu="ports;sectors;both;PMAP only"
else menu="ports;sectors;both"
ans=_chooselist("which parts of the cim?", menu, ";", "c")
select
 when ans="ports" then tasks="portcim"
 when ans="sectors" then tasks="sectorcim"
 when ans="both" then tasks="portcim;sectorcim"
 when ans="PMAP only" then tasks=""
end /* select */

if parser then do
 parseparams='"/p:'||destfolder||'"'
 parseparams=parseparams||' "/g:'||lpath||fname||'" /n:'||ns
 if alpha\="" & alpha\=0 then parseparams=parseparams||" /al:"||alpha
 if rylos\="" & rylos\=0 then parseparams=parseparams||" /ry:"||rylos
 if sd\=""    & sd\=0    then parseparams=parseparams||" /sd:"||sd
 /*
 menu="bubble report;oneway report;port pair report;distance report;special port report;"
 menu=menu||"sector dump report;notes report;secludeds report"
 default="1;1;1;1;1;1;1;0"
 */
 menu="bubble report;secludeds report"
 default="1;0"
 plist=_mrequestlist("choose options:",menu,";","c",default)
 if \_dword(plist,1,";") then parseparams=parseparams||" /b-"
 if _dword(plist,2,";") then parseparams=parseparams||" /s+"
end /* if */

if cp then do
 if _yesno("refresh fig and void lists?") then do
  call _getvoids lpath||fname||".vod"
  call _getfigs lpath||"figs.txt" /* #BD# */
  call GetLimpets /* #BD# */
 end /* if */
end /* if */

/* log cim */
if tasks\="" then call _logcim lpath, fname, tasks, ldefault

/* parse cim */
if parser then do
  call _newline _ansi("bt;fwh")
  call zocwriteln '"'||pname||'" '||parseparams
  call zocwriteln
  call zocwrite "parsing data ... "
  code=zocexec('"'||pname||'" '||parseparams,0)
  if code=0 then call zocwriteln _ansi("bt;fgr")||"SUCCESS!"
  else call _error "PMAP2 errorlevel "||code
end /* if */

call zocshell "copy " lpath||fname||".sct " lpath||"cimsrf.txt"
call zocshell "copy " lpath||fname||".prt " lpath||"cimprf.txt"
call zocshell "copy " lpath||fname||".vod " lpath||"cimvod.txt"

call _quit "nocopy"

exit

/* _halt v.1 */

_halt:
 call zocsend "q"
 if zocgetinfo("VERSION")>=4.03 then call zoclogging 0, 1
 else call zoclogging 0
 call zoclogname ldefault
 if zocgetinfo("VERSION")>=4.03 then call zoclogging 1, 1
 else call zoclogging 1
 call zocwriteln
 call zocwriteln "^[[1;33m<< script aborted by user. >>^[[0;35m "
 exit
return

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.2 **/
    _setglobals: procedure expose (globals)
     rslt="_g. _s. _p. _d. _v. _f. _m. _q. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _od. _sv. _pv. _bust. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. "
     rslt=rslt||"globals verbose reconnect scriptname "
     if arg(1,"E") then rslt=rslt||arg(1)
     rslt=space(rslt)
    return rslt

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /* do */
    return rslt

/** _newline v.2 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln arg(1)
     else call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /* select */
     end /* do */
     rslt="^[["||rslt||"m"
    return rslt

/** _getgameinfo v.5 **/
    _getgameinfo: procedure expose (globals)
     spath=_get_script_path()
     base=spath||"script.ini"
    
     if arg(1,"E") then fname=arg(1)
     else fname=base
    
     parse value zocgetglobaloption("WindowTitle") with . '="' game '"'
     if fname\=base | game="" | game="%ZOCORHOST% %OPTIONS%" then do
      list=_ini_getheadings(fname)
      if list="##EOF##" then game="##EOF##"
      else do
       templist=""
       do i=1 to _dwords(list,";")
        temp=_dword(list,i,";")
        if left(temp,1)\="*" then do
         if templist="" then templist=temp
         else templist=templist||";"||temp
        end /* if */
       end /* do */
       list=templist
       game=_drequestlist("select a game:", list, ";", "c")
      end /* else */
     end /* do */
    
     call zocwrite _ansi("bt;fgr")||"< using "
     if length(fname)>17 then call zocwrite "..."
     call zocwriteln right(fname,min(length(fname),17))||" - ["||game||"] >"
    
     rslt=spath||";"||fname||";"||game
    return rslt

/** _get_log_info v.2 **/
    _get_log_info: procedure expose (globals)
     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_info"
     rslt=lpath||";"||ldefault
    return rslt

/** _ini_askint v.5 **/
    _ini_askint: procedure expose (globals)
     if \arg(1,"E") then msg="enter an integer"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askint"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if _stripint(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=_stripint(default)
      when rslt="##EOF##"                     then rslt=_askint(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then rslt=_stripint(rslt)
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwriteln right(fname,min(length(fname),17))||" - "||key||"="||rslt||" >"
       rslt=_stripint(rslt)
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error"
     if arg(1,"E") then call zocwrite ": "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
     if reconnect=1 & arg(1)="timeout" then do
      /* call zocdisconnect */
      call zocwriteln _ansi("bt;fwh")||"< ATTEMPTING TO RECONNECT >"
      call zocdostring "^RUN=_connect.zrx sn="||scriptname
     end /* if */
    exit

/** _ini_askstr v.5 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a number"
     else msg=arg(1)
     do i=2 to 5
      if \arg(i,"E") then call _error "missing parameter in _ini_askstr"
     end /*do*/
     default=arg(2)
     fname=arg(3)
     section=arg(4)
     key=arg(5)
     mode=lower(arg(6))
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini_read(fname, section, key)
     select
      when rslt="##EOF##" & msg="##DEFAULT##" then rslt=default
      when rslt="##EOF##"                     then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      when mode="quiet"                       then nop
      when mode=""                            then do
       call zocwrite _ansi("bt;fgr")||"< using "
       if length(fname)>17 then call zocwrite "..."
       call zocwrite right(fname,min(length(fname),17))||" - "
       call zocwrite key||"="||left(translate(rslt,"~","^"),min(length(rslt),25))
       if length(rslt)>25 then call zocwrite "..."
       call zocwriteln " >"
      end /*when*/
      otherwise nop
     end /*select*/
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
     else rslt=1
    return rslt

/** _chooselist v.6 **/
    _chooselist: procedure expose (globals)
     prompt=arg(1)
     list=arg(2)
     if list="" then call _error "no list"
     delim=arg(3)
     if delim="" then delim=" "
     if length(delim)>1 then call _error "long delimiter"
    
     ch.=""
     i=_dwords(list,delim)
     do j=1 to i
      ch.j=_dword(list,j,delim)
     end /* do */
    
     if i<7 then max=1
     if i<5 then max=0
     if i>=7 then max=(i-5)%2+1
    
     done=0
     loc=0
     do while \done
      if loc<0 then loc=0
      if loc>max then loc=max
    
      select
       when loc=0 then do
        if max=0 then rslt=zocrequest(prompt, ch.1, ch.2, ch.3, ch.4)
        else rslt=zocrequest(prompt, ch.1, ch.2, ch.3, "next")
       end /* when */
       when loc=max then do
        p1=(loc-1)*2+4
        p2=p1+1
        p3=p1+2
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, ch.p3)
       end /* when */
       otherwise do
        p1=(loc-1)*2+4
        p2=p1+1
        rslt=zocrequest(prompt, "back", ch.p1, ch.p2, "next")
       end /* otherwise */
      end /* select */
    
      select
       when rslt="next" then loc=loc+1
       when rslt="back" then loc=loc-1
       when rslt="##CANCEL##" then done=1
       when rslt="" then nop
       otherwise done=1
      end /* select */
    
     end /* do */
    
     if lower(arg(4))="c" & rslt="##CANCEL##" then call _quit "script cancelled by user."
    
    return rslt

/** _mrequestlist v.2 **/
    _mrequestlist: procedure expose (globals)
     msg=arg(1)
     list=arg(2)
     delim=arg(3)
     mode=arg(4)
     default=arg(5)
     yes="> "
     no="   "
     if list="" then call _error "empty list"
     if default="" then do
      rslt=0
      menu="   DONE"||delim||no||_dword(list,1,delim)
     end /* if */
     else do
      rslt=_dword(default,1,delim)
      if rslt then menu="   DONE"||delim||yes||_dword(list,1,delim)
      else menu="   DONE"||delim||no||_dword(list,1,delim)
     end /* else */
     if default\="" then count=min(_dwords(list,delim),_dwords(default,delim))
     else count=_dwords(list,delim)
     if count>1 then do
      do i=2 to count
       if default="" then flag=no
       else do
        if _dword(default,i,delim) then flag=yes
        else flag=no
       end /* else */
       menu=menu||delim||flag||_dword(list,i,delim)
       if default="" then rslt=rslt||delim||0
       else rslt=rslt||delim||_dword(default,i,delim)
      end /* do */
     end /* if */
     i=_drequestlisti(msg,menu,delim)
     do while i>1
      menu="   DONE"
      temp=""
      do j=1 to _dwords(list,delim)
       if j=(i-1) then do
        if _dword(rslt,j,delim) then do
         menu=menu||delim||no||_dword(list,j,delim)
         if temp="" then temp=0
         else temp=temp||delim||0
        end /* if */
        else do
         menu=menu||delim||yes||_dword(list,j,delim)
         if temp="" then temp=1
         else temp=temp||delim||1
        end /* else */
       end /* if */
       else do
        if temp="" then temp=_dword(rslt,j,delim)
        else temp=temp||delim||_dword(rslt,j,delim)
        if _dword(rslt,j,delim) then menu=menu||delim||yes||_dword(list,j,delim)
        else menu=menu||delim||no||_dword(list,j,delim)
       end /* else */
      end /* do */
      rslt=temp
      i=_drequestlisti(msg,menu,delim)
     end /* do */
     if lower(mode)="c" & i=0 then call _quit "script cancelled by user."
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user."
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user."
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _getvoids v.6 **/
    _getvoids: procedure expose (globals)
     fname=arg(1)
     mode=arg(2)
     _v.=0
     c=0
     if lower(mode)="file" then do
      if _fileopenr(fname) then do
       call zocwrite _ansi("bt;fye")
       mon=0
       do while \_fileeof(fname)
       
        /* BD: made it a text file */
        n=linein(fname)
       
        /*n=c2d(charin(fname))
        n=n+c2d(charin(fname))*256 */
        _v.n=1
        c=c+1
        mon=_spinner(mon,10)
       end /* do */
       call _fileclose(fname)
       call zocwrite " ("||c||") "||_ansi("dl;fmg")
      end /* if */
     end /* if */
     else do
      buflen=16*1024
      call zocreceivebuf buflen
      call zocsend "cx" /* BD: split the Q till after the wait so its ALL KEYS friendly */
      if zocwait("<List Avoided Sectors>")=640 then call _error "timeout"
      if zocwait("Computer command [")=640 then call _error "timeout"

      call zocsend "q"
      if zocwaitmux("Command [", "Citadel command")=640 then call _error "timeout"
      buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
      if length(buff)=buflen then call _error "buffer overflow"
      call zocwrite _ansi("bt;fye")
    
      s=0
      i=0
      j=0
      i=pos("<List Avoided Sectors>",buff)
      i=pos(d2c(13),buff,i)+1
      i=pos(d2c(13),buff,i)+1
      j=pos(d2c(13),buff,i)
      mon=0
      do while j>0
       line=space(substr(buff,i,j-i),1)
       if line="" then leave
       if line="No Sectors are currently being avoided." then leave
       do k=1 to words(line)
        s1=_stripint(word(line,k))
        if s1\="" then do
         _v.s1=1
         c=c+1
         s=max(s,s1)
        end /* if */
       end /* do */
       i=j+1
       j=pos(d2c(13),buff,i)
       mon=_spinner(mon,10)
      end /* do */
      call zocwrite " ("||c||") "||_ansi("dl;fmg")
      if fname\="" then do
       if _fileexists(fname) then call dosdel fname
       if _filenew(fname) then do
        call zocwrite _ansi("bt;fye")
        mon=0
        do i=1 to s
         if _v.i then do
          /* BD: made it a text file */
         call lineout fname, i
         
         /* call charout fname, d2c(i//256)
          call charout fname, d2c(i%256) */
          mon=_spinner(mon,10)
         end /* if */
        end /* do */
        call _fileclose(fname)
        call zocwriteln " "||_ansi("dl;fmg")
       end /* if */
      end /* if */
     end /* else */
    
    return

/** _getfigs v.9 **/
    _getfigs: procedure expose (globals)
     fname=arg(1)
     mode=arg(2)
     _f.=0
     c=0
     if lower(mode)="file" then do
      if _fileopenr(fname) then do
       call zocwrite _ansi("bt;fye")
       mon=0
       do while \_fileeof(fname)
        n=c2d(charin(fname))
        n=n+c2d(charin(fname))*256
        _f.n=1
        c=c+1
        mon=_spinner(mon,100)
       end /* do */
       call _fileclose(fname)
       call zocwrite " ("||c||") "||_ansi("dl;fmg")
      end /* if */
     end /* if */
     else do
      buflen=1024*1024
      call zocreceivebuf buflen
      call zocsend "g"
      if zocwait("Deployed  Fighter  Scan")=640 then call _error "timeout"
      ans=0
      do while ans=0
       ans=zocwaitmux("r","(?=Help)")
      end /* do */
      if ans=640 then call _error "timeout"
      buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
      if length(buff)=buflen then call _error "buffer overflow"
      call zocwrite _ansi("bt;fye")
    
      s=0
      i=0
      j=0
      i=pos(d2c(13),buff,pos("==",buff)+1)+1
      if i>1 then j=pos(d2c(13),buff,i)
      finish=pos("Total",buff,i)
      mon=0
      do while j>0 & j<finish
       line=strip(substr(buff,i,j-i))
       parse var line s1 . type .
       s1=_stripint(s1)
       if (type="Corp" | type="Personal") & s1\="" then do
        _f.s1=1
        c=c+1
        s=max(s,s1)
       end /* if */
       i=j+1
       j=pos(d2c(13),buff,i)
       mon=_spinner(mon,100)
      end /* do */
      call zocwrite " ("||c||") "||_ansi("dl;fmg")
      if fname\="" then do
       if _fileexists(fname) then call dosdel fname
       if _filenew(fname) then do
        call zocwrite _ansi("bt;fye")
        mon=0
        do i=1 to s
         if _f.i>0 then do
          call lineout fname, i

/*#BD#    call charout fname, d2c(i//256)
          call charout fname, d2c(i%256)
          
*/
          mon=_spinner(mon,100)
         end /* if */
        end /* do */
        call _fileclose(fname)

        call zocwriteln " "||_ansi("dl;fmg")
       end /* if */
      end /* if */
     end /* else */
    
    return

/** _logcim v.4 **/
    _logcim: procedure expose (globals)
    
     path=arg(1)
     fname=arg(2)
     tasks=arg(3)
     default=arg(4)
    
     if zocgetinfo("VERSION")>=4.03 then call zoclogging 0, 1
     else call zoclogging 0
     call zocsend "^^?"
     if zocwait("Interrogation Modes")=640 then call _error "timeout"
     if zocwait(":")=640 then call _error "timeout"
     call zocwriteln
     call zocrespond "[Pause]", " "
     call zoctimeout 60
    
     do while tasks\=""
    
      parse var tasks task ";" tasks
      select
       when task="portcim" then ext=".prt"
       when task="sectorcim" then ext=".sct"
       otherwise task=""
      end /* select */
    
      if task\="" then do
       if _fileexists(path||fname||ext) then call dosdel path||fname||ext
       call zoclogname fname||ext
       call zoclogging 1, 1
       call zoctimeout 3000
       select
        when task="portcim" then call zocsend "r"
        when task="sectorcim" then call zocsend "i"
        otherwise nop
       end /* select */
       if zocwait(":")=640 then call _error "timeout"
       call zoclogging 0, 1
      end /* if */
    
     end /* do */
    
     call zoctimeout 60
     call zocsend "q"
     if zocwait("ENDINTERROG")=640 then call _error "timeout"
     call zocrespond "[Pause]"
     call zoclogname default
     if zocgetinfo("VERSION")>=4.03 then call zoclogging 1, 1
     else call zoclogging 1
    
    return

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /* if */
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt

/** _get_script_path v.1 **/
    _get_script_path:
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _ini_getheadings v.5 **/
    _ini_getheadings: procedure expose (globals)
     if arg(1,"E") then fname=arg(1)
     else call _error "missing parameter in _ini_getheadings"
     if arg(2,"E") then delim=arg(2)
     else delim=";"
     list=""
     if _fileopenr(fname) then do
      do while \_fileeof(fname)
       line=strip(linein(fname))
       if left(line,1)="[" then do
        if list="" then list=strip(translate(line,"  ","[]"))
        else list=list||delim||strip(translate(line,"  ","[]"))
       end /* if */
      end /* do */
      call _fileclose fname
     end /* do */
     if list="" then list="##EOF##"
    return list

/** _drequestlist v.2 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|",arg(3)))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user."
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /* select */
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=space(translate(arg(1)," ","-0123456789"," "),0)
     rslt=space(translate(arg(1)," ",mask," "),0)
     if left(rslt,1)="-" then rslt="-"||space(translate(rslt," ","-"),0)
     else rslt=space(translate(rslt," ","-"),0)
     if \datatype(rslt,"W") then rslt=""
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /* do */
    
     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
    
     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & left(line,length(k)+1)=k||"=" then do
         v=strip(substr(line,length(k)+2))
         done=1
         found=1
        end /* when */
        otherwise nop
       end /* select */
      end /* do */
      call _fileclose fname 
      if \found then v="##EOF##"
     end /* if */
     else v="##EOF##"
    
    return v

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user."
    return rslt

/** _drequestlisti v.1 **/
    _drequestlisti: procedure expose (globals)
     do i=1 to 3
      if \arg(i,"E") then call _error "missing parameter in _drequestlisti"
     end /*do*/
     i=zocrequestlist(arg(1),translate(arg(2),"|",arg(3)))
     if i<0 & lower(arg(4))="c" then call _quit "script cancelled by user."
                                else rslt=i+1
    return rslt

/** _fileopenr v.3 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /* if */
     else rslt=0
    return rslt

/** _fileeof v.3 **/
    _fileeof: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileeof"
     if stream(arg(1), "S")="READY" then rslt=0
     else rslt=1
    return rslt

/** _spinner v.2 **/
    _spinner: procedure expose (globals)
     if arg(1,"E") then count=arg(1)
     else call _error "missing parameter in _spinner"
     if arg(2,"E") then width=arg(2)
     else width=50
     select
      when count=0         then call zocwrite "-"
      when count=width     then call zocwrite d2c(27)||"[1D\"
      when count=(width*2) then call zocwrite d2c(27)||"[1D|"
      when count=(width*3) then call zocwrite d2c(27)||"[1D/"
      when count=(width*4) then do
       call zocwrite d2c(27)||"[1D-"
       count=0
      end /* when */
      otherwise nop
     end /* select */
     count=count+1
    return count

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _filenew v.3 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=\_fileeof(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt


/** BD LIBS ##### */

GetLimpets: procedure
	l.=0

	call zocsend "K2"
	call zocwait "Deployed  Limpet  Scan"
	call zocwait "="
	call zocgetline
	i=0
	
	do while i<2
		i=zocwaitmux("Corporate","Personal","Total")
		if i<2 then do
			ln=zoclastline()
			parse var ln with " "sector number ownership
			l.sector=number
		end
	end
	
	/* OutToFile */
	call dosdel "LIMPET.TXT"
	CALL STREAM "LIMPET.TXT", "C", "OPEN WRITE"
	
	do i = 1 to 5000
		if l.i > 0 then call lineout "LIMPET.TXT", i
	end
	CALL STREAM "LIMPET.TXT", "C", "CLOSE"

return(0)



