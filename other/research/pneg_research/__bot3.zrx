/* REXX __bot3.zrx by the reverend (build 418)                                */
/*-       built by rev-builder version 1.2 on 23 Aug 2003 at 22:05:02        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ----------------------*/ _g.!sname="__bot3.zrx" /*---------------------- -*/
/*- --------------*/ _g.!sbuild=418; _g.!sdate="2003-08-23" /*-------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

globals=_setglobals()
call _timeout 300
call zocsynctime 500
call on halt name _halt

planet=2
port=7412
type=8
outfile="log\"||_g.!sname1||".txt"

if _fileopenw(outfile) then do
 call lineout outfile, "product success mcic calc_mcic percent game_percent offer puo cop co co1 co2 mid fo"
 call _fileclose outfile
end /*if*/

do mcic=20 to 65

 call zocsend "lctt29999999999^Mqq'fill "||planet||" ::^M"
 if zocwait("ready ::")=640 then call _error "timeout"

 call zocsend "'mcic "||port||" "||type||" 32700 -"||mcic+20||" -"||mcic+10||" -"||mcic||" ::^M"
 if zocwait("ready ::")=640 then call _error "timeout"

 do perc=0 to 100
  if perc<100 then p=perc+random(1,9)*.1; else p=100
  call zocsend "'onhand "||port||" 32700 "||trunc(p*327)||" "||trunc(p*327)||" "||trunc(p*327)||" ::^M"
  if zocwait("ready ::")=640 then call _error "timeout"
  ans=_negotiate(2,"1 2 3","0 0 0","command",mcic+20 mcic+10 mcic)
  if _fileopenw(outfile) then do
   call lineout outfile, "ore" _g.!success.1 mcic+20 _g.!mcic.1 p _g.!perc.1 _g.!offer.1 _g.!puo.1 _g.!cop.1 _g.!co.1 _g.!co1.1 _g.!co2.1 _g.!mid.1 _g.!fo.1
   call lineout outfile, "org" _g.!success.2 mcic+10 _g.!mcic.2 p _g.!perc.2 _g.!offer.2 _g.!puo.2 _g.!cop.2 _g.!co.2 _g.!co1.2 _g.!co2.2 _g.!mid.2 _g.!fo.2
   call lineout outfile, "equ" _g.!success.3 mcic _g.!mcic.3 p _g.!perc.3 _g.!offer.3 _g.!puo.3 _g.!cop.3 _g.!co.3 _g.!co1.3 _g.!co2.3 _g.!mid.3 _g.!fo.3
   call _fileclose outfile
  end /*if*/
 end /*do*/

end /*do*/

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.4 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. (globals)

     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _nwo. _nw. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. _msg _msg. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenw"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN WRITE"
      call stream arg(1), "C", "SEEK <0"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=_filenew(arg(1))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
    exit

/** _negotiate v.1 **/
    _negotiate: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _negotiate"; else planet=arg(1)
     if \arg(2,"E") then product_list="1 2 3"; else product_list=arg(2)
     if \arg(3,"E") then quantity_list="0 0 0"; else quantity_list=arg(3)
     if \arg(4,"E") then prompt=_synchronize(); else prompt=arg(4)
     if \arg(5,"E") then mcic_list="0 0 0"; else mcic_list=arg(5)

     /* get to the command prompt */
        select
         when prompt="command" then nop
         when prompt="planet" then do
          macro="l"||_get_planet_number(prompt)||"^M"
          call zocsend "q"
         end /*when*/
         when prompt="citadel" then do
          macro="l"||_get_planet_number(prompt)||"^Mc"
          call zocsend "qq"
         end /*when*/
         when prompt="computer" then do
          macro="c"
          call zocsend "q"
         end /*when*/
         when prompt="corporate" then do
          macro="t"
          call zocsend "q"
         end /*when*/
         when prompt="computer_cit" then do
          macro="l"||_get_planet_number(prompt)||"^Mcc"
          call zocsend "qqq"
         end /*when*/
         when prompt="corporate_cit" then do
          macro="l"||_get_planet_number(prompt)||"^Mcx"
          call zocsend "qqq"
         end /*when*/
         otherwise return 0
        end /*select*/

     /* get products and quantities */
        sell.=0
        quan.=0
        do i=1 to words(product_list)
         n=_list_select(lower(word(product_list,i)),"f;o;e;1;2;3","1;2;3;1;2;3")
         c=_stripint(word(quantity_list,i))
         m=word(mcic_list,i)
         if n\="" & c>=0 then do
          sell.n=1
          quan.n=c
          mcic.n=m
         end /*if*/
        end /*do*/

     call zocsend "pzn"
     ans=zocwaitmux("Do you want instructions (Y/N) [N]?","Captain! Are you sure","Enter your choice [T] ?")
     select
      when ans<2 then return 0
      when ans=2 then nop
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
     ans=zocwaitmux("(?=Help)? :","of max OnBoard")
     select
      when ans=0 then return 0
      when ans=1 then nop
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
     ans=zocwaitmux("%","Registry#")
     do while ans=0
      line=_lastline()
      parse var line pr 9 12 . . pc "%"
      n=_list_select(pr,"Fuel Ore;Organics;Equipmen","1;2;3")
      perc.n=strip(pc)
      ans=zocwaitmux("%","Registry#")
     end /*do*/
     if ans=640 then call _error "timeout"

     call zocsend planet||"^M"

     done=0
     pflag.=0
     success.=0
     _g.=-1

     do while \done
      ans=zocwaitmux("Fuel Ore do you want to sell [",,
                     "Organics do you want to sell [",,
                     "Equipment do you want to sell [",,
                     "Command [",,
                     "That planet is not in this sector.",,
                     "You don't own that planet!")
      line=_lastline()
      select
       when ans<=2 & \pflag.ans then do
        n=ans+1
        q=_grabit("]","s")
        if quan.n=0 then quan.n=q
        quan.n=min(quan.n,q)
        if sell.n then do
         call zocsend quan.n||"^M"
         if zocwait("Your offer [")=640 then call _error "timeout"
         offer=_stripint(_grabit("]"))
         select
    /*      when perc.n<=10 then do; call zocsend "^M"; success.n=1; end */
    /*      when n=1 then success.n=_sellhaggle2(offer) */
    /*      when n=2 then success.n=_sellhaggle2(offer) */
          when n=3 | n=2 | n=1 then do
           puo=trunc(offer/quan.n*1000)/1000-.001 /* 3 digit puo rounding fudge */
           if mcic.n=0 then mcic.n=_negotiate_get_mcic(word("ore org equ",n),perc.n,puo,"script\mcic.ini")
           cop=_negotiate_get_cop(word("ore org equ",n),mcic.n,"script\mcic.ini")
           co1=trunc(offer*(cop-word(".0015 .0015 .0018",n))) /* cop fudge factor .001 more equ fails .0015 OK */
           co=_trunc(co1,min(3-length(co1),0))
           call zocwrite _ansi("bt;fmg") mcic.n perc.n cop " "
    _g.!perc.n=perc.n; _g.!mcic.n=mcic.n; _g.!puo.n=puo; _g.!cop.n=cop; _g.!offer.n=offer; _g.!co.n=co1; _g.!co1.n=co; _g.!mid.n=0; _g.!fo.n=0
           call zocsend co||"^M"
           do FOREVER
            ans2=zocwaitmux("We'll buy them for",,
                            "Our final offer",,
                            "We're not interested.",,
                            "You have",,
                            "value your life!", "look, get lost...", "you make me sick.", "Get lost creep", "Thats insane!",,
                            "my time", "a real offer", "WHAT?!@!?", "short with you", "choke me up!")
            select
             when ans2=0 then do
              if zocwait("Your offer [")=640 then call _error "timeout"
              newoffer=_stripint(_grabit("]"))
              priceshift=newoffer-offer
              co=trunc(co-priceshift*0.60)
              offer=newoffer
              call zocsend co||"^M"
              _g.!co2.n=co
              _g.!fo.n=0
              _g.!mid.n=_g.!mid.n+1
             end /*when*/
             when ans2=1 then do
              if zocwait("Your offer [")=640 then call _error "timeout"
              newoffer=_stripint(_grabit("]"))
              priceshift=newoffer-offer
              select
               when mcic>75 then co=trunc(co-priceshift*3.0)
               when mcic>65 then co=trunc(co-priceshift*2.7)
               otherwise         co=trunc(co-priceshift*2.5)
              end /*select*/
              offer=newoffer
              call zocsend co||"^M"
              _g.!co2.n=co
              _g.!fo.n=1
             end /*when*/
             when ans2=2 then leave
             when ans2=3 then do; success.n=1; leave; end
             when ans2=640 then call _error "timeout"
             when ans2>3 then do; success.n=0; leave; end
             otherwise nop
            end /*select*/
           end /*while*/
          end /*when*/
          otherwise do; call zocsend "^M"; success.n=1; end
         end /*select*/
         _g.!success.n=success.n
        end /*if*/
        else call zocsend "0^M"
        pflag.ans=1
       end /*when*/
       when ans=3 then done=1
       when ans=4 then do
        call zocsend "q^M"
        if zocwait("Command [")=640 then call _error "timeout"
        success.n=0
       end /*when*/
       when ans=5 then do
        call zocsend "q^M"
        if zocwait("Command [")=640 then call _error "timeout"
        success.n=0
       end /*when*/
       when ans=640 then call _error "timeout"
       otherwise nop
      end /*select*/
     end /*do*/
    rslt=1
    do i=1 to words(product_list)
     n=word(product_list,i)
     rslt=min(rslt,success.n)
    end
    return rslt

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _synchronize v.5 **/
    _synchronize: procedure expose (globals)

     synchw=_synchronize_vars("w")
     synchr=_synchronize_vars("r")

     call zocsend "&&"
     ans=zocwaitmux("&&","Pausing is")
     select
      when ans=0 then return "unknown_text_entry"
      when ans=1 then nop
      when ans=640 then return "timeout"
      otherwise nop
     end /*select*/

     ans=zocwaitmux(synchw)
     select
      when ans=640 then rslt="timeout"
      when ans>0 then do
       if zocwait("Pausing is")=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=_dword(synchr,ans+1,";")

     select
      when rslt="computer" then do
       call zocsend "q"
       ans=zocwaitmux("Command [","Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=zocwaitmux("Command [","Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _get_planet_number v.2 **/
    _get_planet_number: procedure expose (globals)
     if arg(1,"E") then prompt=arg(1)
                   else prompt=_synchronize()
     select
      when prompt="citadel" then do
       if _sendwait("qd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("c","Citadel command (?=help)")=640 then call _error "timeout"
      end /*when*/
      when prompt="computer_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cc","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="corporate_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cx","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="planet" then do
       if _sendwait("d","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
      end /*when*/
      otherwise planet=0
     end /*select*/
    return planet

    /* _list_select v.1 */
    _list_select: procedure expose (globals)
     f=arg(1)
     a=arg(2)
     b=arg(3)
     if arg(4,"E") then d=arg(4)
                   else d=";"
     rslt=""
     do i=1 to _dwords(a,d)
      if f=_dword(a,i,d) then do; rslt=_dword(b,i,d); leave; end
     end /*do*/
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if zocwait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _negotiate_get_mcic v.1 **/
    _negotiate_get_mcic: procedure expose (globals)

     product=arg(1)
     percent=arg(2)
     perunitoffer=arg(3)
     ini=arg(4)

     do unitl mcic_list\="##EOF##"
      mcic_list=_ini_read(ini, product, "mcic")
     end /*do*/
     n=words(mcic_list)

     select
      when percent>100 then mcic=word(mcic_list,1)
      when percent=100 then do
       do until puo_list\="##EOF##"
        puo_list=_ini_read(ini, product, "puo.100")
       end /*do*/
       mcic=word(mcic_list,n)
       do i=1 to n
        if perunitoffer<=word(puo_list,i) then do
         mcic=word(mcic_list,i)
         leave
        end /*if*/
       end /*do*/
      end /*when*/

      when percent>0 then do
       do until puo_list1\="##EOF##"
        puo_list1=_ini_read(ini, product, "puo."||percent+1)
       end /*do*/
       do until puo_list2\="##EOF##"
        puo_list2=_ini_read(ini, product, "puo."||percent)
       end /*do*/
       if perunitoffer<word(puo_list2,1) then mcic=word(mcic_list,1)
       else do
        mcic=word(mcic_list,n)
        do i=1 to n
    /*     if perunitoffer<word(puo_list1,i) & perunitoffer>=word(puo_list2,i) then do */
         if perunitoffer<=word(puo_list1,i) then do
          mcic=word(mcic_list,i)
          leave
         end /*if*/
        end /*do*/
       end /*else*/
      end /*when*/

      otherwise mcic=word(mcic_list,1)
     end /*select*/

    return mcic

/** _negotiate_get_cop v.1 **/
    _negotiate_get_cop: procedure expose (globals)

     product=arg(1)
     mcic=arg(2)
     ini=arg(3)

     do until mcic_list\="##EOF##"
      mcic_list=_ini_read(ini, product, "mcic")
     end /*do*/
     do until cop_list\="##EOF##"
      cop_list=_ini_read(ini, product, "cop")
     end /*do*/

     cop=1
     do i=1 to words(mcic_list)
      if mcic=word(mcic_list,i) then do; cop=word(cop_list,i); leave; end
     end /*do*/

    return cop

/** _trunc v.2 **/
    _trunc: procedure expose (globals)
     if arg(1,"E") then num=arg(1); else call _error "missing parameter in _trunc"
     if arg(2,"E") then digits=arg(2); else digits=0
     num=num*(10**digits)
     num=trunc(num)
     num=num/(10**digits)
    return num

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _synchronize_vars v.1 **/
    _synchronize_vars: procedure expose (globals)
     select
      when arg(1)="w" then rslt="Pausing",
                              ||"|Command [",
                              ||"|Citadel command",
                              ||"|Planet command",
                              ||"|<StarDock>",
                              ||"|ship to sell",
                              ||"|Still interested ?",
                              ||"|wish to buy? (A,B,C,Q,?)",
                              ||"|<Galactic Bank>",
                              ||"|<Hardware Emporium>",
                              ||"|<Shipyards>",
                              ||"|<Tavern>",
                              ||"|Enter your choice [T] ?",
                              ||"|do you want to sell [",
                              ||"|do you want to buy [",
                              ||"|Computer command",
                              ||"|Corporate command",
                              ||"|Colonists? [T]",
                              ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]",
                              ||"|`",
                              ||"|F: ",
                              ||"|'",
                              ||"|S: ",
                              ||"|M: ",
                              ||"|P: "
      when arg(1)="r" then rslt="unknown;command;citadel;planet;stardock;ship_sell;ship_sell_interested;class_0",
                             ||";bank;hardware;shipyards;tavern;port_menu;port_haggle;port_haggle;computer",
                             ||";corporate;terra;stop_in_this_sector?;fedcom_text_entry_1;fedcom_text_entry_2",
                             ||";subspace_text_entry_1;subspace_text_entry_2;mail_text_entry;private_text_entry",
                             ||";corporate_cit;computer_cit;unknown_text_entry" /* <-- these unmatched in the wait string above */
      when arg(1)="command" then rslt=" ; ;qq;q;q;qqq;nqq;q;qq;qq;qq;qq;q;0^Mz0^Mz0^M;0^Mz0^Mz0^M;q;q;q;y;^H;^M;^H;^M;^M;^M;qqq;qqq; "
      when arg(1)="computer" then rslt=" ;c;c;qc;qc;qqqc;nqqc;qc;qqc;qqc;qqc;qqc;qc;0^Mz0^Mz0^Mc;0^Mz0^Mz0^Mc; ;qc;qc;yc;^Hc;^Mc;^Hc;^Mc;^Mc;^Mc;qc;qc; "
      otherwise call _error "unknown argument in _synchronize_vars"
     end /*select*/
    return rslt

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=zocwait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))

     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & _dwords(line,"=")>1 then do
         if k=strip(_dword(line,1,"=")) then do
          v=strip(_dword(line,2,"="))
          v=_ini_format_value(v)
          done=1
          found=1
         end /*if*/
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"

    return v

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenr"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN READ"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=0
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     rslt=\lines(arg(1))
    return rslt

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt
