/* REXX __bot2_f1.zrx by the reverend (build 9)                               */
/*-       built by rev-builder version 1.2 on 19 Aug 2003 at 21:57:24        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- --------------------*/ _g.!sname="__bot2_f1.zrx" /*--------------------- -*/
/*- ---------------*/ _g.!sbuild=9; _g.!sdate="2003-08-19" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/

planet=8
port=13510
type=6

globals=_setglobals()
call _timeout 120
call zocsynctime 500
call on halt name _halt

outfile="log\"||_g.!sname1||".txt"

do i=50 to 55 /*55*/

 call zocsend "'mcic "||port||" "||type||" 32700 -"||i||" 40 40 ::^M"
 if zocwait("ready ::")=640 then call _error "timeout"

 call zocsend "'fill "||planet||" ::^M"
 if zocwait("ready ::")=640 then call _error "timeout"

 init=0
 do j=0 to 99
  hagc=0
  call zocsend "'onhand "||port||" 32700 "||32700-j*327||" 32700 32700 ::^M"
  if zocwait("ready ::")=640 then call _error "timeout"
  call zocsend "pn"||planet||"^M"
  if zocwait("Trading %")=640 then call _error "timeout"
  line1=_grabit("%","s")
  line2=_grabit("%","s")
  line3=_grabit("%","s")
  parse var line1 . . . oh.1 pc.1 .
  parse var line2 . . oh.2 pc.2 .
  parse var line3 . . oh.3 pc.3 .
  call zocsend "327^M"
  if zocwait("We'll buy them for ")=640 then call _error "timeout"
  offer=_stripint(_grabit(" credits.","s"))
  if init=0 then init=trunc(offer*1.4)
  call zocsend init||"^M"
  flag=0
  do forever
   ans=zocwaitmux("We'll buy them for |Our final offer is |life|lost|fool|sick|my time|a real offer|crazy|short|choke")
   select
    when ans=640 then call _error "timeout"
    when ans>=6 then do; init=init-100; hagc=hagc+100; flag=0; end /* wp haggle */
    when ans>=2 then do; init=init-100; hagc=hagc+100; flag=0; call zocsend "pn"||planet||"^M327^M"; end /* dump haggle */
    when ans<=1 & flag then do
     offer2=_stripint(_grabit(" credits.","s"))
     call zocsend "^M"
     leave
    end /*when*/
    when ans=1  then do; flag=1; call zocsend init||"^Mpn"||planet||"^M327^M"; end /* final offer */
    when ans=0  then do; flag=1; call zocsend init||"^M"; end
    otherwise nop
   end /*select*/
  end /*do*/
  init=init+100
  call zocsend "'onhand "||port||" 32700 "||32700-j*327||" 32700 32700 ::^M"
  if zocwait("ready ::")=640 then call _error "timeout"
  call zocsend "pn"||planet||"^M"
  if zocwait("Trading %")=640 then call _error "timeout"
  line1=_grabit("%","s")
  line2=_grabit("%","s")
  line3=_grabit("%","s")
  parse var line1 . . . oh.1 pc.1 .
  parse var line2 . . oh.2 pc.2 .
  parse var line3 . . oh.3 pc.3 .
  call zocsend "327^M"
  if zocwait("We'll buy them for ")=640 then call _error "timeout"
  offer=_stripint(_grabit(" credits.","s"))
  call zocsend init||"^M"
  flag=0
  do forever
   ans=zocwaitmux("We'll buy them for |Our final offer is |life|lost|fool|sick|my time|a real offer|crazy|short|choke")
   select
    when ans=640 then call _error "timeout"
    when ans>=6 then do; init=init-10; hagc=hagc+10; flag=0; end /* wp haggle */
    when ans>=2 then do; init=init-10; hagc=hagc+10; flag=0; call zocsend "pn"||planet||"^M327^M"; end /* dump haggle */
    when ans<=1 & flag then do
     offer2=_stripint(_grabit(" credits.","s"))
     call zocsend "^M"
     leave
    end /*when*/
    when ans=1  then do; flag=1; call zocsend init||"^Mpn"||planet||"^M327^M"; end /* final offer */
    when ans=0  then do; flag=1; call zocsend init||"^M"; end
    otherwise nop
   end /*select*/
  end /*do*/
  init=init+10
  call zocsend "'onhand "||port||" 32700 "||32700-j*327||" 32700 32700 ::^M"
  if zocwait("ready ::")=640 then call _error "timeout"
  call zocsend "pn"||planet||"^M"
  if zocwait("Trading %")=640 then call _error "timeout"
  line1=_grabit("%","s")
  line2=_grabit("%","s")
  line3=_grabit("%","s")
  parse var line1 . . . oh.1 pc.1 .
  parse var line2 . . oh.2 pc.2 .
  parse var line3 . . oh.3 pc.3 .
  call zocsend "327^M"
  if zocwait("We'll buy them for ")=640 then call _error "timeout"
  offer=_stripint(_grabit(" credits.","s"))
  call zocsend init||"^M"
  flag=0
  do forever
   ans=zocwaitmux("We'll buy them for |Our final offer is |life|lost|fool|sick|my time|a real offer|crazy|short|choke")
   select
    when ans=640 then call _error "timeout"
    when ans>=6 then do; init=init-1; hagc=hagc+1; flag=0; end /* wp haggle */
    when ans>=2 then do; init=init-1; hagc=hagc+1; flag=0; call zocsend "pn"||planet||"^M327^M"; end /* dump haggle */
    when ans<=1 & flag then do
     offer2=_stripint(_grabit(" credits.","s"))
     call zocsend "^M"
     leave
    end /*when*/
    when ans=1  then do; flag=1; call zocsend init||"^Mpn"||planet||"^M327^M"; end /* final offer */
    when ans=0  then do; flag=1; call zocsend init||"^M"; end
    otherwise nop
   end /*select*/
  end /*do*/
  if _fileopenw(outfile) then do
   call lineout outfile, i oh.1 pc.1 327 offer init hagc offer2
   call _fileclose outfile
  end /*if*/
 end /*do*/
end /*do*/
exit

/* HAGGLE MESSAGES THAT DUMP YOU OUT OF PLANET NEGOTIATION         -*/
/* I think you'd better leave if you value your life!              -*/
/* I see you are as stupid as you look, get lost...                -*/
/* Swine, go peddle your wares somewhere else, you make me sick.   -*/
/* Get lost creep, that junk isn't worth half that much!           -*/
/* HA!  You think me a fool?  Thats insane!  Get out of here!      -*/
/* HAGGLE MESSAGES THAT I KNOW OF:                                 -*/
/*  -- my time --                                                  -*/
/* Quit playing around, you're wasting my time!                    -*/
/* I have much better things to do than waste my time.  Try again. -*/
/*  -- a real offer --                                             -*/
/* Make a real offer or get the h*ll out of here!                  -*/
/* So, you think I'm as stupid as you look? Make a real offer.     -*/
/* What do you take me for, a fool?  Make a real offer!            -*/
/* This is the big leagues Jr.  Make a real offer.                 -*/
/* Get real ion-brain, make me a real offer.                       -*/
/*  -- miscellaneous --                                            -*/
/* WHAT?!@!? you must be crazy!                                    -*/
/* My patience grows short with you.                               -*/
/* HA! HA, ha hahahhah hehehe hhhohhohohohh!  You choke me up!     -*/


/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.4 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. (globals)

     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _nwo. _nw. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. _msg _msg. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
    exit

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if zocwait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileopenw"
     if _fileexists(arg(1)) then do
      call stream arg(1), "C", "OPEN WRITE"
      call stream arg(1), "C", "SEEK <0"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*if*/
     else rslt=_filenew(arg(1))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     call stream arg(1), "C", "CLOSE"
    return

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt

/** _fileready v.1 **/
    _fileready: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileready"
     if stream(arg(1), "S")\="NOTREADY" then rslt=1; else rslt=0
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _filenew"
     if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
     if _fileexists(arg(1)) then rslt=0
     else do
      call stream arg(1), "C", "OPEN WRITE"
      rslt=_fileready(arg(1))
      if \rslt then call _fileclose arg(1)
     end /*else*/
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt
