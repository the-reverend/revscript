/* REXX __bot1.zrx by the reverend (build 3)                                  */
/*-       built by rev-builder version 1.2 on 18 Aug 2003 at 22:23:57        -*/
/*- ------------------------------------------------------------------------ -*/
/*-                       Copyright (C) 2003 Ron Wilson                      -*/
/*-                                                                          -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author. Your use of    -*/
/*- this script is governed by the terms of the REV-LICENSE.                 -*/
/*-                                                                          -*/
/*- This program is provided to you WITHOUT ANY WARRANTY, even the implied   -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the -*/
/*- REV-LICENSE for more details.                                            -*/
/*-                                                                          -*/
/*-                A copy of the REV-LICENSE is available at:                -*/
/*-       http://thereverend.coastgames.com/tradewars/rev-license.html       -*/
/*- ------------------------------------------------------------------------ -*/
/*- ----------------------*/ _g.!sname="__bot1.zrx" /*---------------------- -*/
/*- ---------------*/ _g.!sbuild=3; _g.!sdate="2003-08-18" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/

game="c"
maxproduct=10000000

globals=_setglobals()
call _timeout 300
call zocsynctime 500
call on halt name _halt

do forever
 if zocwait("::")=640 then call zocsend "^["
 else do
  line=_lastline()
  parse value _bot_parse_command(line) with user ";" cmd ";" args

  select
   when cmd="quit" then leave
   when cmd="status" | cmd="st" then call zocsend "'mcic bot : ready^M"
   when cmd="fill" then do
    parse var args planet
    if _sendwait("qY","Enter your choice:")=640 then call _error "timeout"
    if _sendwait("x^M","Selection (? for menu):")=640 then call _error "timeout"
    if _sendwait("$"||game,"Trade Wars 2002 Editor")=640 then call _error "timeout"

    call zocsend "n"||planet||"^Mb"||maxproduct||"c"||maxproduct||"d"||maxproduct||"x"

    if _sendwait("q","Selection (? for menu):")=640 then call _error "timeout"
    if _sendwait("$"||game,"[Pause]")=640 then call _error "timeout"
    if _sendwait("^M","Enter your choice:")=640 then call _error "timeout"
    if _sendwait("t^M","Show today's log?")=640 then call _error "timeout"
    if _sendwait("^M","[Pause]")=640 then call _error "timeout"
    call zocsend "^M^M^M^M^M'ready ::^M"
   end /*when*/

   when cmd="onhand" then do
    parse var args port portmax ore org equ
    if _sendwait("qY","Enter your choice:")=640 then call _error "timeout"
    if _sendwait("x^M","Selection (? for menu):")=640 then call _error "timeout"
    if _sendwait("$"||game,"Trade Wars 2002 Editor")=640 then call _error "timeout"

    call zocsend "p"||port||word("^M",(port>9999)+1)
    call zocsend "f"||portmax%10||word("^M",(portmax%10>999)+1)
    call zocsend "g"||portmax%10||word("^M",(portmax%10>999)+1)
    call zocsend "h"||portmax%10||word("^M",(portmax%10>999)+1)
    call zocsend "c"||portmax-ore||word("^M",((portmax-ore)>9999)+1)
    call zocsend "d"||portmax-org||word("^M",((portmax-org)>9999)+1)
    call zocsend "e"||portmax-equ||word("^M",((portmax-equ)>9999)+1)
    call zocsend "x"

    if _sendwait("q","Selection (? for menu):")=640 then call _error "timeout"
    if _sendwait("$"||game,"[Pause]")=640 then call _error "timeout"
    if _sendwait("^M","Enter your choice:")=640 then call _error "timeout"
    if _sendwait("t^M","Show today's log?")=640 then call _error "timeout"
    if _sendwait("^M","[Pause]")=640 then call _error "timeout"
    call zocsend "^M^M^M^M^M'ready ::^M"
   end /*when*/

   when cmd="mcic" then do
    parse var args port type portmax ore org equ

    if _sendwait("qY","Enter your choice:")=640 then call _error "timeout"
    if _sendwait("x^M","Selection (? for menu):")=640 then call _error "timeout"
    if _sendwait("$"||game,"Trade Wars 2002 Editor")=640 then call _error "timeout"

    call zocsend "p"||port||word("^M",(port>9999)+1)||"b"||type
    call zocsend "f"||portmax%10||word("^M",(portmax%10>999)+1)
    call zocsend "g"||portmax%10||word("^M",(portmax%10>999)+1)
    call zocsend "h"||portmax%10||word("^M",(portmax%10>999)+1)
    call zocsend "c0^M"
    call zocsend "d0^M"
    call zocsend "e0^M"
    call zocsend "i"||ore||word("^M",((abs(ore)=100)+1))
    call zocsend "j"||org||word("^M",((abs(org)=100)+1))
    call zocsend "k"||equ||word("^M",((abs(equ)=100)+1))
    call zocsend "x"

    if _sendwait("q","Selection (? for menu):")=640 then call _error "timeout"
    if _sendwait("$"||game,"[Pause]")=640 then call _error "timeout"
    if _sendwait("^M","Enter your choice:")=640 then call _error "timeout"
    if _sendwait("t^M","Show today's log?")=640 then call _error "timeout"
    if _sendwait("^M","[Pause]")=640 then call _error "timeout"
    call zocsend "^M^M^M^M^M'ready ::^M"
   end /*when*/
   otherwise nop
  end /*select*/

 end /*else*/
end /*do*/

call zocsend "'goodbye^M"

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.4 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. (globals)

     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _es. _et. _ep. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _nwi. _nwo. _nw. _od. _sv. _pv. _bust. _vs. _vn. "
     rslt=rslt||"_olist1. _olist2. _clvlist1. _clvlist2. _msg _msg. "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals lra "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.3 **/
    _halt: procedure expose (globals)
     call off halt
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _bot_parse_command v.1 **/
    _bot_parse_command: procedure expose (globals)
     line=arg(1)
     select
      when left(line,2)="R " then do
       name=strip(substr(line,3,7))
       parse value substr(line,10) with cmd args "::"
      end /*when*/
      when left(line,1)="'" then do
       if zocwait("Message sent")=640 then call _error "timeout"
       name="##OWNER##"
       parse value substr(line,2) with cmd args "::"
      end /*when*/
      otherwise do
       name="##INVALID##"
       cmd="##NA##"
       args="##NA##"
      end /*otherwise*/
     end /*select*/
     cmd=lower(strip(cmd))
     args=strip(args)
     rslt=name||";"||cmd||";"||args
    return rslt

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=zocwait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _error v.7 **/
    _error: procedure expose (globals)
     call off halt
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     call zocwrite _ansi("bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: the.reverend@coastgames.com > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call zocwrite _ansi()
     call _beep "error.wav"
    exit

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt="^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     select
      when arg(1,"O") then call zocwrite d2c(7)
      when _fileexists(arg(1)) then call zocplaysound arg(1)
      otherwise call zocwrite d2c(7)
     end /*select*/
    return

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _fileexists v.3 **/
    _fileexists: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _fileexists"
     if stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0; else rslt=1
    return rslt
