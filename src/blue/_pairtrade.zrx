/* REXX _pairtrade.zrx by the reverend (build 135)                            */
/*-       built by rev-builder version 1.3a on 22 Mar 2014 at 00:15:36       -*/
/*- ------------------------------------------------------------------------ -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author.                -*/
/*-                                                                          -*/
/*- This script is provided to you WITHOUT ANY WARRANTY, even the implied    -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         -*/
/*-                                                                          -*/
/*-                       Copyright (C) 2009 Ron Wilson                      -*/
/*- ------------------------------------------------------------------------ -*/
/*- --------------------*/ _g.!sname="_pairtrade.zrx" /*-------------------- -*/
/*- --------------*/ _g.!sbuild=135; _g.!sdate="2014-03-22" /*-------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* description:  this script will trade down a port pair using four possible  */
/*               methods - no haggle, standard haggle, new haggle, and worst  */
/*               price. simply start with empty holds, or holds of the        */
/*               product being bought at the first port, and fire away.       */
/* rev. 0 - initial release                                                   */
/* rev. 1 - stops trading when port empty                                     */
/* rev. 2 - library update                                                    */
/* rev. 3 - minor bug fix                                                     */
/* rev. 4 - enhanced worst price haggle                                       */
/* rev. 5 - library update                                                    */
/* rev. 6 - updated error handling                                            */
/* rev. 7 - faster worst-price                                                */
/* rev. 8 - 50% stop                                                          */

globals=_setglobals("overpay offer")
call _timeout 30
call zocsynctime 500
call on halt name _halt

minprofit=60

if _synchronize()\="command" then call _error "please start at the command prompt."

mode=_chooselist("select a method:", "haggle to "||minprofit||"ph;no haggle to "||minprofit||"ph;haggle to 50%;no haggle;no haggle to 50%;worst price", ";")
if mode="##CANCEL##" then call _quit "script cancelled by user"
select
 when mode="no haggle" then mode=1
 when mode="haggle" then mode=2
 when mode="haggle to 50%" then mode=3
 when mode="worst price" then mode=4
 when mode="no haggle to 50%" then mode=5
 when mode="no haggle to "||minprofit||"ph" then mode=6
 when mode="haggle to "||minprofit||"ph" then mode=7
 otherwise exit
end /*select*/

ans=zocrequest("what products?", "Org/Equ", "Ore/Equ", "Ore/Org")
select
 when ans="Org/Equ" then do
  prod.1="Organics"
  prod.2="Equipment"
  prod.3="Fuel Ore"
 end /*when*/
 when ans="Ore/Equ" then do
  prod.1="Fuel Ore"
  prod.2="Equipment"
  prod.3="Organics"
 end /*when*/
 when ans="Ore/Org" then do
  prod.1="Fuel Ore"
  prod.2="Organics"
  prod.3="Equipment"
 end /*when*/
 when ans="##CANCEL##" then call _quit "script cancelled by user"
 otherwise nop
end /*select*/

parse value _getinfo("hlds;ore;org;equ;col") with holds ";" ore ";" org ";" equ ";" colos
if zocwait("Command [")=640 then call _error "timeout"

if prod.3="Fuel Ore"  & ore>0 then call _quit "get rid of the fuel ore first"
if prod.3="Organics"  & org>0 then call _quit "get rid of the organics first"
if prod.3="Equipment" & equ>0 then call _quit "get rid of the equipment first"
if colos>0 then call _quit "get rid of colonists first"

call zocsend "d"

if zocwait("Warps to Sector(s) :")=640 then call _error "timeout"
if zocwait("^M")=640 then call _error "timeout"
wlist=_lastline()
if zocwait("Command [")=640 then call _error "timeout"

sect.2=_chooselist("which sector to trade with?", wlist, "-")
if sect.2="##CANCEL##" then call _quit "script cancelled by user."
sect.2=_stripint(sect.2)

call zocrespond prod.3||" do you want to sell [", "^M^M"
call zocrespond prod.3||" do you want to buy [", "0^M"

done.1=\_trade(mode)

call zocsend "m"||sect.2||"^Mza99^Mzn"
if sect.2 > 10 then call zocsend "f1^Mcd"
pans=zocwaitmux("Command [", "Class ")
select
 when pans=0 then call _quit "no port in this sector"
 when pans=1 then do
  if zocwait("^M")=640 then call _error "timeout"
  if zocwait("Command [")=640 then call _error "timeout"
  if left(_lastline(),1)=0 then call _quit "cannot trade with class 0 port"
 end /*when*/
 when pans=640 then call _error "timeout"
 otherwise nop
end /*select*/

profit.=0
i=2
done.2=\_trade(mode)
i=1
do while \done.i
 call zocsend "<"
 if zocwait("Command [")=640 then call _error "timeout"
 done.i=\_trade(mode)
 pn=abs(profit.1-profit.2)
 i=abs(i-2)+1
 if (mode=6 | mode=7) & (pn/holds)<minprofit then done.i=1
 call zocsend "'pn" pn "holds" holds "p/h" pn/holds "^M"
end /*do*/

call zocrespond prod.3||" do you want to sell ["
call zocrespond prod.3||" do you want to buy ["

call _quit "trading complete."

exit

_trade:
 m=left(arg(1),1)
 m1=m
 if \_in("0123456789",m1) then m1=1
 m1=m1*10

 call zocsend "pt"

/*
-=-=-        Docking Log        -=-=-
A Ferrengi just left.

 Items     Status  Trading % of max OnBoard
 -----     ------  ------- -------- -------
Fuel Ore   Buying    2890    100%       0
Organics   Selling    577     48%       0
Equipment  Buying    1463     82%      65
*/

 ans=_waitmux("Trading %|You don't have any turns left.")
 select
  when ans=0 then nop
  when ans=1 then exit
  when ans=640 then call _error "timeout"
  otherwise nop
 end /*select*/

 if _wait("%")=640 then call _error "timeout"
 pore=_lastline()
 if _wait("%")=640 then call _error "timeout"
 porg=_lastline()
 if _wait("%")=640 then call _error "timeout"
 pequ=_lastline()

 parse var pore . . . qore pore "%" .
 parse var porg . .   qorg porg "%" .
 parse var pequ . .   qequ pequ "%" .
 tore=qore/pore*100
 torg=qorg/porg*100
 tequ=qequ/pequ*100

 tdone=0
 do while \tdone

  tans=zocwaitmux(prod.1||" do you want to sell [", ,
                  prod.1||" do you want to buy [", ,
                  prod.2||" do you want to sell [", ,
                  prod.2||" do you want to buy [", ,
                  "Command [", ,
                  "You don't have anything")
  if tans<4 then do
   buying=tans%2
   buying=0; if (tans=1 | tans=3) then buying=1
   nprod=2; if tans<2 then nprod=1
   if zocwait("]")=640 then call _error "timeout"
   amount=_stripint(_lastline())
   call zocsend amount||"^M"
   if amount=0 then do
    if zocwait("Command [")=640 then call _error "timeout"
    call _quit "nothing to trade"
   end /*if*/
   if zocwait("Your offer [")=640 then call _error "timeout"
   if zocwait("]")=640 then call _error "timeout"
   offer=_stripint(_lastline())
   trsuccess=0
  end /*if*/

  select
   when m1+tans=10 then trsuccess=_sellnohaggle(offer)
   when m1+tans=11 then trsuccess=_buynohaggle(offer)
   when m1+tans=12 then trsuccess=_sellnohaggle(offer)
   when m1+tans=13 then trsuccess=_buynohaggle(offer)

   when m1+tans=20 then trsuccess=_sellhaggle2(offer)
   when m1+tans=21 then trsuccess=_buyhaggle2(offer)
   when m1+tans=22 then trsuccess=_sellhaggle2(offer)
   when m1+tans=23 then trsuccess=_buyhaggle2(offer)

   when m1+tans=30 then trsuccess=_sellhaggle2(offer)
   when m1+tans=31 then trsuccess=_buyhaggle2(offer)
   when m1+tans=32 then trsuccess=_sellhaggle2(offer)
   when m1+tans=33 then trsuccess=_buyhaggle2(offer)

   when m1+tans=40 then trsuccess=_sellhaggle2(offer)
   when m1+tans=41 then trsuccess=_buyhaggle3(offer)
   when m1+tans=42 then trsuccess=_sellhaggle2(offer)
   when m1+tans=43 then trsuccess=_buyhaggle3(offer)

   when m1+tans=50 then trsuccess=_sellnohaggle(offer)
   when m1+tans=51 then trsuccess=_buynohaggle(offer)
   when m1+tans=52 then trsuccess=_sellnohaggle(offer)
   when m1+tans=53 then trsuccess=_buynohaggle(offer)

   when m1+tans=60 then trsuccess=_sellnohaggle(offer)
   when m1+tans=61 then trsuccess=_buynohaggle(offer)
   when m1+tans=62 then trsuccess=_sellnohaggle(offer)
   when m1+tans=63 then trsuccess=_buynohaggle(offer)

   when m1+tans=70 then trsuccess=_sellhaggle2(offer)
   when m1+tans=71 then trsuccess=_buyhaggle2(offer)
   when m1+tans=72 then trsuccess=_sellhaggle2(offer)
   when m1+tans=73 then trsuccess=_buyhaggle2(offer)

   when tans=4 then tdone=1
   when tans=5 then call _quit "nothing to trade"
   when tans=640 then call _error "timeout"
   otherwise call _error "unknown case - mode="||m1||" tans="||tans
  end /*select*/

  offer.buying=offer

 end /*do*/
/*call zocsend "'" offer.0 "-"offer.1 "^M"*/
 profit.i = offer.1 - offer.0

 if m=3 | m=5 then do
  if prod.1="Fuel Ore"  & (qore-holds)/tore*100<=50 then trsuccess=0
  if prod.1="Organics"  & (qorg-holds)/torg*100<=50 then trsuccess=0
  if prod.1="Equipment" & (qequ-holds)/tequ*100<=50 then trsuccess=0
  if prod.2="Fuel Ore"  & (qore-holds)/tore*100<=50 then trsuccess=0
  if prod.2="Organics"  & (qorg-holds)/torg*100<=50 then trsuccess=0
  if prod.2="Equipment" & (qequ-holds)/tequ*100<=50 then trsuccess=0
 end /* if */
 else do
  if prod.1="Fuel Ore"  & qore<holds*2 then trsuccess=0
  if prod.1="Organics"  & qorg<holds*2 then trsuccess=0
  if prod.1="Equipment" & qequ<holds*2 then trsuccess=0
  if prod.2="Fuel Ore"  & qore<holds*2 then trsuccess=0
  if prod.2="Organics"  & qorg<holds*2 then trsuccess=0
  if prod.2="Equipment" & qequ<holds*2 then trsuccess=0
 end /* else */

return trsuccess

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.5 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. _debug (globals)

     _debug=0
     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118 + 1 /* +1 added 6/23/2008 */
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365
     _baseday.2009=_baseday.2008+365+1
     _baseday.2010=_baseday.2009+365
     _baseday.2011=_baseday.2010+365
     _baseday.2012=_baseday.2011+365
     _baseday.2013=_baseday.2012+365+1
     _baseday.2014=_baseday.2013+365
     _baseday.2015=_baseday.2014+365
     _baseday.2016=_baseday.2015+365
     _baseday.2017=_baseday.2016+365+1
     _baseday.2018=_baseday.2013+365
     _baseday.2019=_baseday.2014+365
     _baseday.2020=_baseday.2015+365
     _baseday.2021=_baseday.2016+365+1
     _baseday.2022=_baseday.2013+365
     _baseday.2023=_baseday.2014+365
     _baseday.2024=_baseday.2015+365
     _baseday.2025=_baseday.2016+365+1
     _baseday.2026=_baseday.2013+365
     _baseday.2027=_baseday.2014+365
     _baseday.2028=_baseday.2015+365
     _baseday.2029=_baseday.2016+365+1
     _baseday.2030=_baseday.2013+365
     _baseday.2031=_baseday.2014+365
     _baseday.2032=_baseday.2015+365
     _baseday.2033=_baseday.2016+365+1

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _efc. _es. _et. _ep. _fc. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _bd. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _vs. _vn. _vi. _mcic. _fh. _fhp. "
     rslt=rslt||"_clv. _online. _msg _msg. _debug "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.4 **/
    _halt: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _synchronize v.5 **/
    _synchronize: procedure expose (globals)

     if arg(1,"E") then checkcitprompts=arg(1); else checkcitprompts=1

     synchw=_synchronize_vars("w")
     synchr=_synchronize_vars("r")

     call zocsend "&&"
     ans=_waitmux("&&|Pausing is")
     select
      when ans=0 then return "unknown_text_entry"
      when ans=1 then nop
      when ans=640 then return "timeout"
      otherwise nop
     end /*select*/

     ans=_waitmux(synchw)
     select
      when ans=640 then rslt="timeout"
      when ans>0 then do
       if _wait("Pausing is")=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=_dword(synchr,ans+1,";")

     select
      when \checkcitprompts then nop
      when rslt="computer" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _error v.9 **/
    _error: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwrite _ansi("clearline;bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: revhelper_at_thereverend_dot_org > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call _beep "error.wav"
    exit

/** _chooselist v.6 **/
    _chooselist: procedure expose (globals)
     prompt=arg(1)
     if arg(2,"E") then list=arg(2); else list=""
     if list="" then call _error "no list"
     if arg(3,"E") then delim=left(arg(3),1); else delim=";"

     select
      when _dwords(list,delim)=1 then rslt=zocrequest(prompt, list)
      when _dwords(list,delim)=2 then rslt=zocrequest(prompt, _dword(list,1,delim), _dword(list,2,delim))
      when _dwords(list,delim)=3 then rslt=zocrequest(prompt, _dword(list,1,delim), _dword(list,2,delim), _dword(list,3,delim))
      when _dwords(list,delim)=4 then rslt=zocrequest(prompt, _dword(list,1,delim), _dword(list,2,delim), _dword(list,3,delim), _dword(list,4,delim))
      otherwise do
       ch.=""
       i=_dwords(list,delim)
       do j=1 to i
        ch.j=_dword(list,j,delim)
       end /*do*/

       if i<7 then max=1
       if i<5 then max=0
       if i>=7 then max=(i-5)%2+1

       done=0
       loc=0
       do while \done
        if loc<0 then loc=0
        if loc>max then loc=max

        select
         when loc=0 then do
          if max=0 then rslt=zocrequest(prompt, ch.1, ch.2, ch.3, ch.4)
          else rslt=zocrequest(prompt, ch.1, ch.2, ch.3, "next")
         end /*when*/
         when loc=max then do
          p1=(loc-1)*2+4
          p2=p1+1
          p3=p1+2
          rslt=zocrequest(prompt, "back", ch.p1, ch.p2, ch.p3)
         end /*when*/
         otherwise do
          p1=(loc-1)*2+4
          p2=p1+1
          rslt=zocrequest(prompt, "back", ch.p1, ch.p2, "next")
         end /*otherwise*/
        end /*select*/

        select
         when rslt="next" then loc=loc+1
         when rslt="back" then loc=loc-1
         when rslt="##CANCEL##" then done=1
         when rslt="" then nop
         otherwise done=1
        end /*select*/

       end /*do*/
      end /*otherwise*/
     end /*select*/

     if lower(arg(4))="c" & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"

    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _getinfo v.6 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=32*1024

     /* grab a buffer of text containing the quickstats and strip lf/nul */
     call zocreceivebuf bufflen
     call zocsend "/"
     if _wait("Sect ")=640 then call _error "timeout"
     if _wait("Ship ")=640 then call _error "timeout"
     if _wait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"

     /* reduce buffer to just the quickstats info and change bars to semicolons */
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, ";", d2c(179)),1)

     /* strip commas from numbers */
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     /* remove newlines, strip spaces, and condense to semi-delimited string */
     cr=d2c(13)
     buff2=strip(_dword(buff,1,cr))
     do i=2 to _dwords(buff,cr)
      buff2=buff2||";"||strip(_dword(buff,i,cr))
     end
     buff=buff2
     drop buff2

     /* analyze buffer */
     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/
     c=c+1
     vr.c="all"
     vl.c=buff

     /* set global vars */
     _qs.!corp=0
     do i=1 to c
      tag="!"||upper(vr.i)
      _qs.tag=vl.i
     end /*do*/

     /* pass out requested stats */
     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _in v.3 **/
    _in: procedure expose (globals)
     if arg(1,"E") & arg(2,"E") & length(arg(1))>0 & verify(arg(2),arg(1),"N")=0 then rslt=1
     else rslt=0
    return rslt

/** _waitmux v.1 **/
    _waitmux: procedure expose (globals)
     rslt=zocwaitmux(arg(1))
    return rslt

/** _wait v.1 **/
    _wait: procedure expose (globals)
     rslt=zocwait(arg(1))
    return rslt

/** _sellnohaggle v.2 **/
    _sellnohaggle: procedure expose (globals)
     offer=arg(1)
     call zocsend "^M"
     if zocwait("You have")=640 then call _error "timeout"
    return 1

/** _buynohaggle v.1 **/
    _buynohaggle: procedure expose (globals)
     offer=arg(1)
     call zocsend "^M"
     if zocwait("You have")=640 then call _error "timeout"
    return 1

/** _sellhaggle2 v.2 **/
    _sellhaggle2: procedure expose (globals)
     portoffer=arg(1)
     offer=trunc(portoffer*1.06)

     success=1
     iter=1

     call zocsend offer||"^M"

     done=0
     do while \done

      ans=_waitmux("We'll buy them for|Our final offer|We're not interested.|You have")
      select

       when ans=0 then do
        if _wait("Your offer [")=640 then call _error "timeout"
        if _wait("]")=640 then call _error "timeout"
        newportoffer=_stripint(_lastline())
        iter=iter+1
        newoffer=trunc(offer/max(1.003,(newportoffer/portoffer)))
        if newoffer>=offer then newoffer=offer-1
        offer=newoffer
        portoffer=newportoffer
        call zocsend offer||"^M"
       end /*when*/

       when ans=1 then do
        if _wait("Your offer [")=640 then call _error "timeout"
        if _wait("]")=640 then call _error "timeout"
        finalportoffer=_stripint(_lastline())
        iter=iter+1
        factor=0.5
        if iter<3 then factor=0.6
        offer=trunc(offer*(1-factor) + finalportoffer*factor)
        call zocsend offer||"^M"
       end /*when*/

       when ans=2 then do
        done=1
        success=0
       end /*when*/

       when ans=3 then do
        done=1
       end /*when*/

       when ans=640 then call _error "timeout"

       otherwise nop

      end /*select*/

     end /*while*/

    return success

/** _buyhaggle2 v.2 **/
    _buyhaggle2: procedure expose (globals)
     portoffer=arg(1)
     offer=trunc(portoffer/1.06)

     success=1

     call zocsend offer||"^M"
     iter=1

     done=0
     do while \done

      ans=_waitmux("We'll sell them for|Our final offer|We're not interested.|You have")
      select

       when ans=0 then do
        if _wait("Your offer [")=640 then call _error "timeout"
        newportoffer=_stripint(_grabit("]"))
        iter=iter+1
        newoffer=trunc(offer*max(1.003,(newportoffer/portoffer)))
        if newoffer<=offer then newoffer=offer+1
        offer=newoffer
        portoffer=newportoffer
        call zocsend offer||"^M"
       end /*when*/

       when ans=1 then do
        if _wait("Your offer [")=640 then call _error "timeout"
        finalportoffer=_stripint(_grabit("]"))
        iter=iter+1
        factor=0.5
        if iter<3 then factor=0.6
        offer=trunc(offer*(1-factor) + finalportoffer*factor)
        call zocsend offer||"^M"
       end /*when*/

       when ans=2 then do
        done=1
        success=0
       end /*when*/

       when ans=3 then done=1

       when ans=640 then call _error "timeout"

       otherwise nop

      end /*select*/

     end /*while*/

    return success

/** _buyhaggle3 v.3 **/
    _buyhaggle3: procedure expose (globals)
     portoffer=arg(1)
     op=arg(2)
     if op="" then op=43
     offer=trunc(portoffer*((100+op)/100),0)

     success=1

     call zocwrite "^[[1;32m< overpaying by "||op||"% >^[[0;35m "
     call zocsend offer||"^M"
     op=op-1
     opcount=1

     done=0
     do while \done

      ans=_waitmux("We'll sell them for|my time|a real offer|WHAT?!@!?|short with you|choke me up!|Our final offer|We're not interested.|You have")
      select

       when ans<=5 then do
        if _wait("Your offer [")=640 then call _error "timeout"
        offer=trunc(portoffer*((100+op)/100),0)
        call zocwrite "^[[1;32m< overpaying by "||op||"% >^[[0;35m "
        call zocsend offer||"^M"
        opcount=opcount+1
        op=op-1
       end /*when*/

       when ans=6 then do
        if _wait("Your offer [")=640 then call _error "timeout"
        offer=trunc(portoffer*((100+op)/100),0)
        call zocwrite "^[[1;32m< overpaying by "||op||"% >^[[0;35m "
        call zocsend offer||"^M"
        opcount=opcount+1
        op=op-1
       end /*when*/

       when ans=7 then do
        done=1
        success=0
       end /*when*/

       when ans=8 then done=1

       when ans=640 then call _error "timeout"

       otherwise nop

      end /*select*/

     end /*while*/

     if datatype(overpay,"W") then do
      select
       when opcount>1 then overpay=overpay-opcount+1
       otherwise nop
      end /*select*/
     end /*if*/
     _msg=op+1

    return success

/** _debug v.5 **/
    _debug: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _debug"
     mode=strip(left(lower(arg(1)),3))
     msg=arg(2)
     if arg(3,"E") then logname=strip(arg(3))
     else logname="_debug.txt"
     select
      when mode="scr" then call zocwriteln "^[[1;34mREV-DEBUG <"||msg||">^[[0m"
      when mode="fed" then call zocsend "`REV-DEBUG <"||msg||">^M"
      when mode="sub" then call zocsend "'REV-DEBUG <"||msg||">^M"
      when mode="log" then do
       if _fileopenw(logname) then do
        call lineout logname, msg
        call _fileclose logname
       end /*if*/
       else call _error "unable to open rev-log.txt."
      end /*when*/
      otherwise nop
     end /*select*/
    return

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _cleanup v.1 **/
    _cleanup: procedure expose (globals)
     /* put code here to do custom cleanup
        for specific scripts and override
        it in your main program */
    return 1

/** _synchronize_vars v.1 **/
    _synchronize_vars: procedure expose (globals)
     select
      when arg(1)="w" then rslt="Pausing",
                              ||"|Command [",
                              ||"|Citadel command",
                              ||"|Planet command",
                              ||"|<StarDock>",
                              ||"|ship to sell",
                              ||"|Still interested ?",
                              ||"|wish to buy? (A,B,C,Q,?)",
                              ||"|<Galactic Bank>",
                              ||"|<Hardware Emporium>",
                              ||"|<Shipyards>",
                              ||"|<Tavern>",
                              ||"|Enter your choice [T] ?",
                              ||"|do you want to sell [",
                              ||"|do you want to buy [",
                              ||"|Computer command",
                              ||"|Corporate command",
                              ||"|Colonists? [T]",
                              ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]",
                              ||"|`",
                              ||"|F: ",
                              ||"|'",
                              ||"|S: ",
                              ||"|M: ",
                              ||"|P: "
      when arg(1)="r" then rslt="unknown;command;citadel;planet;stardock;ship_sell;ship_sell_interested;class_0",
                             ||";bank;hardware;shipyards;tavern;port_menu;port_haggle;port_haggle;computer",
                             ||";corporate;terra;stop_in_this_sector?;fedcom_text_entry_1;fedcom_text_entry_2",
                             ||";subspace_text_entry_1;subspace_text_entry_2;mail_text_entry;private_text_entry",
                             ||";corporate_cit;computer_cit;unknown_text_entry" /* <-- these unmatched in the wait string above */
      when arg(1)="command" then rslt=" ; ;qq;q;q;qqq;nqq;q;qq;qq;qq;qq;q;0^Mz0^Mz0^M;0^Mz0^Mz0^M;q;q;q;y;^H;^M;^H;^M;^M;^M;qqq;qqq; "
      when arg(1)="computer" then rslt=" ;c;c;qc;qc;qqqc;nqqc;qc;qqc;qqc;qqc;qqc;qc;0^Mz0^Mz0^Mc;0^Mz0^Mz0^Mc; ;qc;qc;yc;^Hc;^Mc;^Hc;^Mc;^Mc;^Mc;qc;qc; "
      otherwise call _error "unknown argument in _synchronize_vars"
     end /*select*/
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if _wait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenw"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN WRITE"
       call stream arg(1), "C", "SEEK <0"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt
