/* REXX _bit.zrx by the reverend (build 75)                                   */
/*-       built by rev-builder version 1.3a on 22 Mar 2014 at 00:15:32       -*/
/*- ------------------------------------------------------------------------ -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author.                -*/
/*-                                                                          -*/
/*- This script is provided to you WITHOUT ANY WARRANTY, even the implied    -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         -*/
/*-                                                                          -*/
/*-                       Copyright (C) 2009 Ron Wilson                      -*/
/*- ------------------------------------------------------------------------ -*/
/*- -----------------------*/ _g.!sname="_bit.zrx" /*----------------------- -*/
/*- --------------*/ _g.!sbuild=75; _g.!sdate="2014-03-22" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

globals=_setglobals()
call _timeout 60
call zocsynctime 500
call on halt name _halt

bot_mode=word(arg(1),1)
select
 when bot_mode="passive" then nop
 when bot_mode="finder" then nop
 otherwise bot_mode="finder"
end /*select*/

call _bot_loadup

do forever
 ans=zocwaitmux(bot_wait); if ans=640 then do; call zocsend "^["; iterate; end
 line=_lastline()
 bot_auth=0

 /* manage global commands */
    if ans=0 then do;  t=time("E"); if _bot_global_cmds() then iterate; end;

 /* manage mode-based behavior */
    select
     when bot_mode="passive"   then ans=_bot_passive(ans)
     when bot_mode="finder"    then parse value _bot_finder(ans, line, bot_user, bot_cmd, bot_args, bot_name, bot_mode, bot_prompt, bot_sector, bot_planet, bot_auth, bot_abort, gname, dpath, dname, fname, vname, lname, spath, lpath, ldefault, mname, reclen, ns, sf, rf, sd, alpha, rylos) with bot_prompt bot_sector bot_planet reclen bot_abort
     otherwise nop
    end /*select*/

end /*do*/

exit

_cleanup: procedure expose (globals)
 dname=_iniv("!settings","!dname")
 if \_undef(dname) then do
  call _fileclose dname
  call _ini_delete_key dname, "settings", "bot_user_stamps"
 end /*if*/
return 1

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.5 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. _debug (globals)

     _debug=0
     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118 + 1 /* +1 added 6/23/2008 */
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365
     _baseday.2009=_baseday.2008+365+1
     _baseday.2010=_baseday.2009+365
     _baseday.2011=_baseday.2010+365
     _baseday.2012=_baseday.2011+365
     _baseday.2013=_baseday.2012+365+1
     _baseday.2014=_baseday.2013+365
     _baseday.2015=_baseday.2014+365
     _baseday.2016=_baseday.2015+365
     _baseday.2017=_baseday.2016+365+1
     _baseday.2018=_baseday.2013+365
     _baseday.2019=_baseday.2014+365
     _baseday.2020=_baseday.2015+365
     _baseday.2021=_baseday.2016+365+1
     _baseday.2022=_baseday.2013+365
     _baseday.2023=_baseday.2014+365
     _baseday.2024=_baseday.2015+365
     _baseday.2025=_baseday.2016+365+1
     _baseday.2026=_baseday.2013+365
     _baseday.2027=_baseday.2014+365
     _baseday.2028=_baseday.2015+365
     _baseday.2029=_baseday.2016+365+1
     _baseday.2030=_baseday.2013+365
     _baseday.2031=_baseday.2014+365
     _baseday.2032=_baseday.2015+365
     _baseday.2033=_baseday.2016+365+1

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _efc. _es. _et. _ep. _fc. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _bd. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _vs. _vn. _vi. _mcic. _fh. _fhp. "
     rslt=rslt||"_clv. _online. _msg _msg. _debug "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.4 **/
    _halt: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _bot_loadup v.1 **/
    _bot_loadup:

    /* check if online */
       if \_isonline(1) then call _error "you must be online to use this script."

    /* check for correct prompt */
       bot_prompt=_synchronize()
       if bot_prompt="planet" then do
        call zocsend "c ^M "
        bot_prompt=_synchronize()
       end /*if*/
       select
        when bot_prompt="command" then bot_planet=0
        when bot_prompt="citadel" then bot_planet=_get_planet_number(bot_prompt)
        when bot_prompt="bank"    then bot_planet=0
        when bot_prompt="terra"   then bot_planet=0
        when _synchronize_to_prompt("command",bot_prompt) then do; bot_planet=0; bot_prompt="command"; end
        otherwise call _quit _g.!sname1||" : please start at the command, citadel, bank, or terra prompt."
       end /*select*/

    /* load ini variables */
       load="ns rf sf bust_clear gname fname vname mname vwname lname spath lpath ldefault dname dpath trade_percent"
       sl=_ini_load_settings()
       do i=1 to _dwords(sl,";")
        s=_dword(sl,i,";")
        globals=globals||" !"||s
        interpret '!'||s||'="!"||s'
       end;
       f=0; l=""
       do i=1 to words(load)
        s=word(load,i)
        x="!"||s
        interpret s||"=_ini.!settings.x"
        interpret 'if '||s||'="##UNDEF##" then do; l=l s; f=1; end'
       end; if f then call _error "missing config variable(s):"||l; drop s sl x f l

    /* set bot name */
       bot_name=_iniv(!settings,"!bot_name")
       if _undef(bot_name) then do
        bot_name=_random_pwd(2,5)
        call _ini_write dname, "settings", "bot_name", bot_name
       end /*if*/

    /* set autoreply */
       call _add_autoreply bot_name||" bot ::", "^RUN="||_g.!sname

    /* announce script */
       call zocsend "'^M"||_g.!sname1||" : loading...^Muse "||bot_name||" ::^M^M"

    /* load more variables */
       bot_auth_list=_iniv(!settings,"!bot_auth_list"); if _undef(bot_auth_list) then bot_auth_list=""
       bot_auth_timeout=_iniv(!settings,"!bot_auth_timeout"); if _undef(bot_auth_timeout) then bot_auth_timeout=7200 /* 2 hours */

       warning=_iniv(!settings,"!warning"); if _undef(warning) then _g.!warnlist=""; else _g.!warnlist=warning
       target=_iniv(!settings,"!target");   if _undef(target) then _g.!targetlist=""; else _g.!targetlist=target
       ignore=_iniv(!settings,"!ignore");   if _undef(ignore) then _g.!ignorelist=""; else _g.!ignorelist=ignore

       alpha=_iniv(!settings,"!alpha"); if _undef(alpha) then alpha=0
       rylos=_iniv(!settings,"!rylos"); if _undef(rylos) then rylos=0
       sd=_iniv(!settings,"!sd");       if _undef(sd) then sd=0

    /* define local variables */
       locals="ans line t list i j k n s w x c sfx amt sector turns alpha rylos sd warning target ignore",
              "bot_mode bot_user bot_users. bot_cmd bot_args bot_lock bot_cmd bot_user bot_args",
              "bot_auth bot_auth_stamp. bot_auth_timeout bot_auth_list",
              "bot_name bot_prompt bot_wait bot_abort bot_sector",
              "tasks parseparams pmap code reclen count corp pwd load",
              load

    /* load game data */
       reclen=_mapinit(mname)
       call _getfigs fname, "file"
       call _getvoids vname, "file"
       call _getviews vwname
       _g.!runaway=0

    /* set default bot variables */
       bot_lock=0
       _verbose=1
       _g.!autoex=0

    /* setup starting mode */
       select
        when bot_mode="passive"   then bot_wait="::|"||_bot_passive("query wait")
        when bot_mode="finder"    then bot_wait="::|"||_bot_finder("query wait")
        otherwise call _error "unknown mode : "||bot_mode
       end /*select*/

    /* setup user accounts */
       call time "R"
       bot_auth_stamp.=-bot_auth_timeout
       bot_users.=0

       bot_users.!list="##OWNER##"
       bot_users.##OWNER##=1
       if \_undef(_iniv(!settings,"!bot_user_stamps")) then do
        list=_iniv(!settings,"!bot_user_stamps")
        do i=1 to _dwords(list,";") by 2
         bot_user=_dword(list,i,";"); n=_dword(list,i+1,";")
         if n>-bot_auth_timeout then do
          bot_auth_stamp.bot_user=n
          bot_users.bot_user=1
          bot_users.!list=_listadd(bot_user,bot_users.!list,1)
         end /*if*/
        end i /*do*/
       end /*if*/

    /* final setup */
       bot_abort=_cn9("query",bot_prompt)
       bot_sector=_getinfo("sect")
       call zocsend "'status ::^M"

    return

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _bot_global_cmds v.1 **/
    _bot_global_cmds:

     parse value _bot_parse_command(line) with bot_user ";" bot_cmd ";" bot_args

     select
      when bot_user="##OWNER##" then bot_auth=1
      when bot_lock             then bot_auth=0
      when bot_auth_stamp.bot_user+bot_auth_timeout<t & bot_cmd="use" then do
       bot_auth=_bot_validate_user(bot_user,bot_auth_list)
      end /*when*/
      when bot_auth_stamp.bot_user+bot_auth_timeout<t then bot_auth=0
      otherwise bot_auth=1
     end /*select*/
     if bot_auth then bot_auth_stamp.bot_user=t

     /* owner commands */
     if bot_user="##OWNER##" then do
      select
       when bot_cmd="auth" & bot_args="" & bot_auth_list="" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : authorized : nobody^M"
       when bot_cmd="auth" & bot_args="" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : authorized : "||bot_auth_list||"^M"
       when bot_cmd="auth" & lower(word(bot_args,1))="timeout" then do
        n=word(bot_args,2)
        if _stripint(n)=n then do
         bot_auth_timeout=max(300,n)
         if \_ini_write(dname,"settings","bot_auth_timeout",bot_auth_timeout) then nop
        end /*if*/
        call zocsend "'"||_g.!sname1||" : "||bot_name||" : authorization timeout : "||bot_auth_timeout||" seconds^M"
       end /*when*/
       when bot_cmd="auth" & lower(word(bot_args,1))="clr" then do
        bot_auth_list=""
        if \_ini_write(dname,"settings","bot_auth_list",bot_auth_list) then nop
        call zocsend "'"||_g.!sname1||" : "||bot_name||" : authorization list cleared^M"
       end /*when*/
       when bot_cmd="auth" & lower(word(bot_args,1))="add" then do
        list=substr(bot_args,wordindex(bot_args,2))
        bot_auth_list=_listadd(list,bot_auth_list,1)
        if \_ini_write(dname,"settings","bot_auth_list",bot_auth_list) then nop
        call zocsend "'"||_g.!sname1||" : "||bot_name||" : authorization added^M"
       end /*when*/
       when bot_cmd="auth" & lower(word(bot_args,1))="rem" then do
        list=substr(bot_args,wordindex(bot_args,2))
        bot_auth_list=_listrem(list,bot_auth_list)
        do i=1 to _dwords(list,";")
         n=_dword(list,i,";")
         bot_auth_stamp.n=-bot_auth_timeout
        end /*do*/
        if \_ini_write(dname,"settings","bot_auth_list",bot_auth_list) then nop
        call zocsend "'"||_g.!sname1||" : "||bot_name||" : authorization removed^M"
       end /*when*/
       when bot_cmd="auth" then call zocsend "'help auth ::^M"

       when bot_cmd="lock" then do
        bot_lock=abs(bot_lock-1)
        call zocsend "'status ::^M"
       end /*when*/
       when bot_cmd="name" then do
        call _rem_autoreply bot_name||" bot ::"
        bot_name=bot_args
        if \_ini_write(dname,"settings","bot_name",bot_name) then nop
        call _add_autoreply bot_name||" bot ::", "^RUN="||_g.!sname
        call zocsend "'status ::^M"
       end /*when*/
       when bot_cmd="q" then do
        call _cleanup
        call zocsend "'"||_g.!sname1||" : "||bot_name||" : goodbye^M"
        exit
       end /*when*/
       otherwise nop
      end /*select*/
     end /*if*/

     select

      when bot_cmd="validate" then do
       pwd=left(translate(bot_args," ","^"),3)
       if pwd=bot_args then call zocsend "'"||pwd||"^M"
      end /*when*/

      when \bot_auth then nop

      when bot_cmd="use" & bot_args=bot_name then do
       bot_users.bot_user=abs(bot_users.bot_user-1)
       bot_users.!list=_listadd(bot_user,bot_users.!list,1)
       call zocsend "'"||_g.!sname1||" : "||bot_name||" : user "||word("removed added",bot_users.bot_user+1)||" : "||bot_user||"^M"
      end /*when*/
      when bot_cmd="use" & bot_users.bot_user then do
       bot_users.bot_user=0
       call zocsend "'"||_g.!sname1||" : "||bot_name||" : user removed : "||bot_user||"^M"
      end /*when*/

      when bot_cmd="users" then do
       k=""
       do i=1 to _dwords(bot_users.!list,";")
        j=_dword(bot_users.!list,i,";")
        if bot_users.j then k=k||" "||translate(j,"_"," ")
       end /*do*/
       if k="" then k=" none"
       call zocsend "'"||_g.!sname1||" : "||bot_name||" : users :"||k||"^M"
      end /*when*/

      when bot_cmd="status" | bot_cmd="st" then do
       bot_cmd="status"
       bot_prompt=_synchronize()
       call zocsend "'"||_g.!sname1||" : "||bot_name||" : build "||_g.!sbuild||" : "||bot_mode||_dword("^M; : LOCKED^M",bot_lock+1,";")
      end /*when*/

      when \bot_users.bot_user then nop

      when bot_cmd="verbose" then do
       if _stripint(bot_args)=bot_args then _verbose=bot_args>0
                                       else _verbose=abs(_verbose-1)
       call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : "||word("off on",_verbose+1)||"^M"
      end /*when*/


      when bot_cmd="details" | bot_cmd="dt" then do
       bot_cmd="details"
       bot_prompt=_synchronize()
       parse value _getinfo("turns;sect") with turns ";" bot_sector
       call zocsend "'^M"
       call zocsend _g.!sname1||" : "||bot_name||" : build "||_g.!sbuild||" : "||bot_mode||_dword("^M; : LOCKED^M",bot_lock+1,";")
                                  call zocsend "  current sector : "||bot_sector||"^M"
                                  call zocsend "  current prompt : "||bot_prompt||"^M"
                                  call zocsend "  verbose mode   : "||word("off on",_verbose+1)||"^M"
                                  call zocsend "  key aborts cn9 : "||bot_abort||"^M"
                                  call zocsend "  turns          : "||turns||"^M"
       if bot_planet>0       then call zocsend "  using planet # : "||bot_planet||"^M"
       if _g.!targetlist\="" then call zocsend "  targeting      : "||_g.!targetlist||"^M"
       if _g.!ignorelist\="" then call zocsend "  ignoring       : "||_g.!ignorelist||"^M"
       call zocsend "^M"
      end /*when*/

      when bot_cmd="turns" then call zocsend "'"||_getinfo("turns")||"^M"


      when bot_cmd="setplanet" then do
       bot_prompt=_synchronize()
       select
        when _stripint(bot_args)=bot_args then do
         bot_planet=bot_args
         call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : owner is using planet "||bot_planet||"^M"
        end /*when*/
        when bot_prompt="planet" | bot_prompt="citadel" then do
         bot_planet=_get_planet_number(bot_prompt)
         call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : owner is on planet "||bot_planet||"^M"
        end /*when*/
        otherwise call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : unable to get planet number^M"
       end /*select*/
      end /*when*/


      when bot_cmd="qs" then do
       s=_getinfo("all")
       sfx=word("B M K",4-(length(_qs.!creds)-1)%3)
       amt=_qs.!creds; do while amt>999; amt=amt%1000; end; amt=amt||sfx
       call zocsend "'^M"||_g.!sname1||" : "||bot_name||" : quickstats^M"
       call zocsend " sect" _pad(_qs.!sect, 10,"R") "| ship" _pad(_qs.!ship,4,"R") "| figs" _pad(_qs.!figs, 6,"R") "| armd" _pad(_qs.!armd,   3,"R") "| twarp" _pad(_qs.!twarp,   6,"R")||"^M"
       call zocsend " trns" _pad(_qs.!turns,10,"R") "| hlds" _pad(_qs.!hlds,4,"R") "| shld" _pad(_qs.!shlds,6,"R") "| lmpt" _pad(_qs.!lmpt,   3,"R") "| plscn" _pad(_qs.!plscn,   6,"R")||"^M"
       call zocsend " crds" _pad(_qs.!creds,10,"R") "| fuel" _pad(_qs.!ore, 4,"R") "| phot" _pad(_qs.!phot, 6,"R") "| gtrp" _pad(_qs.!gtorp,  3,"R") "| lrs  " _pad(_qs.!lrs,     6,"R")||"^M"
       call zocsend " aln " _pad(_qs.!aln,  10,"R") "| orgs" _pad(_qs.!org, 4,"R") "| corb" _pad(_qs.!crbo, 6,"R") "| adet" _pad(_qs.!atmdt,  3,"R") "| psprb" _pad(_qs.!psprb,   6,"R")||"^M"
       call zocsend " exp " _pad(_qs.!exp,  10,"R") "| equ " _pad(_qs.!equ, 4,"R") "| mdis" _pad(_qs.!mdis, 6,"R") "| clck" _pad(_qs.!clks,   3,"R") "| shtyp" _pad(_qs.!shiptype,6,"R")||"^M"
       call zocsend " corp" _pad(_qs.!corp, 10,"R") "| colo" _pad(_qs.!col, 4,"R") "| eprb" _pad(_qs.!eprb, 6,"R") "| beac" _pad(_qs.!beacns, 3,"R") "|^M^M"
      end /*when*/

      when bot_cmd="last" then do
       if _stripint(bot_args)=bot_args then n=max(1,bot_args); else n=30
       list=_get_lines_above(n)
       call zocsend "'^M"
       do i=1 to _dwords(list,";")
        call zocsend _dword(list,i,";")||"^M"
       end /*do*/
       call zocsend "^M"
      end /*when*/

      when bot_cmd="modes" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : modes : passive finder worker reloader predicter predrop^M"
      when bot_cmd="mode"  then do
       bot_prompt=_synchronize()
       call _getinfo
       list=""
       do i=1 to _dwords(bot_users.!list,";")
        n=_dword(bot_users.!list,i,";")
        if n\="##OWNER##" then list=list||";"||n||";"||format(bot_auth_stamp.n-t,,0)
       end /*do*/
       call _ini_write dname, "settings", "bot_user_stamps", substr(list,2)
       call _iniv "!settings", "!bot_user_stamps", substr(list,2)
       select

        /* PASSIVE */
           when bot_args="passive" then do; bot_mode="passive";  bot_wait="::|"||_bot_passive("query wait"); end

        /* WORKER */
           when bot_args="worker" & \_fileexists(spath||"_bot.zrx") then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_args||" : _bot.zrx is missing^M"
           when bot_args="worker" then do; drop (globals) (locals); call zocdostring "^RUN=_bot.zrx worker"; exit; end

        /* FINDER */
           when bot_args="finder" then do; bot_mode="finder"; bot_wait="::|"||_bot_finder("query wait"); end

        /* RELOADER */
           when bot_args="reloader" & \_fileexists(spath||"_bat.zrx") then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_args||" : _bat.zrx is missing^M"
           when bot_args="reloader" & bot_prompt="command" then do; drop (globals) (locals); call zocdostring "^RUN=_bat.zrx reloader"; exit; end
           when bot_args="reloader" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_args||" : please start at command prompt^M"

        /* PREDICTER */
           when bot_args="predicter" & \_fileexists(spath||"_bat.zrx") then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_args||" : _bat.zrx is missing^M"
           when bot_args="predicter" & bot_prompt="citadel" then do; drop (globals) (locals); call zocdostring "^RUN=_bat.zrx predicter"; exit; end
           when bot_args="predicter" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_args||" : please start at citadel prompt^M"

        /* PREDROP */
           when bot_args="predrop" & \_fileexists(spath||"_bat.zrx") then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_args||" : _bat.zrx is missing^M"
           when bot_args="predrop" & bot_prompt="citadel" then do; drop (globals) (locals); call zocdostring "^RUN=_bat.zrx predrop"; exit; end
           when bot_args="predrop" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_args||" : please start at citadel prompt^M"

        otherwise call zocsend "'"||_g.!sname1||" : "||bot_name||" : unknown mode : "||bot_args||"^M"

       end /*select*/
       call zocsend "'status ::^M"
       return 1
      end /*when*/

      when bot_cmd="cn9" & _listin(bot_args,"spaces;allkeys") then do
       bot_prompt=_synchronize()
       bot_abort=_cn9(bot_args,bot_prompt)
       call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : "||bot_abort||"^M"
      end /*when*/
      when bot_cmd="cn9" & bot_args="" then do
       bot_abort=_cn9("toggle",bot_prompt)
       call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : "||bot_abort||"^M"
      end /*when*/

      when (bot_cmd="pickup" | bot_cmd="saveme") & bot_user="##OWNER##" then nop
      when bot_cmd="pickup" | bot_cmd="saveme" then do
       bot_prompt=_synchronize()
       if bot_prompt="citadel" then do
        sector=_stripint(word(bot_args,1))
        if sector=0 then do
         call zocsend "x"
         sector=_get_corpie_ta(bot_user)
         call zocsend "q"
        end /*if*/
        select
         when sector="" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : invalid sector^M"
         when sector>ns then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : invalid sector^M"
         when sector<1  then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : invalid sector^M"
         otherwise do
          if _pwarp(sector,20,0) then do
           bot_sector=sector
           call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : planet #"||bot_planet||" to "||sector||" : success on attempt "||_msg.!pwarp||"^M"
          end /*when*/
          else call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : error : "||_msg||" : "||_msg.!pwarp||" attempts^M"
         end /*otherwise*/
        end /*select*/
       end /*if*/
       else call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : failed, owner not in citadel^M"
      end /*when*/

      /* cim */
         when bot_cmd="cim" then do

          select
           when bot_args="" then tasks="portcim;sectorcim"
           when bot_args="p" then tasks="portcim"
           when bot_args="s" then tasks="sectorcim"
           otherwise tasks=""
          end /*select*/

          parseparams='"/p:'||dpath||'"'
          parseparams=parseparams||' "/g:'||lpath||gname||'" /n:'||ns
          if alpha\="" & alpha\=0 then parseparams=parseparams||" /al:"||alpha
          if rylos\="" & rylos\=0 then parseparams=parseparams||" /ry:"||rylos
          if sd\=""    & sd\=0    then parseparams=parseparams||" /sd:"||sd

          pmap=1
          select
           when _fileexists(spath||"pmap2.exe") then pname=spath||"pmap2.exe"
           when _fileexists(lpath||"pmap2.exe") then pname=lpath||"pmap2.exe"
           when _fileexists(spath||"pmap2a.exe") then pname=spath||"pmap2a.exe"
           when _fileexists(lpath||"pmap2a.exe") then pname=lpath||"pmap2a.exe"
           otherwise pmap=0
          end /*if*/

          call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh in progress^M"
          call _logcim lpath, gname, tasks, ldefault
          call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : parsing data^M"
          call _fileclose mname
          if pmap then do
           code=zocexec('"'||pname||'" '||parseparams,0)
           if code=0 then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : parsing completed^M"
           else call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : parsing failed! reloading old data^M"
          end /*if*/
          else call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : pmap not present! reloading old data^M"
          reclen=_mapinit(mname,1)

         end /*when*/



      /* lift from planet */
         when bot_cmd="lift" then do
          bot_prompt=_synchronize()
          call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : lifting^M"
          select
           when bot_prompt="command" then nop
           when bot_prompt="computer_cit"  then do; call zocsend "qqq"; bot_prompt="command"; end
           when bot_prompt="corporate_cit" then do; call zocsend "qqq"; bot_prompt="command"; end
           when bot_prompt="citadel"       then do; call zocsend "qq";  bot_prompt="command"; end
           when bot_prompt="planet"        then do; call zocsend "q";   bot_prompt="command"; end
           when bot_prompt="corporate"     then do; call zocsend "q";   bot_prompt="command"; end
           when bot_prompt="computer"      then do; call zocsend "q";   bot_prompt="command"; end
           when bot_prompt="bank"          then do; call zocsend "qq";  bot_prompt="command"; end
           otherwise call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : unable to lift from the "||bot_prompt||" prompt^M"
          end /*select*/
         end /*when*/

      /* land on planet */
         when bot_cmd="land" then do
          bot_prompt=_synchronize()
          n=_stripint(word(bot_args,1))
          if n=0 then n=bot_planet
          select
           when n="" | n=0 then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : bad or missing planet number^M"
           when bot_prompt="command" then do
            call zocsend "l z^H^H"||n||"^M^M"
            bot_prompt=_synchronize()
            if bot_prompt="planet" then do
             bot_planet=_get_planet_number(bot_prompt)
             call zocsend "c^M"
             bot_prompt=_synchronize()
             call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : success!^M"
            end /*if*/
           end /*when*/
           otherwise call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : unable to land from the "||bot_prompt||" prompt^M"
          end /*select*/
         end /*when*/

      /* macro */
         when bot_cmd="mac" then do
          call zocsend bot_args
          call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : done.^M"
         end /*when*/

      /* macro x N*/
         when bot_cmd="nmac" & words(bot_args)<2 then call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : bad or missing argument^M"
         when bot_cmd="nmac" then do
          n=_stripint(word(bot_args,1))
          mac=substr(bot_args,wordindex(bot_args,2))
          call _send255 copies(mac,n)
          call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : done.^M"
         end /*when*/

      /* mail */
         when bot_cmd="mail" then do
          bot_prompt=_synchronize()
          if bot_prompt="command" | bot_prompt="citadel" then do
           call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : reading^M"
           call _twmsg "off"
           call _read_mail lname, dname
           call zocsend "|'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : finished^M"
          end /*if*/
          else call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : failed : owner is not at the command or citadel prompt.^M"
         end /*when*/

      /* figs */
         when bot_cmd="figs" then do
          bot_prompt=_synchronize()
          if bot_planet=0 then bot_planet=_get_planet_number(bot_prompt)
          select
           when bot_prompt="command" then do
            call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh in progress^M"
            count=_getfigs(fname)
            call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
           end /*when*/
           when bot_prompt="planet" & bot_planet>0 then do
            call zocsend "q'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh in progress^M"
            count=_getfigs(fname)
            call zocsend "l"||bot_planet||"^M'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
           end /*when*/
           when bot_prompt="citadel" & bot_planet>0 then do
            call zocsend "qq'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh in progress^M"
            count=_getfigs(fname)
            call zocsend "l"||bot_planet||"^Mc'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
           end /*when*/
           otherwise call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh failed, player at "||bot_prompt||" prompt^M"
          end /*select*/
         end /*when*/

      /* voids */
         when bot_cmd="voids" then do
          bot_prompt=_synchronize()
          if bot_planet=0 then bot_planet=_get_planet_number(bot_prompt)
          select
           when bot_prompt="command" | bot_prompt="citadel" then do
            call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh in progress^M"
            count=_getvoids(vname)
            call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
           end /*when*/
           when bot_prompt="planet" then do
            call zocsend "q'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh in progress^M"
            count=_getvoids(vname)
            call zocsend "l"||bot_planet||"^M'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
           end /*when*/
           otherwise call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : refresh failed, player at "||bot_prompt||" prompt^M"
          end /*select*/
         end /*when*/

      /* exclude */
         when bot_cmd="autoex" then do
          if _stripint(bot_args)=bot_args then _g.!autoex=bot_args>0
                                          else _g.!autoex=abs(_g.!autoex-1)
          call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : "||word("off on",_g.!autoex+1)||"^M"
         end /*when*/
         when bot_cmd="ex" then do
          n=word(bot_args,1)
          select
           when n="" then do
            list=""
            do i=1 to ns
             if _ex.i then list=list i
            end /*do*/
            list=strip(list)
            call zocsend "'^M"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : list : "||list||"^M^M"
           end /*when*/
           when n=0 then do; _ex.=0; call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : excluded search sectors cleared.^M"; end
           when _stripint(n)>0 then do; n=_stripint(n); _ex.n=1; call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : sector "||n||" excluded from all queries.^M"; end
           otherwise call zocsend "'"||_g.!sname1||" : "||bot_name||" : "||bot_cmd||" : invalid parameter.^M"
          end /*select*/
         end /*when*/

      when bot_cmd="ping" then do
       call _ping 4
      end /*when*/

      /* help commands */
      when bot_cmd="help" & bot_args="status"    then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : status : displays the current script status^M"
      when bot_cmd="help" & bot_args="details"   then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : details : displays more status details^M"
      when bot_cmd="help" & bot_args="mode"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : mode [mode] : switch the bot mode^M"
      when bot_cmd="help" & bot_args="modes"     then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : modes : list the bot modes^M"
      when bot_cmd="help" & bot_args="use"       then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : use [botname] : enables usage of the bot^M"
      when bot_cmd="help" & bot_args="users"     then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : users : lists the current bot users^M"
      when bot_cmd="help" & bot_args="target"    then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : target [add|rem|clr] [players] : target a player^M"
      when bot_cmd="help" & bot_args="ignore"    then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : ignore [add|rem|clr] [players] : ignore a player^M"
      when bot_cmd="help" & bot_args="verbose"   then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : verbose [on|off] : turn on/off verbose messages^M"
      when bot_cmd="help" & bot_args="page"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : page : page the script owner^M"
      when bot_cmd="help" & bot_args="cn9"       then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : cn9 [spaces|allkeys] : set key aborts^M"
      when bot_cmd="help" & bot_args="qs"        then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : qs : quick stats^M"
      when bot_cmd="help" & bot_args="last"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : last [num] : see the last lines on subspace^M"
      when bot_cmd="help" & bot_args="ping"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : ping : report telnet ping times^M"
      when bot_cmd="help" & bot_args="pickup"    then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : pickup [num] : emergency planet pickup^M"
      when bot_cmd="help" & bot_args="auth"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : auth [add|rem|clr|timeout] [players|num] : authorize a player or change the auth timeout^M"
      when bot_cmd="help" & bot_args="lock"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : lock : lock the bot from everyone but owner^M"
      when bot_cmd="help" & bot_args="name"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : name : rename the bot^M"
      when bot_cmd="help" & bot_args="setplanet" then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : setplanet [num] : set the planet number^M"
      when bot_cmd="help" & bot_args="turns"     then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : turns : query available turns^M"
      when bot_cmd="help" & bot_args="cim"       then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : cim [s|p] : get cim data^M"
      when bot_cmd="help" & bot_args="figs"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : figs : refresh fighter list^M"
      when bot_cmd="help" & bot_args="voids"     then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : voids : refresh void list^M"
      when bot_cmd="help" & bot_args="mail"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : mail : read game mail^M"
      when bot_cmd="help" & bot_args="lift"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : lift : lift off from a planet or prompt^M"
      when bot_cmd="help" & bot_args="land"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : land [num] : land on a planet^M"
      when bot_cmd="help" & bot_args="ex"        then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : ex [sector] : exclude a sector from calculations^M"
      when bot_cmd="help" & bot_args="autoex"    then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : autoex : toggle automatic exclusions for every search^M"
      when bot_cmd="help" & bot_args="mac"       then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : mac [zocmacro] : send the zoc macro^M"
      when bot_cmd="help" & bot_args="nmac"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : nmac [num] [zocmacro] : send the zoc macro num times^M"
      when bot_cmd="help" & bot_args="help"      then call zocsend "'"||_g.!sname1||" : "||bot_name||" : help : help [topic] : provides help on bot commands^M"
      when bot_cmd="help" & bot_args=""          then do
       call zocsend "'^M"||_g.!sname1||" : "||bot_name||" : help : type 'help [command] for more help^M"
       call zocsend "  global commands : autoex cim cn9 details ex figs help ignore^M"
       call zocsend "                    land last lift mac mail mode modes^M"
       call zocsend "                    nmac page pickup ping qs setplanet^M"
       call zocsend "                    status target turns use users verbose voids^M"
       if bot_user="##OWNER##" then call zocsend "  owner commands  : auth lock name q^M"
       call zocsend "^M"
      end /*when*/

      otherwise nop
     end /*select*/
     bot_auth=bot_users.bot_user & bot_auth_stamp.bot_user+bot_auth_timeout>t & (\bot_lock | bot_user="##OWNER##")

    return 0

/** _bot_passive v.1 **/
    _bot_passive: procedure expose (globals)
     select
      when lower(arg(1))="query wait" then return "INACTIVITY WARNING;lifts off from"
      otherwise nop
     end /*select*/
     ans=arg(1)
     select
      when ans=1 then call zocsend "^["
      when ans=2 then do
       if _synchronize()="citadel" then call zocsend "s ^M"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=ans
    return rslt

        /*
               /* plock */
                  when cmd="plock" then call zocsend "'"||pre||" : "||cmd||" : this function disabled.^M"
                  when cmd="plock" then do
                   prompt=_synchronize()
                   select
                    when prompt="citadel" then do; call zocsend "qqzn"; prompt="command"; end
                    when prompt="planet"  then do; call zocsend "qzn"; prompt="command"; end
                    otherwise nop
                   end /*select*/
                   if prompt="command" then do
                    call _cn9 "spaces"
                    abort="##SPACES##"
                    call zocsend "'"||pre||" : "||cmd||" : send 'stop :; to stop the lock.^M"
                    call _planet_spammer
                    call zocsend "'"||pre||" : "||cmd||" : plock ended.^M"
                   end /*if*/
                   else call zocsend "'"||pre||" : "||cmd||" : failure, owner at "||prompt||" prompt.^M"
                  end /*when*/
        */

/** _bot_finder v.2 **/
    _bot_finder: procedure expose (globals)
     select
      when lower(arg(1))="query wait" then return "INACTIVITY WARNING|entered sector.|activated|Ether Probe.|I.D. code.|launched a P-Missile in sector|] (?=Help)? :|defending this sector?|Script terminated: scripts\1_Login"
      otherwise nop
     end /*select*/
     ans=arg(1)
     line=arg(2)
     user=arg(3)
     cmd=arg(4)
     args=arg(5)
     name=arg(6)
     mode=arg(7)
     prompt=arg(8)
     sector=arg(9)
     planet=arg(10)
     auth=arg(11)
     abort=arg(12)
     gname=arg(13)
     dpath=arg(14)
     dname=arg(15)
     fname=arg(16)
     vname=arg(17)
     lname=arg(18)
     spath=arg(19)
     lpath=arg(20)
     ldefault=arg(21)
     mname=arg(22)
     reclen=arg(23)
     ns=arg(24)
     sf=arg(25)
     rf=arg(26)
     sd=arg(27)
     alpha=arg(28)
     rylos=arg(29)
     pre=_g.!sname1||" : "||name
     select

      /* user commands */
         when ans=0 & auth then do
          select

           /* status */
              when cmd="status" then do
               sector=_getinfo("sect")
               if sector\=_g.!runaway.!base & _g.!runaway then do
                call zocsend "'"||pre||" : runaway : mapping...^M"
                call _mapdist sector, 0, mname, reclen, 1, _g.!runaway.!dist+3
                _g.!runaway.!base=sector
               end /*if*/
              end /*do*/

           /* details */
              when cmd="details" then do
               sector=_qs.!sect
               if sector\=_g.!runaway.!base & _g.!runaway then do
                call zocsend "'"||pre||" : runaway : mapping...^M"
                call _mapdist sector, 0, mname, reclen, 1, _g.!runaway.!dist+3
                _g.!runaway.!base=sector
               end /*if*/
               call zocsend "'^M"
               if words(_g.!warnlist)>0 then do
                do i=1 to words(_g.!warnlist)
                 s=_dword(word(_g.!warnlist,i),1,",")
                 d=_dword(word(_g.!warnlist,i),2,",")
                 call zocsend "  warning point  : "||_pad(s,length(ns),"R")||", "||_pad(d,2,"R")||" hops^M"
                end /*do*/
               end /*if*/
               if _g.!runaway then call zocsend "  runaway        : ACTIVE in "||_g.!runaway.!base||" for "||_g.!runaway.!dist||" hop(s)^M"
               call zocsend "^M"
              end /*when*/

           /* runaway */
              when cmd="runaway" then do
               prompt=_synchronize()
               sector=_getinfo("sect")
               num=max(_stripint(word(args,1)),0)
               select
                when prompt="citadel" & num=0 then _g.!runaway=0
                when prompt="citadel"         then do; _g.!runaway=1; _g.!runaway.!dist=num; _g.!runaway.!base=sector; end
                otherwise do
                 call zocsend "'"||pre||" : "||cmd||" only works at the citadel prompt^M"
                 _g.!runaway=0
                end /*otherwise*/
               end /*select*/
               if _g.!runaway then do
                call zocsend "'"||pre||" : "||cmd||" : mapping...^M"
                call _mapdist sector, 0, mname, reclen, 1, _g.!runaway.!dist+3
                call zocsend "'"||pre||" : "||cmd||" : ACTIVE in "||sector||" for "||_g.!runaway.!dist||" hop(s)^M"
               end /*if*/
               else call zocsend "'"||pre||" : "||cmd||" : inactive^M"
              end /*when*/

           /* fig */
              when cmd="fig" & user="##OWNER##" & (args="" | lower(args)="ta") then do
               sector=_getinfo("sect")
               _f.sector=1
              end /*when*/
              when cmd="fig" & (args="" | lower(args)="ta") then do
               prompt=_synchronize()
               if prompt="citadel" | prompt="command" then do
                call zocsend _list_select(prompt,"citadel;command","x;t")
                num=_get_corpie_ta(user)
                call zocsend "q"
                if num>0 & num<=ns then do
                 _f.num=1
                 call zocsend "'"||pre||" : "||cmd||" : "||num||" recorded^M"
                end /*if*/
               end /*when*/
               else call zocsend "'"||pre||" : "||cmd||" : failed : owner not in citadel or at command^M"
              end /*when*/
              when cmd="fig" then do
               num=_stripint(word(args,1))
               if num>0 & num<=ns then do
                _f.num=1
                call zocsend "'"||pre||" : "||cmd||" : "||num||" recorded^M"
               end /*if*/
              end /*when*/

           /* warn */
              when cmd="warn" then do
               s=_stripint(word(args,1))
               d=_stripint(word(args,2))
               if s\=word(args,1) then s=""
               if d\=word(args,2) then d=""
               select
                when s="" then call zocsend "'"||pre||" : "||cmd||" : invalid command format^M"
                when d=0 | (d="" & s<0) then do
                 templist=""
                 do i=1 to words(_g.!warnlist)
                  s=abs(s)
                  s2=_dword(word(_g.!warnlist,i),1,",")
                  d2=_dword(word(_g.!warnlist,i),2,",")
                  if s\=s2 then templist=templist||" "||s2||","||d2
                 end
                 _g.!warnlist=strip(templist)
                 call zocsend "'"||pre||" : "||cmd||" : warning removed for sector "||s||"^M"
                 if \_ini_write(dname,"settings","warning",_g.!warnlist) then nop
                end /*when*/
                when d="" then call zocsend "'"||pre||" : "||cmd||" : invalid command format^M"
                otherwise do
                 _g.!warnlist=_g.!warnlist||" "||s||","||d
                 call zocsend "'"||pre||" : "||cmd||" : mapping...^M"
                 call _mapdist s, 0, mname, reclen, 1, d
                 call zocsend "'"||pre||" : "||cmd||" : warning added for sector "||s||" up to "||d||" hops^M"
                 if \_ini_write(dname,"settings","warning",_g.!warnlist) then nop
                end /*otherwise*/
               end /*select*/
              end /* when*/

           /* finder queries */
              when cmd="f" then do
               strt=_stripint(word(args,1))
               if strt\=word(args,1) then strt=""
               select
                when strt="" & user="##OWNER##" then do; strt=_getinfo("sect"); sector=strt; end
                when strt="" then do
                 prompt=_synchronize()
                 if _listin(prompt,"command;citadel;corporate") then do
                  call zocsend _list_select(prompt,"command;citadel;corporate","t;x;")
                  strt=_get_corpie_ta(user)
                  call zocsend _list_select(prompt,"command;citadel;corporate","q;q;")
                 end /*if*/
                end /*when*/
                otherwise nop
               end /*select*/
               select
                when strt="" then call zocsend "'"||pre||" : invalid sector^M"
                when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
                when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
                otherwise do
                 if word(args,2)="v" then srch="r:1;f:1;uv:1"
                 else srch="r:1;f:1"
                 find=_mapfind(strt,srch,mname,reclen,255)
                 if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
                           else call _bot_finder_report "nearest fig", strt, find, srch
                end /*otherwise*/
               end /*select*/
              end /*when*/

              when cmd="nf" then do
               strt=_stripint(word(args,1))
               if strt\=word(args,1) then strt=""
               select
                when strt="" & user="##OWNER##" then do; strt=_getinfo("sect"); sector=strt; end
                when strt="" then do
                 prompt=_synchronize()
                 if _listin(prompt,"command;citadel;corporate") then do
                  call zocsend _list_select(prompt,"command;citadel;corporate","t;x;")
                  strt=_get_corpie_ta(user)
                  call zocsend _list_select(prompt,"command;citadel;corporate","q;q;")
                 end /*if*/
                end /*when*/
                otherwise nop
               end /*select*/
               select
                when strt="" then call zocsend "'"||pre||" : invalid sector^M"
                when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
                when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
                otherwise do
                 _f.1=1; _f.2=1; _f.3=1; _f.4=1; _f.5=1; _f.6=1; _f.7=1; _f.8=1; _f.9=1; _f.10=1; _f.sd=1;
                 srch="f:0"
                 find=_mapfind(strt,srch,mname,reclen,255)
                 if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
                           else call _bot_finder_report "nearest no-fig", strt, find, srch
                 _f.1=0; _f.2=0; _f.3=0; _f.4=0; _f.5=0; _f.6=0; _f.7=0; _f.8=0; _f.9=0; _f.10=0; _f.sd=0;
                end /*otherwise*/
               end /*select*/
              end /*when*/

              when cmd="de" then do
               strt=_stripint(word(args,1))
               if strt\=word(args,1) then strt=""
               select
                when strt="" & user="##OWNER##" then do; strt=_getinfo("sect"); sector=strt; end
                when strt="" then do
                 prompt=_synchronize()
                 if _listin(prompt,"command;citadel;corporate") then do
                  call zocsend _list_select(prompt,"command;citadel;corporate","t;x;")
                  strt=_get_corpie_ta(user)
                  call zocsend _list_select(prompt,"command;citadel;corporate","q;q;")
                 end /*if*/
                end /*when*/
                otherwise nop
               end /*select*/
               select
                when strt="" then call zocsend "'"||pre||" : invalid sector^M"
                when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
                when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
                otherwise do
                 srch="f:0;d:1;e:0"
                 find=_mapfind(strt,srch,mname,reclen,255)
                 if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
                           else call _bot_finder_report "nearest unexp deadend", strt, find, srch
                 _sv.find=1
                end /*otherwise*/
               end /*select*/
              end /*when*/

              when cmd="p" then do
               strt=_stripint(word(args,1))
               if strt\=word(args,1) then strt=""
               select
                when strt="" & user="##OWNER##" then do
                 strt=_getinfo("sect"); sector=strt
                 type=lower(word(args,1))
                end /*when*/
                when strt="" then do
                 prompt=_synchronize()
                 if _listin(prompt,"command;citadel;corporate") then do
                  call zocsend _list_select(prompt,"command;citadel;corporate","t;x;")
                  strt=_get_corpie_ta(user)
                  call zocsend _list_select(prompt,"command;citadel;corporate","q;q;")
                  type=lower(word(args,1))
                 end /*if*/
                end /*when*/
                otherwise type=lower(word(args,2))
               end /*select*/
               select
                when strt="" then call zocsend "'"||pre||" : invalid sector^M"
                when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
                when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
                when \(verify(type,"xbs")=0 & length(type)=3) then call zocsend "'"||pre||" : invalid port type "||type||"^M"
                otherwise do
                 srch="pt:"||type
                 find=_mapfind(strt,srch,mname,reclen,255)
                 if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
                           else call _bot_finder_report "nearest port", strt, find, srch
                end /*otherwise*/
               end /*select*/
              end /*when*/

              when cmd="fp" then do
               strt=_stripint(word(args,1))
               if strt\=word(args,1) then strt=""
               select
                when strt="" & user="##OWNER##" then do
                 strt=_getinfo("sect"); sector=strt
                 type=lower(word(args,1))
                end /*when*/
                when strt="" then do
                 prompt=_synchronize()
                 if _listin(prompt,"command;citadel;corporate") then do
                  call zocsend _list_select(prompt,"command;citadel;corporate","t;x;")
                  strt=_get_corpie_ta(user)
                  call zocsend _list_select(prompt,"command;citadel;corporate","q;q;")
                  type=lower(word(args,1))
                 end /*if*/
                end /*when*/
                otherwise type=lower(word(args,2))
               end /*select*/
               select
                when strt="" then call zocsend "'"||pre||" : invalid sector^M"
                when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
                when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
                when \(verify(type,"xbs")=0 & length(type)=3) then call zocsend "'"||pre||" : invalid port type "||type||"^M"
                otherwise do
                 srch="f:1;pt:"||type
                 find=_mapfind(strt,srch,mname,reclen,255)
                 if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
                           else call _bot_finder_report "nearest port", strt, find, srch
                end /*otherwise*/
               end /*select*/
              end /*when*/

              when cmd="cs" then do
               strt=_stripint(word(args,1))
               if strt\=word(args,1) then strt=""
               select
                when strt="" & user="##OWNER##" then do
                 strt=_getinfo("sect"); sector=strt
                 srch=word(args,1)
                end /*when*/
                when strt="" then do
                 prompt=_synchronize()
                 if _listin(prompt,"command;citadel;corporate") then do
                  call zocsend _list_select(prompt,"command;citadel;corporate","t;x;")
                  strt=_get_corpie_ta(user)
                  call zocsend _list_select(prompt,"command;citadel;corporate","q;q;")
                  srch=word(args,1)
                 end /*if*/
                end /*when*/
                otherwise srch=word(args,2)
               end /*select*/
               select
                when strt="" then call zocsend "'"||pre||" : invalid sector^M"
                when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
                when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
                otherwise do
                 find=_mapfind(strt,srch,mname,reclen,255)
                 if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
                           else call _bot_finder_report "nearest matching", strt, find, srch
                end /*otherwise*/
               end /*select*/
              end /*when*/

           /* path */
              when cmd="path" then do
               a=_stripint(word(args,1))
               b=_stripint(word(args,2))
               if a<=0 | b<=0 |a>ns | b>ns then call zocsend "'invalid parameters^M"
               else do
                call _mapdist a, b, mname, reclen, 0, 255
                if _dist.a.b=255 then call zocsend "'unable to find the path^M"
                                 else call zocsend "'"||translate(_path.a.b,">",";")||"^M"
               end /*else*/
              end /*when*/

           /* help */
              when cmd="help" then do
               select
                when args=""         then call zocsend "'  "||mode||" commands : warn fig f nf p fp de cs runaway^M"
                when args="warn"     then call zocsend "'"||pre||" : help : warn [sector] [distance] : set a warning point^M"
                when args="fig"      then call zocsend "'"||pre||" : help : fig [sector|ta] : record a fig^M"
                when args="f"        then call zocsend "'"||pre||" : help : f [sector] : find nearest fig^M"
                when args="nf"       then call zocsend "'"||pre||" : help : nf [sector] : find nearest non-fig sector^M"
                when args="p"        then call zocsend "'"||pre||" : help : p [sector] [xxx]: find nearest port of type xxx^M"
                when args="fp"       then call zocsend "'"||pre||" : help : fp [sector] [xxx]: find nearest figged port of type xxx^M"
                when args="de"       then call zocsend "'"||pre||" : help : de [sector] : find nearest deadend^M"
                when args="cs"       then call zocsend "'"||pre||" : help : cs [sector] [searchstring] : find nearest match^M"
                when args="runaway"  then call zocsend "'"||pre||" : help : runaway [hops] : runaway defense for enemy within N hops^M"
                otherwise nop
               end /*select*/
              end /*when*/

              otherwise nop
          end /*select*/
         end /*when*/

      /* inactivity */
         when ans=1 then call zocsend "^["

      /* fighter and limpet reports */
         when ans=2 | ans=3 then do
          if ans=2 then do
           parse var line temp "Deployed Fighters Report Sector " target ": " player "entered sector." .
           if pos("'s",player)>0 then do
            ship=substr(player,lastpos("'s",player)+3)
            player=left(player,lastpos("'s",player)-1)
           end /*if*/
           else do
            player="fighter"
            ship=""
           end /*else*/
          end /*if*/
          else do
           parse var line temp "Limpet mine in " target " activated"
           player="limpet"
           ship=""
          end /*else*/
          _f.target=0
          if strip(temp)="" then do
           if _g.!runaway then do
            if _dist.target.sector<255 then call zocsend "'"||pre||" : runaway : "||player||" is "||_dist.target.sector||" hop(s)^M"
            if _dist.target.sector<=_g.!runaway.!dist then do
             _ex.sector=1
             srch="f:1;d:1;tm:>2;pt:sxx"
             do forever
              new_loc=_mapfind(sector,srch,mname,reclen,255)
              select
               when new_loc=0 & srch="f:1;d:1;tm:>2;pt:sxx" then srch="f:1;d:1;tm:>2"
               when new_loc=0 & srch="f:1;d:1;tm:>2"        then srch="f:1;pt:sxx"
               when new_loc=0 & srch="f:1;pt:sxx"           then srch="f:1"
               when new_loc=0 then do; call zocsend "'"||pre||" : runaway : no new locations available, runaway DISABLED^M"; _g.!runaway=0; leave; end
               otherwise do
                if _pwarp(new_loc) then do
                 sector=new_loc
                 call zocsend "'"||pre||" : runaway : new location ("||sector||") : mapping...^M"
                 call _mapdist sector, 0, mname, reclen, 1, _g.!runaway.!dist+3
                 call zocsend "'"||pre||" : runaway : ACTIVE in "||sector||" for "||_g.!runaway.!dist||" hop(s)^M"
                 _g.!runaway.!base=sector
                 leave
                end /*if*/
                _ex.new_loc=1
                call zocsend "'"||pre||" : runaway : move to "||new_loc||" failed, searching for another.^M"
               end /*else*/
              end /*select*/
             end /*do*/
            end /*if*/
           end /*if*/
           if _verbose then do
            srch="r:1;f:1"
            find=_mapfind(target,srch,mname,reclen,255)
            if find>0 & \_listinstr(_g.!ignorelist, player) then call _bot_finder_report "nearest fig", target, find, srch
           end /*if*/
           if _g.!warnlist\="" then do
            do i=1 to words(_g.!warnlist)
             if _dwords(word(_g.!warnlist,i),",")=2 then do
              s=_dword(word(_g.!warnlist,i),1,",")
              d=_dword(word(_g.!warnlist,i),2,",")
              if _dist.target.s<=d then call zocsend "'warning : "||player||" is "||_dist.target.s||" hops from "||s||"^M"
             end /*if*/
            end /*do*/
           end /*if*/
          end /*if*/
         end /*when*/

      /* eprobe reports */
         when ans=4 then nop
         when ans=5 then nop

      /* pmissile report - flubber3 launched a P-Missile in sector 2037[ damaging your ship.] */
         when ans=6 then do
          call zocsend "'"||pre||" : finder : i just took a photon^M"
          if _g.!runaway then do
           _ex.sector=1
           srch="f:1;d:1;tm:>2;pt:sxx"
           do forever
            new_loc=_mapfind(sector,srch,mname,reclen,255)
            select
             when new_loc=0 & srch="f:1;d:1;tm:>2;pt:sxx" then srch="f:1;d:1;tm:>2"
             when new_loc=0 & srch="f:1;d:1;tm:>2"        then srch="f:1;pt:sxx"
             when new_loc=0 & srch="f:1;pt:sxx"           then srch="f:1"
             when new_loc=0 then do; call zocsend "'"||pre||" : runaway : no new locations available, runaway DISABLED^M"; _g.!runaway=0; leave; end
             otherwise do
              if _pwarp(new_loc) then do
               sector=new_loc
               call zocsend "'"||pre||" : runaway : new location ("||sector||") : mapping...^M"
               call _mapdist sector, 0, mname, reclen, 1, _g.!runaway.!dist+3
               call zocsend "'"||pre||" : runaway : ACTIVE in "||sector||" for "||_g.!runaway.!base||" hop(s)^M"
               _g.!runaway.!base=sector
               leave
              end /*if*/
              _ex.new_loc=1
              call zocsend "'"||pre||" : runaway : move to "||new_loc||" failed, searching for another.^M"
             end /*else*/
            end /*select*/
           end /*do*/
          end /*if*/
         end /*when*/

      /* command prompt (with sector number) */
         when ans=7 then do
          parse var line . "]:[" sector "] (?=Help)? :"
          _sv.sector=1
         end /*when*/

      /* laying figs */
         when ans=8 then _f.sector=1

      /* twx just logged back in */
         when ans=9 then do
          call _getinfo
          if _qs.!sect=sector & prompt="citadel" & planet>0 then call zocsend "l"||planet||"^Mc"
          else do; sector=_qs.!sect; prompt=_synchronize(); planet=0; end
         end /*when*/

         when ans=640 then call zocsend "^["

      otherwise nop
     end /*select*/
     rslt=prompt sector planet reclen abort
    return rslt

    _iniv: procedure expose (globals)
     s=arg(1); v=arg(2)
     if arg(3,"E") then _ini.s.v=arg(3)
    return _ini.s.v

    _undef: procedure expose (globals)
     if arg(1)="##UNDEF##" then return 1; else return 0

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _ini_delete_key v.1 **/
    /*_ v.1 tested -*/
    _ini_delete_key: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") then call _error "missing argument in _ini_write."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))

     tname=fname||".tmp"
     written=0

     rslt=0
     if _fileopenr(fname) then do
      if _filenew(tname,"delete") then do
       insection=0
       linenum=0
       do while \_fileeof(fname)
        line=strip(linein(fname))
        linenum=linenum+1
        select
         when line="["||s||"]" then do
          insection=1
          if linenum>1 then call lineout tname, ""
          call charout tname, line
          written=1
         end /*when*/
         when insection & left(line,length(k)+1)=k||"=" then nop
         when insection & left(line,1)="[" then do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
          insection=0
         end /*when*/
         when line="" then call lineout tname, ""
         otherwise do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
         end /*otherwise*/
        end /*select*/
       end /*do*/
       call _fileclose(tname)
      end /*if*/
      call _fileclose(fname)
     end /*if*/
     if written then do
      if \dosdel(fname) then call _error "file delete failed."
      if \dosrename(tname,fname) then call _error "file rename failed."
     end /*if*/
    return written

/** _debug v.5 **/
    _debug: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _debug"
     mode=strip(left(lower(arg(1)),3))
     msg=arg(2)
     if arg(3,"E") then logname=strip(arg(3))
     else logname="_debug.txt"
     select
      when mode="scr" then call zocwriteln "^[[1;34mREV-DEBUG <"||msg||">^[[0m"
      when mode="fed" then call zocsend "`REV-DEBUG <"||msg||">^M"
      when mode="sub" then call zocsend "'REV-DEBUG <"||msg||">^M"
      when mode="log" then do
       if _fileopenw(logname) then do
        call lineout logname, msg
        call _fileclose logname
       end /*if*/
       else call _error "unable to open rev-log.txt."
      end /*when*/
      otherwise nop
     end /*select*/
    return

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _isonline v.3 **/
    _isonline: procedure expose (globals)
     if zocgetinfo("ONLINE")="##YES##" then return 1
     if arg(1,"E") then t=arg(1)
     else call _error "missing parameter in _isonline"
     rslt=0
     o="##NO##"
     call time "R"
     do while time("E")<=t & o\="##YES##"
      o=zocgetinfo("ONLINE")
      if o="##YES##" then rslt=1
     end /*do*/
    return rslt

/** _error v.9 **/
    _error: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwrite _ansi("clearline;bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: revhelper_at_thereverend_dot_org > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call _beep "error.wav"
    exit

/** _synchronize v.5 **/
    _synchronize: procedure expose (globals)

     if arg(1,"E") then checkcitprompts=arg(1); else checkcitprompts=1

     synchw=_synchronize_vars("w")
     synchr=_synchronize_vars("r")

     call zocsend "&&"
     ans=_waitmux("&&|Pausing is")
     select
      when ans=0 then return "unknown_text_entry"
      when ans=1 then nop
      when ans=640 then return "timeout"
      otherwise nop
     end /*select*/

     ans=_waitmux(synchw)
     select
      when ans=640 then rslt="timeout"
      when ans>0 then do
       if _wait("Pausing is")=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=_dword(synchr,ans+1,";")

     select
      when \checkcitprompts then nop
      when rslt="computer" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _get_planet_number v.2 **/
    _get_planet_number: procedure expose (globals)
     if arg(1,"E") then prompt=arg(1)
                   else prompt=_synchronize()
     select
      when prompt="citadel" then do
       if _sendwait("qd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("c","Citadel command (?=help)")=640 then call _error "timeout"
      end /*when*/
      when prompt="computer_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cc","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="corporate_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cx","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="planet" then do
       if _sendwait("d","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
      end /*when*/
      otherwise planet=0
     end /*select*/
    return planet

    _synchronize_to_prompt: procedure expose (globals)
     macrolist=_synchronize_vars(arg(1))
     if arg(2,"E") then pmt=arg(2)
                   else pmt=_synchronize()
     if pmt="unknown_text_entry" then do
      call zocsend "^H^H^H^M^M"
      pmt=_synchronize()
     end /*if*/
     if pmt="timeout" | pmt="unknown" then do
      call zocsend "^H^H^H^Mqqqq^M^M^M^Mq^M"
      pmt=_synchronize()
      if pmt="timeout" then call _error "timeout"
     end /*if*/
     if pmt\="unknown" & pmt\=arg(1) then do
      call zocsend _list_select(pmt,_synchronize_vars("r"),macrolist,";")
      pmt=_synchronize()
     end /*if*/
     if pmt=arg(1) | pmt=arg(1)||"_cit" then return 1
    return 0

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _ini_load_settings v.1 **/
    _ini_load_settings: procedure expose (globals)

     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     if left(zocgetinfo("VERSION"),1)>4 then ldefault = zocfilename("RESOLV", ldefault)
     parse value zocgetglobaloption("WindowTitle") with . '="' gname '"'

     lpath=_get_log_path()
     spath=_get_script_path()
     dpath=_get_download_path()

     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then gname=_setgame()
     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then exit
     dname=dosfname(lpath||gname||"_data.ini")

     _ini.="##UNDEF##"

     sectionlist=""
     if _fileopenr(dname) then do
      insection=0
      do while \_fileeof(dname)
       line=strip(linein(dname))
       if _ini_is_section(line) then do
        insection=1
        parse var line "[" section "]"
        section=strip(section)
        if sectionlist="" then sectionlist=section; else sectionlist=sectionlist||";"||section
       end /*if*/
       else do
        if insection then do
         parse var line k "=" v
         v=_ini_format_value(v)
         k="!"||section||".!"||strip(k)
         if k\="!"||section||".!" then _ini.k=strip(v)
        end /*if*/
       end /*else*/
      end /*while*/
      call _fileclose dname
     end /*if*/

     call _iniv "!settings", "!ldefault", ldefault
     call _iniv "!settings", "!lpath",  lpath
     call _iniv "!settings", "!spath",  spath
     call _iniv "!settings", "!dpath",  dpath
     call _iniv "!settings", "!dname",  dname
     call _iniv "!settings", "!gname",  gname
     call _iniv "!settings", "!lname",  lpath||gname||"_log.txt"
     call _iniv "!settings", "!fname",  lpath||gname||"_figs.txt"
     call _iniv "!settings", "!vname",  lpath||gname||"_voids.txt"
     call _iniv "!settings", "!vwname", lpath||gname||"_view.txt"
     call _iniv "!settings", "!pname",  lpath||gname||".prt"
     call _iniv "!settings", "!sname",  lpath||gname||".sct"
     call _iniv "!settings", "!rpname", lpath||gname||"_ref.prt"
     call _iniv "!settings", "!rsname", lpath||gname||"_ref.sct"
     call _iniv "!settings", "!mname",  lpath||gname||".map"
     call _iniv "!settings", "!zname",  lpath||gname||".ztm"
     call _iniv "!settings", "!nfname", lpath||gname||"_nearfig.txt"

    return sectionlist

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _random_pwd v.3 **/
    _random_pwd: procedure expose (globals)
     if arg(1,"E") then w=arg(1); else w=6
     if arg(2,"E") then n=arg(2); else n=4
     if n=0 then set.0=arg(3)
     set.1="1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.2="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.3="1234567890abcdefghijklmnopqrstuvwxyz"
     set.4="34679abcdefghijkmnopqrstuvwxyzACDEFGHJKLMNPQRTUVWXY"
     set.5="abcdefghijklmnopqrstuvwxyz"
     set.6="bcdfghjklmnpqrstvwxz"
     set.7="aeiouy"
     set.8="BCDFGHJKLMNPQRSTVWXZ"
     set.9="AEIOUY"
     set.10="1234567890"
     rslt=""
     len=length(set.n)
     do i=1 to w
      ch=substr(set.n,random(1,len),1)
      rslt=rslt||ch
     end /*do*/
    return rslt

/** _ini_write v.3 **/
    /*_ v.3 tested -*/
    _ini_write: procedure expose (globals)
     /* argument check */
     do i=1 to 4
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_write."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
     v=strip(arg(4))

     tname=fname||".tmp"
     written=0

     rslt=0
     if _fileopenr(fname) then do
      if _fileexists(tname) then if \dosdel(tname) then call _error "file delete failed."
      if _fileopenw(tname) then do
       insection=0
       linenum=0
       do while \_fileeof(fname)
        line=strip(linein(fname))
        linenum=linenum+1
        select
         when line="["||s||"]" then do
          insection=1
          if linenum>1 then call lineout tname, ""
          call lineout tname, line
          call charout tname, k||"="||v
          written=1
         end /*when*/
         when insection & left(line,length(k)+1)=k||"=" then nop
         when insection & left(line,1)="[" then do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
          insection=0
         end /*when*/
         when line="" then do
          if linenum>1 then call lineout tname, ""
          call charout tname, ""
         end /*when*/
         otherwise do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
         end /*otherwise*/
        end /*select*/
       end /*do*/
       if \written then do
        if linenum>1 then call lineout tname, ""
        call lineout tname, "["||s||"]"
        call charout tname, k||"="||v
        written=1
       end /*if*/
       call _fileclose(tname)
      end /*if*/
      call _fileclose(fname)
     end /*if*/
     if written then do
      if \dosdel(fname) then call _error "file delete failed."
      if \dosrename(tname,fname) then call _error "file rename failed."
     end /*if*/
     else do
      if \_fileexists(fname) then do
       if _filenew(fname) then do
        call lineout fname, "["||s||"]"
        call charout fname, k||"="||v
        call _fileclose(fname)
        written=1
       end /*if*/
      end /*if*/
     end /*else*/
    return written

/** _add_autoreply v.2 **/
    _add_autoreply: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _add_autoreply"
     trigger=arg(1)
     reply=arg(2)
     found=0
     do i=0 to 31
      ar_in="AutoReplyIn#"||copies("0",2-length(i))||i
      ar_out="AutoReplyOut#"||copies("0",2-length(i))||i
      parse value zocgetoption(ar_in) with . '="' ar_in_ '"'
      parse value zocgetoption(ar_out) with . '="' ar_out_ '"'
      if ar_in="" | abbrev(trigger,ar_in_) then do; found=1; leave; end
     end /*do*/
     if found then do
      call zocsetoption(ar_in'="'||trigger||'"')
      call zocsetoption(ar_out'="'||reply||'"')
      rslt=1
     end /*if*/
     else rslt=0
    return rslt

/** _mapinit v.5 **/
    _mapinit: procedure expose (globals)
     fname=arg(1)
     if arg(2,"E") then m=arg(2); else m=0
     select
      when m=0 then nop
      when m=1 then drop _p. _s. _dist. _path. _dtomsl. _dfrmsl. _bg. _bd. _nwt. _nwi. _nwo. _nw. _od. _sv. _pv.
      otherwise nop
     end /*select*/
     if _f.0="_F.0" then _f.=0
     if _l.0="_L.0" then _l.=0
     if _m.0="_M.0" then _m.=0
     if _s.0="_S.0" then _s.=""
     if _p.0="_P.0" then _p.=""
     if _dist.0.0="_DIST.0.0" then _dist.=255
     if _path.0.0="_PATH.0.0" then _path.=""
     if _dtomsl.0="_DTOMSL.0" then _dtomsl.=255
     if _dfrmsl.0="_DFRMSL.0" then _dfrmsl.=255
     if _bg.0="_BG.0" then _bg.=0
     if _bd.0="_BD.0" then _bd.=0 /* bubble door, results from _mapbubbles */
     if _nwt.0="_NWT.0" then _nwt.=0
     if _nwi.0="_NWI.0" then _nwi.=0
     if _nwo.0="_NWO.0" then _nwo.=0
     if _nw.0="_NW.0" then _nw.=0
     if _od.0="_OD.0" then _od.=0
     if _sv.0="_SV.0" then _sv.=0
     if _pv.0="_PV.0" then _pv.=0
     if _sl.0="_SL.0" then _sl.=0
     if _ex.0="_EX.0" then _ex.=0
     if _v.0="_V.0" then _v.=0
     if _vs.0="_VS.0" then _vs.=0
     if _vn.0="_VN.0" then _vn.="(na)"
     if \_fileopenr(fname) then call _error "unable to open map file: "||fname
     recordlen=c2d(charin(fname))
    return recordlen

/** _getfigs v.15 **/
    _getfigs: procedure expose (globals)
     fname=arg(1)
     mode=arg(2)
     report=arg(3)
     _f.=0
     c=0
     if lower(mode)="file" then parse value _figs_load(fname) with c m
     else do
      parse value _figs_get(fname) with c m cf pf df of tf tot dif
      call _figs_save fname, m
     end /*else*/
    select
     when report=0 then return c
     when report=1 then return c cf pf df of tf tot dif
     otherwise return c
    end /*select*/

/** _getvoids v.8 **/
    _getvoids: procedure expose (globals)
     vname=arg(1)
     mode=arg(2)
     _v.=0
     c=0
     if lower(mode)="file" then parse value _voids_load(vname) with c m
     else do
      parse value _voids_get() with c m
      call _voids_save vname, m
     end /*else*/
    return c

/** _getviews v.1 **/
    _getviews: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _getviews"
     fname=arg(1)
     _vs.=0
     _vn.="(na)"
     _vi.=""
     c=0
     if _fileopenr(fname) then do
      call zocwrite _ansi("clearline;bt;fwh")||"reading views... "
      do while \_fileeof(fname)
       line=linein(fname)
       if line\="" then do
        parse var line vs . s . note . . . . info
        _vs.s=vs
        _vn.s=note
        _vi.s=info
        c=c+1
       end /*if*/
      end /*do*/
      call _fileclose(fname)
      call zocwrite _ansi("clearline;bt;fwh")||c||" views read. "
     end /*if*/
    return c

/** _listadd v.4 **/
    _listadd: procedure expose (globals)
     add=arg(1)
     list=arg(2)
     if arg(3,"E") then sort=arg(3)
                   else sort=0
     if arg(4,"E") then delim=arg(4)
                   else delim=";"
     if list="" then list=add
     else do
      found=0
      do i=1 to _dwords(add,delim)
       found=0
       do j=1 to _dwords(list,delim)
        if _dword(add,i,delim)=_dword(list,j,delim) then found=1
        if found then leave
       end /*do*/
       if \found then list=list||delim||_dword(add,i,delim)
      end /*do*/
      if \found & sort then list=_listsort(list)
     end /*else*/
    return list

/** _cn9 v.2 **/
    _cn9: procedure expose (globals)
     if arg(1,"E") then mod=_list_select(lower(arg(1)),"spaces;s;0;allkeys;a;1;query;q;2;toggle;t;3","spaces;spaces;spaces;allkeys;allkeys;allkeys;query;query;query;toggle;toggle;toggle",";")
                   else mod="query"
     if mod="" then return "##UNKNOWN##"
     if arg(2,"E") then pmt=arg(2)
                   else pmt=_synchronize()
     if _listin(pmt,"command;citadel;computer;computer_cit") then do
      call zocsend _list_select(pmt,"command;citadel;computer;computer_cit","cn;cn;n;n")
      a=_waitmux("ALL KEYS|SPACE")
      select
       when mod="toggle"        then do; call zocsend "9"; mod=word("spaces allkeys",a+1); end
       when a=0 & mod="spaces"  then call zocsend "9"
       when a=0 & mod="query"   then mod="allkeys"
       when a=1 & mod="allkeys" then call zocsend "9"
       when a=1 & mod="query"   then mod="spaces"
       when a=640 then call _error "timeout"
       otherwise nop
      end /*select*/
      call zocsend _list_select(pmt,"command;citadel;computer;computer_cit","qq;qq;q;q")
      rslt="##"||upper(mod)||"##"
     end /*if*/
     else rslt="##UNKNOWN##"
    return rslt

/** _getinfo v.6 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=32*1024

     /* grab a buffer of text containing the quickstats and strip lf/nul */
     call zocreceivebuf bufflen
     call zocsend "/"
     if _wait("Sect ")=640 then call _error "timeout"
     if _wait("Ship ")=640 then call _error "timeout"
     if _wait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"

     /* reduce buffer to just the quickstats info and change bars to semicolons */
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, ";", d2c(179)),1)

     /* strip commas from numbers */
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     /* remove newlines, strip spaces, and condense to semi-delimited string */
     cr=d2c(13)
     buff2=strip(_dword(buff,1,cr))
     do i=2 to _dwords(buff,cr)
      buff2=buff2||";"||strip(_dword(buff,i,cr))
     end
     buff=buff2
     drop buff2

     /* analyze buffer */
     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/
     c=c+1
     vr.c="all"
     vl.c=buff

     /* set global vars */
     _qs.!corp=0
     do i=1 to c
      tag="!"||upper(vr.i)
      _qs.tag=vl.i
     end /*do*/

     /* pass out requested stats */
     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _bot_parse_command v.2 **/
    _bot_parse_command: procedure expose (globals)
     line=arg(1)
     if _wait("^M")=640 then call _error "timeout"
     suffix=strip(_lastline())
     name="##INVALID##"; cmd="##NA##"; args=""
     select
      when suffix\="" then nop
      when left(line,2)="R " then do
       name=strip(substr(line,3,7))
       parse value substr(line,10) with cmd args "::"
      end /*when*/
      when left(line,1)="'" then do
       name="##OWNER##"
       parse value substr(line,2) with cmd args "::"
      end /*when*/
      when left(line,2)="P " then do
       name="P"||strip(substr(line,3,7))
       parse value substr(line,10) with cmd args "::"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=name||";"||lower(strip(cmd))||";"||strip(args)
    return rslt

/** _bot_validate_user v.1 **/
    _bot_validate_user: procedure expose (globals)
     user=arg(1)
     list=arg(2)
     if user="##OWNER##" then return 1
     user=left(user,6)
     n=_dwords(list,";")
     do i=1 to n
      if user=left(_dword(list,i,";"),6) then leave
     end /*do*/
     if i=n+1 then return 0
     fullname=_dword(list,i,";")
     if fullname="" then return 0
     if _sendwait("="||fullname||"^M","Hailing frequencies:")=640 then call _error "timeout"
     ans=_waitmux("incoherent mumbling|not responding|Unknown Trader!|Do you mean|comm-link established")
     select
      when ans=0 then return 0
      when ans=1 then do; call zocsend "^M"; return 0; end
      when ans=2 then return 0
      when ans=3 then do
       call zocsend "^M"
       do while _waitmux("Do you mean|Unknown Trader!")=0; call zocsend "^M"; end;
       return 0
      end /*when*/
      when ans=4 then do
       pwd=_random_pwd(3)
      end /*when*/
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
     call zocsend "validate "||pwd||" ::^M"||pwd||" : type "||pwd||" on subspace within eight seconds to validate yourself.^M^M"
     t=_timeout(10)
     ans=_wait("R "||user||" "||pwd)
     call _timeout t
     if ans=640 then return 0
     call zocsend "'user "||strip(fullname)||" ("||strip(user)||") has been validated.^M"
    return 1

/** _listrem v.1 **/
    _listrem: procedure expose (globals)
     rem=arg(1)
     list=arg(2)
     if arg(3,"E") then delim=arg(4)
                   else delim=";"
     if list\="" then do
      do i=1 to _dwords(rem,delim)
       n=_dwords(list,delim)
       r=_dword(rem,i,delim)
       found=0
       do f=1 to n
        if r=_dword(list,f,delim) then leave
       end /*do*/
       select
        when f=1 & n=1 then list=""
        when f=1 then list=substr(list,_dwordindex(list,f+1,delim))
        when f<n then list=left(list,_dwordindex(list,f,delim)-1)||substr(list,_dwordindex(list,f+1,delim))
        when f=n then list=left(list,_dwordindex(list,f,delim)-2)
        otherwise nop
       end /*select*/
      end /*do*/
     end /*if*/
    return list

/** _rem_autoreply v.1 **/
    _rem_autoreply: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _rem_autoreply"
     trigger=arg(1)
     reply=arg(2)
     found=0
     do i=0 to 31
      ar_in="AutoReplyIn#"||copies("0",2-length(i))||i
      ar_out="AutoReplyOut#"||copies("0",2-length(i))||i
      parse value zocgetoption(ar_in) with . '="' ar_in_ '"'
      parse value zocgetoption(ar_out) with . '="' ar_out_ '"'
      if abbrev(trigger,ar_in_) then do; found=1; leave; end
     end /*do*/
     if found then do
      call zocsetoption(ar_in'=""')
      call zocsetoption(ar_out'=""')
      rslt=1
     end /*if*/
     else rslt=0
    return rslt

/** _pad v.3 **/
    _pad: procedure expose (globals)
     rslt=arg(1)
     if arg(2,"E") then w=arg(2); else return rslt
     if \arg(3,"E") then m="l"; else m=lower(arg(3))
     if \arg(4,"E") then p=" "; else p=left(arg(4),1)
     select
      when m="l" then rslt=left(rslt,w,p)
      when m="r" then rslt=reverse(left(reverse(rslt),w,p))
      when m="c" then rslt=center(rslt,w,p)
      otherwise       rslt=left(rslt,w,p)
     end /*select*/
    return rslt

    _get_lines_above: procedure expose(globals)
     if arg(1,"E") then n=arg(1); else n=1
     y=zocgetinfo("CURSOR-Y")
     lines=""
     do i=max(y-n,0) to y
      lines=lines||" "||translate(strip(zocgetscreen(0,i,80),"T"),";"," ")
     end /*do*/
     lines=translate(strip(lines),"; "," ;")
    return lines

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _listin v.4 **/
    _listin: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listin"
     find=arg(1)
     list=arg(2)
     if arg(3,"E") then delim=left(arg(3),1); else delim=";"
     if arg(4,"E") then abbrv=arg(4); else abbrv=0;
     rslt=0
     do i=1 to _dwords(list,delim)
      select
       when \abbrv & find==_dword(list,i,delim) then do; rslt=1; leave; end
       when \abbrv then nop
       when pos(_dword(list,i,delim),find)>0 then do; rslt=1; leave; end
       otherwise nop
      end /*if*/
     end /*do*/
    return rslt

/** _get_corpie_ta v.1 **/
    _get_corpie_ta: procedure expose (globals)
     name=arg(1)
     if _sendwait("a","Corp Member Name")=640 then call _error "timeout"
     if _wait("-----")=640 then call _error "timeout"
     ans=_waitmux(name||"|Corporate command")
     select
      when ans=0 then do
       parse value reverse(_grabit("^M")) with . . . . rslt .
       rslt=_stripint(reverse(rslt))
      end /*when*/
      when ans=1 then rslt=0
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
    return rslt

/** _pwarp v.4 **/
    _pwarp: procedure expose (globals)
     dest=arg(1)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then v=arg(3); else v=0
     do i=1 to n
      _msg.!pwarp=i
      engaged=0; hops=0; already=0; invalid=0
      if v then call zocsend "'pwarp attempt "||i||"^Mp"||dest||"^My"
           else call zocsend "p"||dest||"^My"
      if _wait("Citadel command (?=help) P")=640 then call _error "timeout"
      do forever
       ans=_waitmux("Citadel command (?=help)|Drive Engaged!| hops away from here.|already in that sector!|Invalid Sector number")
       select
        when ans=0 then leave
        when ans=1 then engaged=1
        when ans=2 then hops=1
        when ans=3 then already=1
        when ans=4 then invalid=1
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*do*/
      select
       when engaged | already then _msg="##SUCCESS##"
       when invalid then do; call zocsend "^Hq^M"; _msg="##INVALID_SECTOR##"; end
       when hops then _msg="##BLIND_OR_FUEL##"
       otherwise _msg="##NO_PWARP##"
      end /*select*/
      rslt=engaged | already
      if rslt then leave
     end /*do*/
    return rslt

/** _logcim v.4 **/
    _logcim: procedure expose (globals)

     path=arg(1)
     fname=arg(2)
     tasks=arg(3)
     default=arg(4)

     if zocgetinfo("VERSION")>=4.03 then call zoclogging 0, 1
     else call zoclogging 0
     call zocsend "^^?"
     if zocwait("Interrogation Modes")=640 then call _error "timeout"
     if zocwait(":")=640 then call _error "timeout"
     call zocwriteln
     call zocrespond "[Pause]", " "
     t=_timeout(60)

     do while tasks\=""

      parse var tasks task ";" tasks
      select
       when task="portcim" then ext=".prt"
       when task="sectorcim" then ext=".sct"
       otherwise task=""
      end /*select*/

      if task\="" then do
       if _fileexists(path||fname||ext) then call dosdel path||fname||ext
       call zoclogname fname||ext
       call zoclogging 1, 1
       call _timeout 3000
       select
        when task="portcim" then call zocsend "r"
        when task="sectorcim" then call zocsend "i"
        otherwise nop
       end /*select*/
       if zocwait(":")=640 then call _error "timeout"
       call zoclogging 0, 1
      end /*if*/

     end /*do*/

     call _timeout t
     call zocsend "q"
     if zocwait("ENDINTERROG")=640 then call _error "timeout"
     call zocrespond "[Pause]"
     call zoclogname default
     if zocgetinfo("VERSION")>=4.03 then call zoclogging 1, 1
     else call zoclogging 1

    return

/** _send255 v.2 **/
    _send255: procedure expose (globals)
     str=arg(1)
     do while length(str)>255
      w=255 /* note: dont split in the middle of ^M */
      i=lastpos("^",str,w)
      do while i=w & i>0; w=w-1; i=lastpos("^",str,w); end;
      call zocsend left(str,w)
      str=substr(str,w+1)
     end /*do*/
     call zocsend str
    return

/** _twmsg v.3 **/
    _twmsg: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _twmsg."
     select
      when lower(arg(1))="on" then do
       call zocsend "|"
       ans=_waitmux("Silencing|Displaying")
       if ans=0 then call zocsend "|"
       if ans=640 then call _error "timeout"
      end /*when*/
      when lower(arg(1))="off" then do
       call zocsend "|"
       ans=_waitmux("Silencing|Displaying")
       if ans=1 then call zocsend "|"
       if ans=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
    return

/** _read_mail v.3 **/
    _read_mail: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _read_mail"
     lname=arg(1)
     dname=arg(2)
     if arg(3,"E") then ignorelist=arg(3)
                   else ignorelist=""
     lg_stamp=_iniv(!settings,"!lastlogstamp")
     if _sendwait("cm","<Read messages>")=640 then call _error "timeout"
     yr=word(date("N"),3)-2000+12
     done=0
     pflag=1
     lg_i=0
     do while \done
      ans=zocwaitmux("[Pause]",
                ||"|No messages received.",
                ||"|> ",
                ||"|::",
                ||"|/"||yr-1||":",
                ||"|/"||yr||":",
                ||"|/"||yr+1||":",
                ||"|entered sector.",
                ||"|Sub Space Ether Probe.",
                ||"|I.D. code.",
                ||"|disrupted all of your mines in ",
                ||"|Delete messages? (Y/N) [N]",
                ||"| - Ship ")
      select
       when ans=0 then do
        call zocdelay .3
        select
         when _pcheck("[Pause] - [") & pflag then do
          call zocsend " "
          pflag=0
         end /*when*/
         when _pcheck("[Pause] - [") then nop
         when _pcheck("[Pause] - D") then do
          call zocsend "y"
          done=1
         end /*when*/
         otherwise do
          call zocsend " "
          pflag=0
         end /*otherwise*/
        end /*select*/
       end /*when*/
       when ans=1 then do
        call zocsend " "
        done=1
       end /*when */
       when ans=2 & \pflag then pflag=1
       when ans=2 then nop
       when ans=3 then do
        line=_lastline()
        parse var line brand "-" typ " : " cmd . args "::"
        typ=lower(typ); cmd=lower(cmd); args=strip(args)
        select
         when typ\="cmd" then nop
         when cmd="bust_clr" then do
          parse var args sect . stamp .
          bstamp=_iniv("!bust","!"||sect)
          select
           when _undef(bstamp) then nop
           when bstamp>=stamp then nop
           otherwise do
            call _ini_delete_key dname, "bust", sect
            call _iniv "!bust", "!"||sect, "##UNDEF##"
           end /*otherwise*/
          end /*select*/
         end /*when*/
         when cmd="set_var" then do
          parse var args section " : " vr "=" vl
          call _ini_write dname, section, vr, vl
          call _iniv "!"||section, "!"||vr, vl
         end /*when*/
         otherwise nop
        end /*select*/
       end /*when*/
       when ans<=6 then do
        line=_lastline()
        parse var line "Received from " lg_name " at " lg_hr ":" lg_mn ":" lg_sc lg_ampm " S.D. " lg_ds ":"
        if lg_ampm="PM" then lg_hr=lg_hr+12
        lg_ts=lg_hr||":"||lg_mn||":"||lg_sc
        lg_stamp=lg_ds||", "||lg_ts
       end /*when*/
       when ans=7 then do /* entered sector. */
        line=_lastline()
        parse var line . "Sector " lg_sect ": " lg_name " entered sector."
        poss=lastpos("'s",lg_name)
        if poss>0 then do
         lg_player=left(lg_name,poss-1)
         lg_ship=substr(lg_name,poss+3)
         lg_sect=_stripint(lg_sect)
         if lg_sect\="" & \_undef(lg_stamp) then do
          if _listinstr(ignorelist, lg_player) then call lineout lname, _pad(lg_sect,5,"L")||": "||lg_stamp||" - ENTER IGNORE ("||_abbrv_words(lg_ship,3)||")"
                                               else call lineout lname, _pad(lg_sect,5,"L")||": "||lg_stamp||" - ENTER "||lg_player||" ("||_abbrv_words(lg_ship,3)||")"
         end /*if*/
        end /*if*/
       end /*when*/
       when ans=8 then do /* probe */
        line=_lastline()
        parse var line . "sector " lg_sect .
        pflag=1
       end /*when*/
       when ans=9 then do /* probe traced */
        line=_lastline()
        parse var line . "to " lg_player "'s I.D. code." .
        if lg_sect\="" & \_listinstr(ignorelist, lg_player) & \_undef(lg_stamp) then do
         lg_i=lg_i+1
         lg_list.lg_i=_pad(lg_sect,5,"L")||": "||lg_stamp||" - PROBE "||lg_player
        end /*if*/
       end /*when*/
       when ans=10 then do
        line=_lastline()
        lg_sect=_stripint(_grabit("^M"))
        parse var line lg_player " disrupted all " .
        if lg_sect\="" & \_listinstr(ignorelist, lg_player) & \_undef(lg_stamp) then do
         lg_i=lg_i+1
         lg_list.lg_i=_pad(lg_sect,5,"L")||": "||lg_stamp||" - DISRUPT "||lg_player
        end /*if*/
       end /*when*/
       when ans=11 then do
        call zocsend "y"
        done=1
       end /*when*/
       /* ck bust message */
       when ans=12 then do
        line=_lastline()
        parse var line . "Busted - Sector " sect " - Ship"
        sect=_stripint(sect)
        bstamp=_iniv("!bust","!"||sect)
        select
         when _undef(bstamp) then nop
         when bstamp>=stamp then nop
         otherwise do
          call _ini_delete_key dname, "bust", sect
          call _iniv "!bust", "!"||sect, "##UNDEF##"
         end /*otherwise*/
        end /*select*/
       end /*when*/
       when ans=640 then call _error "timeout"
       otherwise nop
      end /*select*/
     end /*do*/
     call zocsend "q"
     if _waitmux("Citadel command|Command [")=640 then call _error "timeout"
     if _fileopenw(lname) then do
      do i=1 to lg_i
       call lineout lname, lg_list.i
      end /*do*/
      call _fileclose lname
     end /*if*/
     call _ini_write dname, "settings", "lastlogstamp", lg_stamp
    return

/** _ping v.3 **/
    _ping: procedure expose (globals)
     if arg(1,"E") then n=arg(1); else n=5
     if arg(2,"E") then summary=arg(2); else summary=1
     if arg(3,"E") then mode=arg(3); else mode=1
     mn=999999999
     mx=0
     t=0
     select
      when mode=2 then do
       do n
        call time "R"
    /*    if _sendwait(d2c(145),d2c(145))=640 then call _error "timeout" */
        if _sendwait("/",d2c(179)||"Turns")=640 then call _error "timeout"
        e=time("E")
        if zocwait("Ship ")=640 then call _error "timeout"
        mn=min(mn,e)
        mx=max(mx,e)
        t=t+e
       end /*do*/
       avg=t/n*1000%1
       if summary then call zocsend "'ping : count="||n||" : min="||mn*1000%1||" : avg="||avg||" : max="||mx*1000%1||"^M"
      end /*when*/
      otherwise do
       if _sendwait("'^m","S:")=640 then call _error "timeout"
       do n
        call time "R"
        if _sendwait("ping","ping")=640 then call _error "timeout"
        e=time("E")
        mn=min(mn,e)
        mx=max(mx,e)
        t=t+e
        if _sendwait(" : "||trunc(e*1000)||" ms^m","S:")=640 then call _error "timeout"
       end /*do*/
       avg=t/n*1000%1
       if summary then call zocsend "ping : count="||n||" : min="||mn*1000%1||" : avg="||avg||" : max="||mx*1000%1||"^m^m"
                  else call zocsend "^M"
      end /*otherwise*/
     end /*select*/
    return avg

    _planet_spammer: procedure expose (globals)
     spamtext="@uyznuyznuyznuyznuyznuyznuyznuyznuyznuyzn.z^Mzc^M" /* works for any case, but slower??? */
     call zocsend "uyzn.z^Mzc^M@"
     ans=_waitmux("wish to abort?|Average Interval Lag")
     select
      when ans=0 then spamtext="@uynuynuynuynuynuynuynuynuynuyn.z^Mzc^M"
      when ans=1 then spamtext="@uyuyuyuyuyuyuyuyuyuy.z^Mzc^M"
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
     call zocsend spamtext
     c=0
     do forever
      ans=_waitmux("::|Average Interval|don't have any Genesis Torpedoes|For building this planet|]:[")
      if ans=0 then parse value _bot_parse_command(_lastline()) with name ";" cmd ";" args
      select
       when ans=0 & cmd="stop" then leave
       when ans=0 then do; call zocsend "'type 'stop :; to stop the planet lock spammer^M"; c=0; end
       when ans=1 then do; call zocsend spamtext; c=c+1; end
       when ans=2 then do; call zocsend "'out of genesis torpedoes^M"; leave; end
       when ans=3 then do; call zocsend "'made a planet!^M"; c=0; end
       when ans=4 then nop
       when ans=640 then call _error "timeout"
       otherwise nop
      end /*select*/
      if c=200 then do; call zocsend "'type 'stop :; to stop the planet lock spammer^M"; c=0; end
     end /*do*/
    return

/** _mapdist v.2 **/
    _mapdist: procedure expose (globals)
     start=arg(1)
     finish=arg(2)
     mapname=arg(3)
     recordlen=arg(4)
     reverse=arg(5)
     if reverse="" then reverse=0
     maxdist=arg(6)
     if maxdist="" | maxdist<1 then maxdist=255

     call _mapseek mapname, recordlen, start
     _dist.start.start=0
     _path.start.start=start

     /* initialize arrays */
     inqueue.=0
     queue.=""
     queue.1=start
     inqueue.start=1
     tail=1
     do i=1 to words(_s.start)
      code=word(_s.start,i)
      warptype=code%20000
      sector=code//20000
      if (warptype<2 & \reverse) | (warptype>0 & reverse) then do
       tail=tail+1
       queue.tail=sector
       inqueue.sector=1
      end /*if*/
     end /*do*/
     head=2

     done=0
     do while \done & tail>=head

      current=queue.head
      call _mapseek mapname, recordlen, current

      do i=1 to words(_s.current)

       code=word(_s.current,i)
       warptype=code%20000
       adjacent=code//20000

       /* if adjacent not in queue, then add to tail */
       if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & \inqueue.adjacent then do
        tail=tail+1
        queue.tail=adjacent
        inqueue.adjacent=1
       end /*if*/

       /* assign shortest warp distance */
       if warptype>0 & \reverse then do
        tdist=_dist.start.current
        _dist.start.current=min(_dist.start.current,_dist.start.adjacent+1)
        if tdist>_dist.start.current then _path.start.current=_path.start.adjacent||";"||current
       end /*if*/

       if warptype<2 & reverse then do
        tdist=_dist.current.start
        _dist.current.start=min(_dist.current.start,_dist.adjacent.start+1)
        if tdist>_dist.current.start then _path.current.start=current||";"||_path.adjacent.start
       end /*if*/

      end /*do*/

      /* have we found the destination? */
      select
       when current=finish then done=1
       when _dist.start.current>maxdist & \reverse then done=1
       when _dist.current.start>maxdist & reverse then done=1
       when head=tail then done=1
       otherwise head=head+1
      end /*select*/

     end /*do*/

    return _dist.start.finish

    /* _list_select v.2 */
    _list_select: procedure expose (globals)
     f=arg(1)
     a=arg(2)
     b=arg(3)
     if arg(4,"E") then d=arg(4); else d=";"
     if arg(5,"E") then rslt=arg(5); else rslt=""
     do i=1 to _dwords(a,d)
      if f=_dword(a,i,d) then do; rslt=_dword(b,i,d); leave; end
     end /*do*/
    return rslt

/** _mapfind v.6 **/
    _mapfind: procedure expose (globals)
     start=arg(1)
     searchstring=arg(2)
     mapname=arg(3)
     recordlen=arg(4)
     maxdist=255; mindist=1
     select
      when arg(5,"E") & arg(6,"E") then do
       mindist=min(max(_stripint(arg(5)),1),255)
       maxdist=max(min(_stripint(arg(6)),255),1)
      end /*when*/
      when arg(6,"E") then maxdist=max(min(_stripint(arg(6)),255),1)
      when arg(5,"E") then maxdist=max(min(_stripint(arg(5)),255),1)
      otherwise nop
     end /*select*/
     if arg(7,"E") then useexclusions=arg(7); else useexclusions=1
     if arg(8,"E") then matchcount=arg(8); else matchcount=1

     usevoids=0
     reverse=0
     secnum=-1
     void=-1
     busted=-1
     figs=-1
     expl=-1
     list=-1
     pvis=-1
     deadend=-1
     bubble=-1
     tomsl=-1; frmsl=-1
     ptype=-1
     pore=-1;  porg=-1;  pequ=-1
     ppore=-1; pporg=-1; ppequ=-1
     viewed=-1
     /* parse search string */
     do i=1 to _dwords(searchstring,";")
      criteria=_dword(searchstring,i,";")
      tag=_dword(criteria,1,":")
      val=_dword(criteria,2,":")
      select
       when tag="mx"  then maxdist=val
       when tag="mn"  then mindist=val
       when tag="ue"  then useexclusions=val
       when tag="mc"  then matchcount=val
       when tag="r"   then reverse=val
       when tag="s"   then secnum=val
       when tag="uv"  then usevoids=val
       when tag="v"   then void=val
       when tag="f"   then figs=val
       when tag="e"   then expl=val
       when tag="sl"  then list=val
       when tag="pt"  then ptype=lower(val)
       when tag="p1"  then pore=val
       when tag="p2"  then porg=val
       when tag="p3"  then pequ=val
       when tag="pp1" then ppore=val
       when tag="pp2" then pporg=val
       when tag="pp3" then ppequ=val
       when tag="pv"  then pvis=val
       when tag="pb"  then busted=val
       when tag="d"   then deadend=val
       when tag="b"   then bubble=val
       when tag="tm"  then tomsl=val
       when tag="fm"  then frmsl=val
       when tag="vw"  then viewed=val
       when tag="nw"  then nw=val
       when tag="nwo" then nwo=val
       when tag="nw0" then nw0=val
       when tag="nw1" then nw1=val
       when tag="nw2" then nw2=val
       otherwise nop
      end /*select*/
     end /*do*/

     call _mapseek mapname, recordlen, start
     _dist.start.start=0
     _path.start.start=start

     /* initialize arrays */
     inqueue.=0
     queue.=""
     queue.1=start
     inqueue.start=1
     tail=1
     do i=1 to words(_s.start)
      code=word(_s.start,i)
      warptype=code%20000
      sector=code//20000
      if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & (usevoids\=1 | \_v.sector) then do
       tail=tail+1
       queue.tail=sector
       inqueue.sector=1
      end /*if*/
     end /*do*/

     rslt=""
     current=start
     head=1
     found=0
     do while tail>=head

      /* have we found the destination? */
      select
       when _dist.start.current>maxdist & \reverse then do; found=0; leave; end
       when _dist.current.start>maxdist &  reverse then do; found=0; leave; end
       when found then do
        rslt=rslt current
        if words(rslt)=matchcount | head=tail then leave
        found=0
        head=head+1
       end /*when*/
       when head=tail then leave
       otherwise head=head+1
      end /*select*/

      current=queue.head
      call _mapseek mapname, recordlen, current

      do i=1 to words(_s.current)

       adjacent=word(_s.current.!num,i)
       warptype=word(_s.current.!wt,i)

       /* add to tail */
       if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & (usevoids\=1 | \_v.adjacent) & \inqueue.adjacent then do
        tail=tail+1
        queue.tail=adjacent
        inqueue.adjacent=1
       end /*if*/

       /* assign shortest warp distance */
       if warptype>0 & \reverse then do
        tdist=_dist.start.current
        _dist.start.current=min(_dist.start.current,_dist.start.adjacent+1)
        if tdist>_dist.start.current then _path.start.current=_path.start.adjacent||";"||current
       end /*if*/

       if warptype<2 & reverse then do
        tdist=_dist.current.start
        _dist.current.start=min(_dist.current.start,_dist.adjacent.start+1)
        if tdist>_dist.current.start then _path.current.start=current||";"||_path.adjacent.start
       end /*if*/

      end /*do*/

      /* evaluate the criteria */
      found=1

      if _dist.start.current<mindist & \reverse then do; found=0; iterate; end
      if _dist.current.start<mindist &  reverse then do; found=0; iterate; end
      if useexclusions & _ex.current            then do; found=0; iterate; end
      if secnum\=-1  & secnum\=current          then do; found=0; iterate; end
      if void\=-1    & void=\_v.current         then do; found=0; iterate; end
      if figs\=-1    & figs=\_f.current         then do; found=0; iterate; end
      if expl\=-1    & expl=\_sv.current        then do; found=0; iterate; end
      if list\=-1    & list=\_sl.current        then do; found=0; iterate; end
      if pvis\=-1    & pvis=\_pv.current        then do; found=0; iterate; end
      if deadend\=-1 & deadend=\_od.current     then do; found=0; iterate; end

      bstamp=_iniv("!bust", "!"||current)
      if busted\=-1  & ((busted=1 & _undef(bstamp)) | (busted=0 & \_undef(bstamp))) then do; found=0; iterate; end

      if bubble\=-1 then do
       if bubble & _bg.current=0 then do; found=0; iterate; end
       if \bubble & _bg.current\=0 then do; found=0; iterate; end
      end /*if*/

      if viewed\=-1 then do
       select
        when left(viewed,2)="<=" & _vs.current>substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)="<=" then nop
        when left(viewed,2)=">=" & _vs.current<substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)=">=" then nop
        when left(viewed,2)="\=" & _vs.current=substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)="\=" then nop
        when left(viewed,2)="<>" & _vs.current=substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)="<>" then nop
        when left(viewed,1)="<"  & _vs.current>=substr(viewed,2) then do; found=0; iterate; end
        when left(viewed,1)=">"  & _vs.current<=substr(viewed,2) then do; found=0; iterate; end
        when left(viewed,1)="="  & _vs.current\=substr(viewed,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if tomsl\=-1 then do
       select
        when left(tomsl,2)="<=" & _dtomsl.current>substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)="<=" then nop
        when left(tomsl,2)=">=" & _dtomsl.current<substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)=">=" then nop
        when left(tomsl,2)="\=" & _dtomsl.current=substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)="\=" then nop
        when left(tomsl,2)="<>" & _dtomsl.current=substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)="<>" then nop
        when left(tomsl,1)="<"  & _dtomsl.current>=substr(tomsl,2) then do; found=0; iterate; end
        when left(tomsl,1)=">"  & _dtomsl.current<=substr(tomsl,2) then do; found=0; iterate; end
        when left(tomsl,1)="="  & _dtomsl.current\=substr(tomsl,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if frmsl\=-1 then do
       select
        when left(frmsl,2)="<=" & _dfrmsl.current>substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)="<=" then nop
        when left(frmsl,2)=">=" & _dfrmsl.current<substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)=">=" then nop
        when left(frmsl,2)="\=" & _dfrmsl.current=substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)="\=" then nop
        when left(frmsl,2)="<>" & _dfrmsl.current=substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)="<>" then nop
        when left(frmsl,1)="<"  & _dfrmsl.current>=substr(frmsl,2) then do; found=0; iterate; end
        when left(frmsl,1)=">"  & _dfrmsl.current<=substr(frmsl,2) then do; found=0; iterate; end
        when left(frmsl,1)="="  & _dfrmsl.current\=substr(frmsl,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if (ptype\=-1 | pore\=-1 | porg\=-1 | pequ\=-1) then cptype=_dword(_p.current,1,";")

      if ptype\=-1 then do
       select
        when ptype=0 & cptype\="" then do; found=0; iterate; end
        when ptype=0 then nop
        when ptype=1 & cptype="" then do; found=0; iterate; end
        when ptype=1 then nop
        when \_portmatch(cptype,ptype) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if pore\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cpore=_dword(_dword(_p.current,2,";"),1,",")
        select
         when left(pore,2)="<=" & cpore>substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)="<=" then nop
         when left(pore,2)=">=" & cpore<substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)=">=" then nop
         when left(pore,2)="\=" & cpore=substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)="\=" then nop
         when left(pore,2)="<>" & cpore=substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)="<>" then nop
         when left(pore,1)="<"  & cpore>=substr(pore,2) then do; found=0; iterate; end
         when left(pore,1)=">"  & cpore<=substr(pore,2) then do; found=0; iterate; end
         when left(pore,1)="="  & cpore\=substr(pore,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if porg\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cporg=_dword(_dword(_p.current,3,";"),1,",")
        select
         when left(porg,2)="<=" & cporg>substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)="<=" then nop
         when left(porg,2)=">=" & cporg<substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)=">=" then nop
         when left(porg,2)="\=" & cporg=substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)="\=" then nop
         when left(porg,2)="<>" & cporg=substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)="<>" then nop
         when left(porg,1)="<"  & cporg>=substr(porg,2) then do; found=0; iterate; end
         when left(porg,1)=">"  & cporg<=substr(porg,2) then do; found=0; iterate; end
         when left(porg,1)="="  & cporg\=substr(porg,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if pequ\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cpequ=_dword(_dword(_p.current,4,";"),1,",")
        select
         when left(pequ,2)="<=" & cpequ>substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)="<=" then nop
         when left(pequ,2)=">=" & cpequ<substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)=">=" then nop
         when left(pequ,2)="\=" & cpequ=substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)="\=" then nop
         when left(pequ,2)="<>" & cpequ=substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)="<>" then nop
         when left(pequ,1)="<"  & cpequ>=substr(pequ,2) then do; found=0; iterate; end
         when left(pequ,1)=">"  & cpequ<=substr(pequ,2) then do; found=0; iterate; end
         when left(pequ,1)="="  & cpequ\=substr(pequ,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if ppore\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cppore=_dword(_dword(_p.current,2,";"),2,",")
        select
         when left(ppore,2)="<=" & cppore>substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)="<=" then nop
         when left(ppore,2)=">=" & cppore<substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)=">=" then nop
         when left(ppore,2)="\=" & cppore=substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)="\=" then nop
         when left(ppore,2)="<>" & cppore=substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)="<>" then nop
         when left(ppore,1)="<"  & cppore>=substr(ppore,2) then do; found=0; iterate; end
         when left(ppore,1)=">"  & cppore<=substr(ppore,2) then do; found=0; iterate; end
         when left(ppore,1)="="  & cppore\=substr(ppore,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if pporg\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cpporg=_dword(_dword(_p.current,3,";"),2,",")
        select
         when left(pporg,2)="<=" & cpporg>substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)="<=" then nop
         when left(pporg,2)=">=" & cpporg<substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)=">=" then nop
         when left(pporg,2)="\=" & cpporg=substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)="\=" then nop
         when left(pporg,2)="<>" & cpporg=substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)="<>" then nop
         when left(pporg,1)="<"  & cpporg>=substr(pporg,2) then do; found=0; iterate; end
         when left(pporg,1)=">"  & cpporg<=substr(pporg,2) then do; found=0; iterate; end
         when left(pporg,1)="="  & cpporg\=substr(pporg,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if ppequ\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cppequ=_dword(_dword(_p.current,4,";"),2,",")
        select
         when left(ppequ,2)="<=" & cppequ>substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)="<=" then nop
         when left(ppequ,2)=">=" & cppequ<substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)=">=" then nop
         when left(ppequ,2)="\=" & cppequ=substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)="\=" then nop
         when left(ppequ,2)="<>" & cppequ=substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)="<>" then nop
         when left(ppequ,1)="<"  & cppequ>=substr(ppequ,2) then do; found=0; iterate; end
         when left(ppequ,1)=">"  & cppequ<=substr(ppequ,2) then do; found=0; iterate; end
         when left(ppequ,1)="="  & cppequ\=substr(ppequ,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if nw\=-1 then do
       select
        when left(nw,2)="<=" & _nw.current>substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)="<=" then nop
        when left(nw,2)=">=" & _nw.current<substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)=">=" then nop
        when left(nw,2)="\=" & _nw.current=substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)="\=" then nop
        when left(nw,2)="<>" & _nw.current=substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)="<>" then nop
        when left(nw,1)="<"  & _nw.current>=substr(nw,2) then do; found=0; iterate; end
        when left(nw,1)=">"  & _nw.current<=substr(nw,2) then do; found=0; iterate; end
        when left(nw,1)="="  & _nw.current\=substr(nw,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nwo\=-1 then do
       select
        when left(nwo,2)="<=" & _nwo.current>substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)="<=" then nop
        when left(nwo,2)=">=" & _nwo.current<substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)=">=" then nop
        when left(nwo,2)="\=" & _nwo.current=substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)="\=" then nop
        when left(nwo,2)="<>" & _nwo.current=substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)="<>" then nop
        when left(nwo,1)="<"  & _nwo.current>=substr(nwo,2) then do; found=0; iterate; end
        when left(nwo,1)=">"  & _nwo.current<=substr(nwo,2) then do; found=0; iterate; end
        when left(nwo,1)="="  & _nwo.current\=substr(nwo,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nw0\=-1 then do
       select
        when left(nw0,2)="<=" & _nwt.current.0>substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)="<=" then nop
        when left(nw0,2)=">=" & _nwt.current.0<substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)=">=" then nop
        when left(nw0,2)="\=" & _nwt.current.0=substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)="\=" then nop
        when left(nw0,2)="<>" & _nwt.current.0=substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)="<>" then nop
        when left(nw0,1)="<"  & _nwt.current.0>=substr(nw0,2) then do; found=0; iterate; end
        when left(nw0,1)=">"  & _nwt.current.0<=substr(nw0,2) then do; found=0; iterate; end
        when left(nw0,1)="="  & _nwt.current.0\=substr(nw0,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nw1\=-1 then do
       select
        when left(nw1,2)="<=" & _nwt.current.1>substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)="<=" then nop
        when left(nw1,2)=">=" & _nwt.current.1<substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)=">=" then nop
        when left(nw1,2)="\=" & _nwt.current.1=substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)="\=" then nop
        when left(nw1,2)="<>" & _nwt.current.1=substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)="<>" then nop
        when left(nw1,1)="<"  & _nwt.current.1>=substr(nw1,2) then do; found=0; iterate; end
        when left(nw1,1)=">"  & _nwt.current.1<=substr(nw1,2) then do; found=0; iterate; end
        when left(nw1,1)="="  & _nwt.current.1\=substr(nw1,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nw2\=-1 then do
       select
        when left(nw2,2)="<=" & _nwt.current.2>substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)="<=" then nop
        when left(nw2,2)=">=" & _nwt.current.2<substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)=">=" then nop
        when left(nw2,2)="\=" & _nwt.current.2=substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)="\=" then nop
        when left(nw2,2)="<>" & _nwt.current.2=substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)="<>" then nop
        when left(nw2,1)="<"  & _nwt.current.2>=substr(nw2,2) then do; found=0; iterate; end
        when left(nw2,1)=">"  & _nwt.current.2<=substr(nw2,2) then do; found=0; iterate; end
        when left(nw2,1)="="  & _nwt.current.2\=substr(nw2,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

     end /*do*/

     rslt=strip(rslt)
     if rslt="" then rslt=0

    return rslt

    _bot_finder_report: procedure expose (globals)
      prefix=arg(1)
      strt=arg(2)
      findlist=arg(3)
      srch=arg(4)
      call zocsend "'^M"
      do j=1 to words(findlist)
       find=word(findlist,j)
       msg=find
       if _p.find\="" then msg=msg||" "||_dword(_p.find,1,";")
       msg=msg||" ("||_nw.find-_nwi.find||"."||_nwi.find||":"||_dfrmsl.find||word("f",abs(_f.find-2))||word("d",abs(_od.find-2))||")"
       if pos("r:1",srch)>0 then do
        msg=msg||" "||_dist.find.strt||" hops"
        path=translate(_path.find.strt," ",";")
        n=word(path,1)
        msg=msg||" "||n||word(".f",abs(_f.n-2))
        do i=2 to words(path)
         n=word(path,i)
         msg=msg||">"||n||word(".f",abs(_f.n-2))
        end /*do*/
       end /*if*/
       else do
        msg=msg||" "||_dist.strt.find||" hops"
        path=translate(_path.strt.find," ",";")
        n=word(path,1)
        msg=msg||" "||n||word(".f",abs(_f.n-2))
        do i=2 to words(path)
         n=word(path,i)
         msg=msg||">"||n||word(".f",abs(_f.n-2))
        end /*do*/
       end /*else*/
       line=prefix||" : "||msg
       do while length(line)>70
        i=lastpos(">",line,69)+1
        call zocsend strip(left(line,i-1),t)||"^M"
        line=substr(line,i)
       end /*do*/
       call zocsend line||"^M"
       if _g.!autoex then _ex.find=1
      end /*do*/
      call zocsend "^M"
    return

/** _listinstr v.3 **/
    _listinstr: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listinstr"
     abbrlist=arg(1)
     archetype=arg(2)
     if arg(3,"E") then mode=arg(3)
     else mode=""
     if arg(4,"E") then delim=left(arg(4),1)
     else delim=";"
     if mode\="cs" then do
      abbrlist=lower(abbrlist)
      archetype=lower(archetype)
     end /*if*/
     rslt=0
     if archetype="" then rslt=1
     else do
      do i=1 to _dwords(abbrlist,delim)
       if pos(_dword(abbrlist,i,delim), archetype)>0 then do
        rslt=1
        leave
       end /*if*/
      end /*do*/
     end /*else*/
    return rslt

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenw"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN WRITE"
       call stream arg(1), "C", "SEEK <0"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _synchronize_vars v.1 **/
    _synchronize_vars: procedure expose (globals)
     select
      when arg(1)="w" then rslt="Pausing",
                              ||"|Command [",
                              ||"|Citadel command",
                              ||"|Planet command",
                              ||"|<StarDock>",
                              ||"|ship to sell",
                              ||"|Still interested ?",
                              ||"|wish to buy? (A,B,C,Q,?)",
                              ||"|<Galactic Bank>",
                              ||"|<Hardware Emporium>",
                              ||"|<Shipyards>",
                              ||"|<Tavern>",
                              ||"|Enter your choice [T] ?",
                              ||"|do you want to sell [",
                              ||"|do you want to buy [",
                              ||"|Computer command",
                              ||"|Corporate command",
                              ||"|Colonists? [T]",
                              ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]",
                              ||"|`",
                              ||"|F: ",
                              ||"|'",
                              ||"|S: ",
                              ||"|M: ",
                              ||"|P: "
      when arg(1)="r" then rslt="unknown;command;citadel;planet;stardock;ship_sell;ship_sell_interested;class_0",
                             ||";bank;hardware;shipyards;tavern;port_menu;port_haggle;port_haggle;computer",
                             ||";corporate;terra;stop_in_this_sector?;fedcom_text_entry_1;fedcom_text_entry_2",
                             ||";subspace_text_entry_1;subspace_text_entry_2;mail_text_entry;private_text_entry",
                             ||";corporate_cit;computer_cit;unknown_text_entry" /* <-- these unmatched in the wait string above */
      when arg(1)="command" then rslt=" ; ;qq;q;q;qqq;nqq;q;qq;qq;qq;qq;q;0^Mz0^Mz0^M;0^Mz0^Mz0^M;q;q;q;y;^H;^M;^H;^M;^M;^M;qqq;qqq; "
      when arg(1)="computer" then rslt=" ;c;c;qc;qc;qqqc;nqqc;qc;qqc;qqc;qqc;qqc;qc;0^Mz0^Mz0^Mc;0^Mz0^Mz0^Mc; ;qc;qc;yc;^Hc;^Mc;^Hc;^Mc;^Mc;^Mc;qc;qc; "
      otherwise call _error "unknown argument in _synchronize_vars"
     end /*select*/
    return rslt

/** _waitmux v.1 **/
    _waitmux: procedure expose (globals)
     rslt=zocwaitmux(arg(1))
    return rslt

/** _wait v.1 **/
    _wait: procedure expose (globals)
     rslt=zocwait(arg(1))
    return rslt

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=_wait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if _wait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _get_log_path v.2 **/
    _get_log_path: procedure expose (globals)
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_path"
    return lpath

/** _get_script_path v.1 **/
    _get_script_path: procedure expose (globals)
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     if left(zocgetinfo("VERSION"),1)>4 then spath = zocfilename("RESOLV", spath)
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _get_download_path v.2 **/
    _get_download_path: procedure expose (globals)
     parse value zocgetglobaloption("DownloadAltPath") with . '="' dpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then dpath = zocfilename("RESOLV", dpath)
     dpath=dosfname(dpath)
     if right(dpath,1)\="\" then dpath=dpath||"\"
     if \dosisdir(dpath) then call _error "invalid path in _get_download_path"
    return dpath

/** _setgame v.6 **/
    _setgame: procedure expose (globals)

     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid log path in _setgame"

     if arg(1,"E") then gname=arg(1)
     else do
      list=_ini_list_games(lpath)
      if c=0 then gname="CLEAR"
      else gname=_drequestlist("select a game:", list||";CLEAR", ";", "c")
     end /*if*/
     if gname="CLEAR" | gname="" then do
      gname="%ZOCORHOST% %OPTIONS%"
      call zoclogging 0, 1
      call zoclogname "zoc_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="zoc_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end/*if*/
     else do
      call zoclogging 0, 1
      call zoclogname gname||"_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="'||gname||'_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end /*else*/
     call zocsetglobaloption 'WindowTitle="'||gname||'"'
    return gname

    _ini_is_section: procedure expose (globals)
     s=strip(arg(1))
     if left(s,1)="[" & left(reverse(s),1)="]" then return 1
    return 0

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

/** _figs_load v.1 **/
    _figs_load: procedure expose (globals)
     infile=arg(1)
     _f.=0
     c=0; n=1
     if _fileopenr(infile) then do
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"loading figs from" infile "... "
      do while \_fileeof(infile)
       n=word(strip(linein(infile)),1)
       select
        when _stripint(n)\=n then nop
        when n<1 then nop
        otherwise do
         _f.n=1
         c=c+1
        end /*otherwise*/
       end /*select*/
      end /*do*/
      call _fileclose(infile)
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" figs loaded. "
     end /*if*/
     rslt=c n
    return rslt

/** _figs_get v.2 **/
    _figs_get: procedure expose (globals)
     c1=0
     if arg(1,"E") then do
      fname=arg(1)
      parse value _figs_load(fname) with c1 m .
     end /*if*/
     _f.=0
     c=0 /* total count */
     cf=0 /* crp figs */
     pf=0 /* per figs */
     df=0 /* def figs */
     of=0 /* off figs */
     tf=0 /* tol figs */
     tot=0 /* amount */
     buflen=2048*1024
     call zocreceivebuf buflen
     call zocsend "g"
     if _wait("Deployed  Fighter  Scan")=640 then call _error "timeout"
     ans=0
     do while ans=0
      ans=_waitmux("r|Total|deployed")
     end /*do*/
     if ans=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)=buflen then call _error "buffer overflow"
     m=0; i=0; j=0
     i=pos(d2c(13),buff,pos("==",buff)+1)+1
     if i>1 then j=pos(d2c(13),buff,i)
     finish=pos("Total",buff,i)
     do while j>0 & j<finish
      line=strip(substr(buff,i,j-i))
      parse var line s1 amt type mode .
      if (type="Corp" | type="Personal") & _stripint(s1)=s1 then do
       amt=zocstring("REPLACE",amt,"T","000")
       amt=zocstring("REPLACE",amt,"M","000000")
       if datatype(amt,'N') then tot=tot+amt
       if (type="Personal") then pf=pf+1
       else cf=cf+1
       if (mode="Defensive") then df=df+1
       if (mode="Offensive") then of=of+1
       if (mode="Toll") then tf=tf+1
       _f.s1=1
       c=c+1
       m=max(m,s1)
      end /*if*/
      i=j+1
      j=pos(d2c(13),buff,i)
     end /*do*/
     if _verbose then call zocwrite _ansi("clearline;bt;fwh")||c||" figs read. "
     rslt=c m cf pf df of tf tot c-c1
    return rslt

/** _figs_save v.1 **/
    _figs_save: procedure expose (globals)
     outfile=arg(1)
     m=arg(2)
     c=0
     if outfile\="" then do
      if _filenew(outfile, "delete") then do
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"saving figs to" outfile "... "
       do i=1 to m
        if _f.i then do
         c=c+1
         call lineout outfile, i
        end /*if*/
       end /*do*/
       call _fileclose(outfile)
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" figs saved. "
      end /*if*/
     end /*if*/
    return c

/** _voids_load v.1 **/
    _voids_load: procedure expose (globals)
     infile=arg(1)
     _v.=0
     c=0; n=1
     if _fileopenr(infile) then do
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"loading voids from" infile "... "
      do while \_fileeof(infile)
       n=word(strip(linein(infile)),1)
       select
        when _stripint(n)\=n then nop
        when n<1 then nop
        otherwise do
         _v.n=1
         c=c+1
        end /*otherwise*/
       end /*select*/
      end /*do*/
      call _fileclose(infile)
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" voids loaded. "
     end /*if*/
     rslt=c n
    return rslt

/** _voids_get v.1 **/
    _voids_get: procedure expose (globals)
     _v.=0
     c=0
     buflen=32*1024
     call zocreceivebuf buflen
     if _sendwait("cx","<List Avoided Sectors>")=640 then call _error "timeout"
     if _wait("Computer command")=640 then call _error "timeout"
     call zocsend "q"
     if _waitmux("Command [|Citadel command")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)=buflen then call _error "buffer overflow"
     m=0; i=0; j=0
     i=pos("<List Avoided Sectors>",buff)
     i=pos(d2c(13),buff,i)+1
     i=pos(d2c(13),buff,i)+1
     j=pos(d2c(13),buff,i)
     do while j>0
      line=_space(substr(buff,i,j-i),1)
      if line="" then leave
      if line="No Sectors are currently being avoided." then leave
      do k=1 to words(line)
       s1=word(line,k)
       if _stripint(s1)=s1 then do
        _v.s1=1
        c=c+1
        m=max(m,s1)
       end /*if*/
      end /*do*/
      i=j+1
      j=pos(d2c(13),buff,i)
     end /*do*/
     if _verbose then call zocwrite _ansi("clearline;bt;fwh")||c||" voids read. "
     rslt=c m
    return rslt

/** _voids_save v.1 **/
    _voids_save: procedure expose (globals)
     outfile=arg(1)
     m=arg(2)
     c=0
     if outfile\="" then do
      if _filenew(outfile, "delete") then do
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"saving voids to" outfile "... "
       do i=1 to m
        if _v.i then do
         c=c+1
         call lineout outfile, i
        end /*if*/
       end /*do*/
       call _fileclose(outfile)
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" voids saved. "
      end /*if*/
     end /*if*/
    return c

/** _listsort v.3 **/
    _listsort: procedure expose (globals)
     list=arg(1)
     if arg(2,"E") then delim=arg(2)
                   else delim=";"
     a.=""
     do i=1 to _dwords(list,delim)
      a.i=_dword(list,i,delim)
     end /*do*/
     do k=i-1 to 1 by -1
      do j= 1 to k
       j2=j+1
       if a.j>a.j2 then do
        temp=a.j
        a.j=a.j2
        a.j2=temp
       end /*if*/
      end /*do*/
     end /*do*/
     list=a.1
     i=2
     do while a.i\=""
      if list="" then list=a.i
      else list=list||delim||a.i
      i=i+1
     end /*do*/
    return list

/** _dwordindex v.2 **/
    _dwordindex: procedure expose (globals)
     rslt=wordindex(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))
    return rslt

/** _pcheck v.4 **/
    _pcheck: procedure expose (globals)
     pc1=arg(1)
     pc2=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     rslt=0
     do i=1 to _dwords(pc1,";")
      if _instr(_dword(pc1,i,";"),pc2,"cs") then rslt=1
     end /*do*/
    return rslt

/** _abbrv_words v.1 **/
    _abbrv_words: procedure expose (globals)
     rslt=""
     if \arg(2,"E") then len=4
     else len=arg(2)
     do i=1 to words(arg(1))
      w=word(arg(1),i)
      select
       when len<1 then nop
       when len=1 then rslt=rslt||" "||left(w,1)
       when len>2 then rslt=rslt||" "||left(w,1)||strip(left(_space(translate(substr(w,2),"          ","aeiouAEIOU"),0),len-1))
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(rslt)
    return rslt

/** _mapseek v.4 **/
    _mapseek: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") | \arg(3,"E") then call _error "missing parameter in _mapseek"
     fname=arg(1)
     recordlen=arg(2)
     sector=arg(3)

     if _s.sector="_S."||sector then _s.=""
     if _s.sector="" then do

      call stream fname, "C", "SEEK "||(sector-1)*recordlen+2

      vis=0
      one=0
      prt=0
      pvis=0
      bore=0
      borg=0
      bequ=0
      flags=c2d(charin(fname))
      if flags%128=1 then do
       bequ=1
       flags=flags-128
      end /*if*/
      if flags%64=1 then do
       borg=1
       flags=flags-64
      end /*if*/
      if flags%32=1 then do
       bore=1
       flags=flags-32
      end /*if*/
      if flags%16=1 then do
       _pv.sector=1
       flags=flags-16
      end /*if*/
      if flags%8=1 then do
       prt=1
       flags=flags-8
      end /*if*/
      if flags%4=1 then flags=flags-4
      if flags%2=1 then do
       _od.sector=1
       flags=flags-2
      end /*if*/
      if flags%1=1 then do
       _sv.sector=1
       flags=flags-1
      end /*if*/

      if prt & _undef(_iniv(!port_kills,"!"||sector)) then do
       _p.sector=word("S B",bore+1)||word("S B",borg+1)||word("S B",bequ+1)
       _p.sector.!type=_p.sector
       do i=1 to 3
        ms1=charin(fname)
        ms2=charin(fname)
        ms3=charin(fname)
        quan=c2d(ms1)+c2d(ms2)*256; perc=c2d(ms3)
        _p.sector=_p.sector||";"||quan||","||perc
        x1=word("!pore !porg !pequ",i); x2=word("!qore !qorg !qequ",i)
        _p.sector.x1=perc; _p.sector.x2=quan
       end /*do*/
      end /*if*/
      else do
       _p.sector=""; _p.sector.!type=""
       _p.sector.!pore=0; _p.sector.!porg=0; _p.sector.!pequ=0
       _p.sector.!qore=0; _p.sector.!qorg=0; _p.sector.!qequ=0
       call stream fname, "C", "SEEK "||1+(sector-1)*recordlen+11
      end /*else*/
      _dtomsl.sector=c2d(charin(fname))
      _dfrmsl.sector=c2d(charin(fname))
      _bg.sector=c2d(charin(fname))+c2d(charin(fname))*256
      _nwi.sector=c2d(charin(fname))

      ms1=c2d(charin(fname))+c2d(charin(fname))*256
      if ms1=0 then _s.sector=""
      else do
       _s.sector=ms1
       _nw.sector=1
       wt=ms1%20000
       _s.sector.!num=ms1//20000
       _s.sector.!wt=wt
       _nwt.sector.wt=_nwt.sector.wt+1
       do i=1 to ((recordlen-15)%2-1)
        ms1=c2d(charin(fname))+c2d(charin(fname))*256
        if ms1>0 then do
         _s.sector=_s.sector ms1
         _nw.sector=_nw.sector+1
         wt=ms1%20000
         _s.sector.!num=_s.sector.!num ms1//20000
         _s.sector.!wt=_s.sector.!wt wt
         _nwt.sector.wt=_nwt.sector.wt+1
        end /*if*/
       end /*do*/
      end /*else*/

      _nwo.sector=_nwt.sector.1 + _nwt.sector.0
     end /*if*/
    return

/** _portmatch v.1 **/
    _portmatch: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _portmatch"
     m1=lower(strip(arg(1)))
     m2=lower(strip(arg(2)))
     rslt=0
     select
      when length(m1)\=3 then nop
      when length(m2)\=3 then nop
      when m1=m2 then rslt=1
      otherwise do
       mm1=0
       if left(m1,1)="x" then mm1=1
       if left(m2,1)="x" then mm1=1
       if left(m1,1)=left(m2,1) then mm1=1
       mm2=0
       if substr(m1,2,1)="x" then mm2=1
       if substr(m2,2,1)="x" then mm2=1
       if substr(m1,2,1)=substr(m2,2,1) then mm2=1
       mm3=0
       if substr(m1,3,1)="x" then mm3=1
       if substr(m2,3,1)="x" then mm3=1
       if substr(m1,3,1)=substr(m2,3,1) then mm3=1
       if mm1 & mm2 & mm3 then rslt=1
      end /*otherwise*/
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _ini_list_games v.1 **/
    _ini_list_games: procedure expose (globals)
     lpath=arg(1)
     parse value zoclistfiles(lpath||"*_data.ini", ";") with c list
     if c=0 then rslt=""
     else do
      n=_dword(list,1,";")
      rslt=left(n,lastpos("_data.ini",n)-1)
      do i=2 to c
       n=_dword(list,i,";")
       rslt=rslt||";"||left(n,lastpos("_data.ini",n)-1)
      end /*do*/
     end /*else*/
    return rslt

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt

/** _instr v.3 **/
    _instr: procedure expose (globals)
     fnd=arg(1)
     str=arg(2)
     if lower(arg(3))\="cs" then do
      fnd=lower(fnd)
      str=lower(str)
     end /*if*/
     if arg(1,"E") & arg(2,"E") & pos(fnd,str)>0 then rslt=1
     else rslt=0
    return rslt
