/* REXX _ship_capture.zrx by the reverend (build 94)                          */
/*-       built by rev-builder version 1.3a on 22 Mar 2014 at 00:15:37       -*/
/*- ------------------------------------------------------------------------ -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author.                -*/
/*-                                                                          -*/
/*- This script is provided to you WITHOUT ANY WARRANTY, even the implied    -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         -*/
/*-                                                                          -*/
/*-                       Copyright (C) 2009 Ron Wilson                      -*/
/*- ------------------------------------------------------------------------ -*/
/*- ------------------*/ _g.!sname="_ship_capture.zrx" /*------------------- -*/
/*- --------------*/ _g.!sbuild=94; _g.!sdate="2014-03-22" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/

globals=_setglobals()
call _timeout 60
call zocsynctime 500
call on halt name _halt

/* online / prompt check */
   if \_isonline(1) then call _error "you must be online to use this script."
   pmt=_synchronize()
   if \_listin(pmt,"command;citadel") then call _error "please start at the command or citadel prompt."

/* load ini variables */
   sl=_ini_load_settings()
   do i=1 to _dwords(sl,";")
    s=_dword(sl,i,";")
    globals=globals||" !"||s
    interpret '!'||s||'="!"||s'
   end;
   f=0; l=""
   load="sd shiplist podless"
   do i=1 to words(load)
    s=word(load,i)
    x="!"||s
    interpret s||"=_ini.!settings.x"
    interpret 'if '||s||'="##UNDEF##" then do; l=l s; f=1; end'
   end; if f then call _error "missing config variable(s):"||l; drop load s sl x f l

/* get planet info if any */
   if pmt="citadel" then do
    call zocsend "qmnt^M"
    if zocwait("Fighters do you want to take")=640 then call _error "timeout"
    pscreen=_planet_get_info("planet")
    pnum=word(pscreen,1)
    pfigs=word(pscreen,25)
    call zocsend "c"
   end /*if*/
   else do; pnum=0; pfigs=0; end

/* get cship info */
   iscreen=_get_info_i(pmt,shiplist)
   cname=_dword(iscreen,1,";")
   ccorp=_dword(iscreen,5,";")
   cshiptype=_dword(iscreen,8,";")
   csec=_dword(iscreen,13,";")
   cfigs=_dword(iscreen,20,";")
   cshields=_dword(iscreen,21,";")
   cshipstats=_iniv(!settings,"!ship."||cshiptype)
   cmf=_dword(cshipstats,5,";")
   cmfa=_dword(cshipstats,2,";")
   coff=_dword(cshipstats,12,";")
   cdef=_dword(cshipstats,13,";")

/* announce script */
   call zocsend "'"||_g.!sname1||" : build "||_g.!sbuild||"^M"

id_s=""
id_t=""
combatscan=0
afigs=0
tholian.=0
again:

/* get sector list */
/* type (1=fed, 2=alien, 3=ship, 4=trader) | protected | rank | corp | name | figs | shiptype */
   list=_attack_get_list(pmt, shiplist, ccorp, cname)

/* evaluate list */
   beacon=_dword(list,1,";")
   n=_dwords(list,";")-1
   do i=1 to n
    parse value _dword(list,i+1,";") with type.i "|" protected.i "|" rank.i "|" corp.i "|" name.i "|" figs.i "|" shiptype.i
    s=_iniv(!settings,"!ship."||shiptype.i)
    if _undef(s) then protected.i=1
    else do
     msh.i=_dword(s,11,";")
     def.i=_dword(s,13,";")
    end /*else*/
   end /*do*/

/* build cap list */
   caplist=""
   do i=1 to n
    if type.i=4 & \protected.i & (mycorp=0 | mycorp\=corp.i) then caplist=caplist i
   end /*do*/
   do i=1 to n
    if type.i=3 & \protected.i & (mycorp=0 | mycorp\=corp.i) then caplist=caplist i
   end /*do*/
   do i=1 to n
    if type.i=2 & \protected.i & (mycorp=0 | mycorp\=corp.i) then caplist=caplist i
   end /*do*/
   caplist=strip(caplist)

/*
[10:40] Cherokee: here's what I do
[10:41] Cherokee: i take the shields plus the figs, and multiply by 0.95
[10:41] Cherokee: then I subtract 5
[10:41] Cherokee: then I factor in offensive and defensive odds
[10:41] Cherokee: and then I factor in if it's a tholian
[10:42] Cherokee: based on if I did about the right amount of damage on the first wave
[10:42] Cherokee: if I did 1/3 of the expected or less, I assume it's a tholian
[10:42] Cherokee: then, I make sure my attack wave is at least 1 fig
[10:42] Cherokee: then I hit
[10:43] Cherokee: subtracting 5 is important, because if the ship has 3 shields and 1 fig, 95 percent will still blow the ship up sometimes, so it takes me 3-4 more attacks to actually cap it
[10:43] Cherokee: single shot ship cap is pretty tough at really low numbers
*/

/* check for something to cap */
   n=0
   do i=1 to words(caplist)
    n=word(caplist,i)
    if type.n=3 then umf=2; else umf=1

    /*combat scanner identification*/
    if id_s=type.n shiptype.n corp.n name.n figs.n then esh=max(0,combatscan*msh.n%100-umf*afigs*coff/def.n%th)
    else do; id_s=type.n shiptype.n corp.n name.n figs.n; esh=0; end

    /*tholian identification*/
    x=shiptype.n; th=word(1 4, tholian.x+1)
    if th=1 & id_t=type.n shiptype.n corp.n name.n then do
     if (figsbefore+word(esh msh.n, unkshields+1)-figs.n)<damage%3 then do
      th=4
      x=shiptype.n
      tholian.x=1
     end /*if*/
    end /*if*/
    else id_t=type.n shiptype.n corp.n name.n

    afigs=max(1,(((figs.n+esh)*95%100-5)*th*def.n/coff)%umf)
    if _listin(shiptype.n,podless,";") & type\=3 then afigs=max(afigs,cfigs)
    if afigs>(cfigs+pfigs) then iterate
    afigs=min(afigs,cmfa)
    if afigs>cfigs then iterate; else leave
   end /*do*/
   if n=0 | i=words(caplist)+1 then do
    call zocsend "'nothing left to cap^M"
    exit
   end /*if*/

   damage=(afigs*umf*coff/def.n)%th
   figsbefore=figs.n

/* announce capture attempt */
   call zocsend "'"||_g.!sname1||" : capping : "||word("federal alien unmanned manned",type.n) shiptype.n||" : f="||figs.n||" : odds="||def.n||"^M"

/* lift if on cit */
   if pmt="citadel" then call zocsend "qq"

/* attempt capture */
   if beacon then call zocsend "ay"
   call zocsend "a"||copies("n",n-1)||"yqz"||afigs||"^M"

/* land if on cit, grab figs */
   if pmt="citadel" then do
    call zocsend "l ^H"||pnum||"^M mnt^M"
    if zocwait("<Attack>")=640 then call _error "timeout"
    ans=zocwaitmux("(?=Help)? :|Combat scanners show enemy shields at |a powerful force-shield")
    unkshields=0
    select
     when ans=0 then combatscan=0
     when ans=1 then combatscan=_grabit("%","s")
     when ans=2 then unkshields=1
     when ans=640 then call _error "timeout"
     otherwise nop
    end /*select*/
    if zocwait("Fighters do you want to take")=640 then call _error "timeout"
    pscreen=_planet_get_info("planet")
    pnum=word(pscreen,1)
    pfigs=word(pscreen,25)
    call zocsend "c^M "
   end /*if*/
   else do
    if zocwait("<Attack>")=640 then call _error "timeout"
    ans=zocwaitmux("(?=Help)? :|Combat scanners show enemy shields at |a powerful force-shield")
    unkshields=0
    select
     when ans=0 then combatscan=0
     when ans=1 then combatscan=_grabit("%","s")
     when ans=2 then unkshields=1
     when ans=640 then call _error "timeout"
     otherwise nop
    end /*select*/
   end /*else*/

   cfigs=_getinfo("figs")

signal again

/*
Attack dupe's cruiser (58,879-500) (Y/N) [N]? Yes
How many fighters do you wish to use (0 to 6,000) [0]? 1

You lost 1 fighter(s), 58,878 remain.
dupe warps out of the sector!
You destroyed 1 enemy fighters, 499 remain.

You lost 1 fighter(s), 58,872 remain.
dupe tried to warp out of the sector but failed!
You destroyed 0 enemy fighters, 499 remain.

Attack dupe's cruiser (58,872-499) (Y/N) [N]? Yes
Combat scanners show enemy shields at 100%
How many fighters do you wish to use (0 to 6,000) [0]? 1
Your fighters encounter a powerful force-shield around the enemy ship!

You lost 1 fighter(s), 58,871 remain.
dupe tried to warp out of the sector but failed!
You destroyed 0 enemy fighters, 499 remain.

How many fighters do you wish to use (0 to 6,000) [0]? 1

A blaring message comes screaming across your sub-space radio:

"This is Captain Zyrain, of the StarShip Intrepid, your hostile
 act has been noticed and I feel that I must inform you of the dire
 consequences that you are asking for.  No space piracy will take place
 in Federation space while I am commanding the Intrepid!

 Intrepid out..."

You notice the un-Godly bulk of the Intrepid looming into view and think
twice about your aggressive actions.
*/

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.5 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. _debug (globals)

     _debug=0
     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118 + 1 /* +1 added 6/23/2008 */
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365
     _baseday.2009=_baseday.2008+365+1
     _baseday.2010=_baseday.2009+365
     _baseday.2011=_baseday.2010+365
     _baseday.2012=_baseday.2011+365
     _baseday.2013=_baseday.2012+365+1
     _baseday.2014=_baseday.2013+365
     _baseday.2015=_baseday.2014+365
     _baseday.2016=_baseday.2015+365
     _baseday.2017=_baseday.2016+365+1
     _baseday.2018=_baseday.2013+365
     _baseday.2019=_baseday.2014+365
     _baseday.2020=_baseday.2015+365
     _baseday.2021=_baseday.2016+365+1
     _baseday.2022=_baseday.2013+365
     _baseday.2023=_baseday.2014+365
     _baseday.2024=_baseday.2015+365
     _baseday.2025=_baseday.2016+365+1
     _baseday.2026=_baseday.2013+365
     _baseday.2027=_baseday.2014+365
     _baseday.2028=_baseday.2015+365
     _baseday.2029=_baseday.2016+365+1
     _baseday.2030=_baseday.2013+365
     _baseday.2031=_baseday.2014+365
     _baseday.2032=_baseday.2015+365
     _baseday.2033=_baseday.2016+365+1

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _efc. _es. _et. _ep. _fc. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _bd. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _vs. _vn. _vi. _mcic. _fh. _fhp. "
     rslt=rslt||"_clv. _online. _msg _msg. _debug "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.4 **/
    _halt: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _isonline v.3 **/
    _isonline: procedure expose (globals)
     if zocgetinfo("ONLINE")="##YES##" then return 1
     if arg(1,"E") then t=arg(1)
     else call _error "missing parameter in _isonline"
     rslt=0
     o="##NO##"
     call time "R"
     do while time("E")<=t & o\="##YES##"
      o=zocgetinfo("ONLINE")
      if o="##YES##" then rslt=1
     end /*do*/
    return rslt

/** _error v.9 **/
    _error: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwrite _ansi("clearline;bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: revhelper_at_thereverend_dot_org > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call _beep "error.wav"
    exit

/** _synchronize v.5 **/
    _synchronize: procedure expose (globals)

     if arg(1,"E") then checkcitprompts=arg(1); else checkcitprompts=1

     synchw=_synchronize_vars("w")
     synchr=_synchronize_vars("r")

     call zocsend "&&"
     ans=_waitmux("&&|Pausing is")
     select
      when ans=0 then return "unknown_text_entry"
      when ans=1 then nop
      when ans=640 then return "timeout"
      otherwise nop
     end /*select*/

     ans=_waitmux(synchw)
     select
      when ans=640 then rslt="timeout"
      when ans>0 then do
       if _wait("Pausing is")=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=_dword(synchr,ans+1,";")

     select
      when \checkcitprompts then nop
      when rslt="computer" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _listin v.4 **/
    _listin: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listin"
     find=arg(1)
     list=arg(2)
     if arg(3,"E") then delim=left(arg(3),1); else delim=";"
     if arg(4,"E") then abbrv=arg(4); else abbrv=0;
     rslt=0
     do i=1 to _dwords(list,delim)
      select
       when \abbrv & find==_dword(list,i,delim) then do; rslt=1; leave; end
       when \abbrv then nop
       when pos(_dword(list,i,delim),find)>0 then do; rslt=1; leave; end
       otherwise nop
      end /*if*/
     end /*do*/
    return rslt

/** _ini_load_settings v.1 **/
    _ini_load_settings: procedure expose (globals)

     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     if left(zocgetinfo("VERSION"),1)>4 then ldefault = zocfilename("RESOLV", ldefault)
     parse value zocgetglobaloption("WindowTitle") with . '="' gname '"'

     lpath=_get_log_path()
     spath=_get_script_path()
     dpath=_get_download_path()

     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then gname=_setgame()
     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then exit
     dname=dosfname(lpath||gname||"_data.ini")

     _ini.="##UNDEF##"

     sectionlist=""
     if _fileopenr(dname) then do
      insection=0
      do while \_fileeof(dname)
       line=strip(linein(dname))
       if _ini_is_section(line) then do
        insection=1
        parse var line "[" section "]"
        section=strip(section)
        if sectionlist="" then sectionlist=section; else sectionlist=sectionlist||";"||section
       end /*if*/
       else do
        if insection then do
         parse var line k "=" v
         v=_ini_format_value(v)
         k="!"||section||".!"||strip(k)
         if k\="!"||section||".!" then _ini.k=strip(v)
        end /*if*/
       end /*else*/
      end /*while*/
      call _fileclose dname
     end /*if*/

     call _iniv "!settings", "!ldefault", ldefault
     call _iniv "!settings", "!lpath",  lpath
     call _iniv "!settings", "!spath",  spath
     call _iniv "!settings", "!dpath",  dpath
     call _iniv "!settings", "!dname",  dname
     call _iniv "!settings", "!gname",  gname
     call _iniv "!settings", "!lname",  lpath||gname||"_log.txt"
     call _iniv "!settings", "!fname",  lpath||gname||"_figs.txt"
     call _iniv "!settings", "!vname",  lpath||gname||"_voids.txt"
     call _iniv "!settings", "!vwname", lpath||gname||"_view.txt"
     call _iniv "!settings", "!pname",  lpath||gname||".prt"
     call _iniv "!settings", "!sname",  lpath||gname||".sct"
     call _iniv "!settings", "!rpname", lpath||gname||"_ref.prt"
     call _iniv "!settings", "!rsname", lpath||gname||"_ref.sct"
     call _iniv "!settings", "!mname",  lpath||gname||".map"
     call _iniv "!settings", "!zname",  lpath||gname||".ztm"
     call _iniv "!settings", "!nfname", lpath||gname||"_nearfig.txt"

    return sectionlist

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _planet_get_info v.1 **/
    _planet_get_info: procedure expose (globals)
     if arg(1,"E") then pmt=arg(1); else pmt=_synchronize()
     if pmt="planet" then do
      if _sendwait("d","Planet #")=640 then call _error "timeout"
      parse value _grabit(":") with n . . s ":"
      if _wait("Fuel Ore")=640 then call _error "timeout"
      parse value _stripcomma(_grabit("^M")) with c.1 cb.1 dp.1 pa.1 sa.1 pm.1 .
      if _wait("Organics")=640 then call _error "timeout"
      parse value _stripcomma(_grabit("^M")) with c.2 cb.2 dp.2 pa.2 sa.2 pm.2 .
      if _wait("Equipment")=640 then call _error "timeout"
      parse value _stripcomma(_grabit("^M")) with c.3 cb.3 dp.3 pa.3 sa.3 pm.3 .
      if _wait("Fighters")=640 then call _error "timeout"
      parse value _stripcomma(_grabit("^M")) with c.4 cb.4 dp.4 pa.4 sa.4 pm.4 .
      cit=_waitmux("Planet command (?=help) [D]|level 1 Citadel|level 2 Citadel|level 3 Citadel|level 4 Citadel|level 5 Citadel|level 6 Citadel")
      do i=1 to 4
       if c.i="N/A"  then c.i=0
       if cb.i="N/A" then cb.i=0
      end /*do*/
      rslt=n s cit c.1 cb.1 dp.1 pa.1 sa.1 pm.1 c.2 cb.2 dp.2 pa.2 sa.2 pm.2 c.3 cb.3 dp.3 pa.3 sa.3 pm.3 c.4 cb.4 dp.4 pa.4 sa.4 pm.4
     end /*if*/
     else call _error "wrong prompt in _planet_get_info"
    return rslt

/** _get_info_i v.1 **/
    _get_info_i: procedure expose (globals)
     if arg(1,"E") then pmt=arg(1); else pmt=_synchronize()
     if arg(2,"E") then shiplist=arg(2); else shiplist=_iniv(!settings,"!shiplist")

     if \_listin(pmt,"command;citadel",";") then return "##UNDEF##"

     /* load ranks */
     if \_undef(_online.!reset) then do
      _online.="##UNDEF##"
      call _online_load_rank_names
     end /*if*/

     buflen=16*1024
     call zocreceivebuf buflen
     if _sendwait("i","<Info>")=640 then call _error "timeout"
     if _waitmux("Command [|Citadel command (")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"   ",d2c(0)||d2c(7)||d2c(10))
     if length(buff)=buflen then call _error "buffer overflow"
     cr=d2c(13)

     i=pos("Trader Name    : ",buff)
     if i=0 then name="##UNDEF##"
     else do
      i=i+17
      j=pos(cr,buff,i)
      name=substr(buff,i,j-i)
      parse value _online_split_rank_name(name) with rank ";" name
     end /*else*/

     i=pos("Rank and Exp   : ",buff)
     if i=0 then do; exp=0; aln=0; end
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value _stripcomma(substr(buff,i,j-i)) with exp " points Alignment=" aln " " .
     end /*else*/

     i=pos("Corp           # ",buff)
     if i=0 then do; corpnum=0; corpname="##UNDEF##"; end
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with corpnum ", " corpname .
     end /*else*/

     i=pos("Ship Name      : ",buff)
     if i=0 then shipname="##UNDEF##"
     else do
      i=i+17
      j=pos(cr,buff,i)
      shipname=substr(buff,i,j-i)
     end /*else*/

     i=pos("Ship Info      : ",buff)
     if i=0 then do; shiptype="##UNDEF##"; ported=0; kills=0; end
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with shiptype " Ported=" ported " Kills=" kills
      shiptype=_attack_strip_manufacturer(translate(shiptype,"____","|;=."), shiplist)
     end /*else*/

     i=pos("Date Built     : ",buff)
     if i=0 then datebuilt="##UNDEF##"
     else do
      i=i+17
      j=pos(cr,buff,i)
      datebuilt=substr(buff,i,j-i)
     end /*else*/

     i=pos("Turns to Warp  : ",buff)
     if i=0 then tpw=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      tpw=strip(substr(buff,i,j-i))
     end /*else*/

     i=pos("Current Sector : ",buff)
     if i=0 then csec=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      csec=substr(buff,i,j-i)
     end /*else*/

     i=pos("Turns left     : ",buff)
     if i=0 then turns=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      turns=strip(substr(buff,i,j-i))
      if turns="Unlimited" then turns=0
     end /*else*/

     i=pos("Total Holds    : ",buff)
     if i=0 then do; holds=0; ore=0; org=0; equ=0; colos=0; end
     else do
      i=i+17
      j=pos(cr,buff,i)
      line=substr(buff,i,j-i)
      parse var line holds .                ; if holds="" then holds=0
      parse var line . "Fuel Ore=" ore .    ; if ore=""   then ore=0
      parse var line . "Organics=" org .    ; if org=""   then org=0
      parse var line . "Equipment=" equ .   ; if equ=""   then equ=0
      parse var line . "Colonists=" colos . ; if colos="" then colos=0
     end /*else*/

     i=pos("Fighters       : ",buff)
     if i=0 then figs=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      figs=_stripcomma(strip(substr(buff,i,j-i)))
     end /*else*/

     i=pos("Shield points  : ",buff)
     if i=0 then shields=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      shields=_stripcomma(strip(substr(buff,i,j-i)))
     end /*else*/

     i=pos("Armid Mines  T1: ",buff)
     if i=0 then armids=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with armids .
     end /*else*/

     i=pos("Limpet Mines T2: ",buff)
     if i=0 then limpets=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      limpets=strip(substr(buff,i,j-i))
     end /*else*/

     i=pos("Marker Beacons : ",buff)
     if i=0 then beacons=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      beacons=strip(substr(buff,i,j-i))
     end /*else*/

     i=pos("Photon Missiles: ",buff)
     if i=0 then photons=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with photons .
     end /*else*/

     i=pos("Genesis Torps  : ",buff)
     if i=0 then gens=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      gens=strip(substr(buff,i,j-i))
     end /*else*/

     i=pos("Atomic Detn.   : ",buff)
     if i=0 then adets=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with adets .
     end /*else*/

     i=pos("Corbomite Level: ",buff)
     if i=0 then corb=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      corb=strip(substr(buff,i,j-i))
     end /*else*/

     i=pos("Cloaking Device: ",buff)
     if i=0 then cloaks=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with cloaks .
     end /*else*/

     i=pos("Ether Probes   : ",buff)
     if i=0 then probes=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      probes=strip(substr(buff,i,j-i))
     end /*else*/

     i=pos("Mine Disruptors: ",buff)
     if i=0 then mdis=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      mdis=strip(substr(buff,i,j-i))
     end /*else*/

     i=pos("Psychic Probe  : ",buff)
     if i=0 then pspr=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with line .
      pspr=(line="Yes")
     end /*else*/

     i=pos("Planet Scanner : ",buff)
     if i=0 then pscanner=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      line=strip(substr(buff,i,j-i))
      pscanner=(line="Yes")
     end /*else*/

     i=pos("LongRange Scan : ",buff)
     if i=0 then do; dens=0; holo=0; end
     else do
      i=i+17
      j=pos(cr,buff,i)
      line=strip(substr(buff,i,j-i))
      holo=(line="Holographic Scanner")
      dens=(line="Density Scanner") | holo
     end /*else*/

     i=pos("  (Type 1 Jump): ",buff)
     if i=0 then t1j=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with t1j .
     end /*else*/

     i=pos("  (Type 2 Jump): ",buff)
     if i=0 then t2j=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      parse value substr(buff,i,j-i) with t2j .
     end /*else*/

     i=pos("Credits        : ",buff)
     if i=0 then creds=0
     else do
      i=i+17
      j=pos(cr,buff,i)
      creds=_stripcomma(strip(substr(buff,i,j-i)))
     end /*else*/

     rslt=name||";"||rank||";"||exp||";"||aln||";"||corpnum||";"||corpname||";"||shipnamae||";"||shiptype||";"||ported,
              ||";"||kills||";"||datebuilt||";"||tpw||";"||csec||";"||turns||";"||holds||";"||ore||";"||org,
              ||";"||equ||";"||colos||";"||figs||";"||shields||";"||armids||";"||limpets||";"||beacons,
              ||";"||photons||";"||gens||";"||adets||";"||corb||";"||cloaks||";"||probes||";"||mdis||";"||pspr,
              ||";"||pscanner||";"||dens||";"||holo||";"||t1j||";"||t2j||";"||creds
    return rslt
    /*
    1=name
    2=rank
    3=exp
    4=aln
    5=corpnum
    6-corpname
    7=shipname
    8=shiptype
    9=ported
    10=kills
    11=datebuild
    12=tpw
    13=csec
    14=turns
    15=holds
    16=ore
    17=org
    18=equ
    19=colos
    20=figs
    21=shields
    22=armids
    23=limpets
    24=beacons
    25=photons
    26=gens
    27=adets
    28=corb
    29=cloaks
    30=probes
    31=mdis
    32=psprobe
    33=pscanner
    34=dens
    35=holo
    36=t1j
    37=t2j
    38=creds
    */

    _iniv: procedure expose (globals)
     s=arg(1); v=arg(2)
     if arg(3,"E") then _ini.s.v=arg(3)
    return _ini.s.v

    _attack_get_list: procedure expose (globals)
     if arg(1,"E") then pmt=arg(1); else pmt=_synchronize()
     if arg(2,"E") then shiplist=arg(2); else shiplist=_iniv(!settings,"!shiplist")
     if arg(3,"E") then mycorp=arg(3); else mycorp=0;
     if arg(4,"E") then myname=arg(4); else myname="";
     buflen=16*1024
     call zocreceivebuf buflen
     if _sendwait(_list_select(pmt,"citadel;command;bank","s;d;qqd",";"),_list_select(pmt,"citadel;command;bank","<Scan Sector>;<Re-Display>;<Re-Display>",";"))=640 then call _error "timeout"
     if _wait("Warps to Sector(s) :")=640 then call _error "timeout"
     if _wait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0), "   ", d2c(0)||d2c(7)||d2c(10))
     if length(buff)=buflen then call _error "buffer overflow"
     fedspace=pos("Beacon  : FedSpace, FedLaw Enforced",buff)>0
     beacon=(pos("Beacon  :",buff)>0) & \fedspace
     c=0
     i=1
     cr=d2c(13)
     do forever
      k=pos(" ftrs,",buff,i)
      if k>0 then do
       c=c+1
       j=lastpos(cr,buff,k)+1
       part1.c=strip(substr(buff,j,k-j))
       j=pos(cr,buff,k)+1
       k=pos(cr,buff,j+1)
       part2.c=strip(substr(buff,j,k-j))
       i=k+1
      end /*if*/
      else leave
     end /*do*/

     t=0
     do i=1 to c
      select
       when left(part1.i,10)="Federals: " then do; t=1; part1.i=substr(part1.i,11); end
       when left(part1.i,10)="Ships   : " then do; t=3; part1.i=substr(part1.i,11); end
       when left(part1.i,10)="Traders : " then do; t=4; part1.i=substr(part1.i,11); end
       when substr(part1.i,9,2)=": "     then do; t=2; part1.i=substr(part1.i,11); end
       otherwise nop
      end /*select*/

      type.i=t
      select
       when t=0 then nop
       when t=1 | t=2 | t=4 then parse var part1.i name.i ", w/ " figs.i
       when t=3 then parse var part1.i . "[Owned by] " name.i ", w/ " figs.i
       otherwise type.i=0
      end /*select*/

      parse value _online_split_name_corp(name.i) with name.i ";" corp.i
      figs.i=_stripcomma(figs.i)
      parse value reverse(part2.i) with ")" shiptype.i "(" .
      shiptype.i=translate(shiptype.i,"____","|;=.")
      shiptype.i=_attack_strip_manufacturer(reverse(shiptype.i), shiplist)

      rank.i=0
      if type.i=4 then parse value _online_split_rank_name(name.i) with rank.i ";" name.i
      select
       when type.i<=1                                   then protected.i=1
       when type.i=2                                    then protected.i=1
       when type.i=4 & fedspace & rank.i>=0 & rank.i<=9 then protected.i=1
       when type.i=4 & corp.i=mycorp                    then protected.i=1
       when type.i=3 & fedspace                         then protected.i=1
       when type.i=3 & corp.i=mycorp                    then protected.i=1
       when type.i=3 & name.i=myname                    then protected.i=1
       otherwise                                             protected.i=0
      end /*select*/

     end /*do*/

     rslt=beacon
     do j=1 to 4
      do i=1 to c
       if type.i=j then rslt=rslt||";"||type.i||"|"||protected.i||"|"||rank.i||"|"||corp.i||"|"||name.i||"|"||figs.i||"|"||shiptype.i
      end /*do*/
     end /*do*/

     call zocsend _list_select(pmt,"citadel;command;bank","^M ; ;psgyg ",";")

    return rslt

    _undef: procedure expose (globals)
     if arg(1)="##UNDEF##" then return 1; else return 0

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if _wait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _getinfo v.6 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=32*1024

     /* grab a buffer of text containing the quickstats and strip lf/nul */
     call zocreceivebuf bufflen
     call zocsend "/"
     if _wait("Sect ")=640 then call _error "timeout"
     if _wait("Ship ")=640 then call _error "timeout"
     if _wait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"

     /* reduce buffer to just the quickstats info and change bars to semicolons */
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, ";", d2c(179)),1)

     /* strip commas from numbers */
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     /* remove newlines, strip spaces, and condense to semi-delimited string */
     cr=d2c(13)
     buff2=strip(_dword(buff,1,cr))
     do i=2 to _dwords(buff,cr)
      buff2=buff2||";"||strip(_dword(buff,i,cr))
     end
     buff=buff2
     drop buff2

     /* analyze buffer */
     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/
     c=c+1
     vr.c="all"
     vl.c=buff

     /* set global vars */
     _qs.!corp=0
     do i=1 to c
      tag="!"||upper(vr.i)
      _qs.tag=vl.i
     end /*do*/

     /* pass out requested stats */
     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _debug v.5 **/
    _debug: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _debug"
     mode=strip(left(lower(arg(1)),3))
     msg=arg(2)
     if arg(3,"E") then logname=strip(arg(3))
     else logname="_debug.txt"
     select
      when mode="scr" then call zocwriteln "^[[1;34mREV-DEBUG <"||msg||">^[[0m"
      when mode="fed" then call zocsend "`REV-DEBUG <"||msg||">^M"
      when mode="sub" then call zocsend "'REV-DEBUG <"||msg||">^M"
      when mode="log" then do
       if _fileopenw(logname) then do
        call lineout logname, msg
        call _fileclose logname
       end /*if*/
       else call _error "unable to open rev-log.txt."
      end /*when*/
      otherwise nop
     end /*select*/
    return

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _cleanup v.1 **/
    _cleanup: procedure expose (globals)
     /* put code here to do custom cleanup
        for specific scripts and override
        it in your main program */
    return 1

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _synchronize_vars v.1 **/
    _synchronize_vars: procedure expose (globals)
     select
      when arg(1)="w" then rslt="Pausing",
                              ||"|Command [",
                              ||"|Citadel command",
                              ||"|Planet command",
                              ||"|<StarDock>",
                              ||"|ship to sell",
                              ||"|Still interested ?",
                              ||"|wish to buy? (A,B,C,Q,?)",
                              ||"|<Galactic Bank>",
                              ||"|<Hardware Emporium>",
                              ||"|<Shipyards>",
                              ||"|<Tavern>",
                              ||"|Enter your choice [T] ?",
                              ||"|do you want to sell [",
                              ||"|do you want to buy [",
                              ||"|Computer command",
                              ||"|Corporate command",
                              ||"|Colonists? [T]",
                              ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]",
                              ||"|`",
                              ||"|F: ",
                              ||"|'",
                              ||"|S: ",
                              ||"|M: ",
                              ||"|P: "
      when arg(1)="r" then rslt="unknown;command;citadel;planet;stardock;ship_sell;ship_sell_interested;class_0",
                             ||";bank;hardware;shipyards;tavern;port_menu;port_haggle;port_haggle;computer",
                             ||";corporate;terra;stop_in_this_sector?;fedcom_text_entry_1;fedcom_text_entry_2",
                             ||";subspace_text_entry_1;subspace_text_entry_2;mail_text_entry;private_text_entry",
                             ||";corporate_cit;computer_cit;unknown_text_entry" /* <-- these unmatched in the wait string above */
      when arg(1)="command" then rslt=" ; ;qq;q;q;qqq;nqq;q;qq;qq;qq;qq;q;0^Mz0^Mz0^M;0^Mz0^Mz0^M;q;q;q;y;^H;^M;^H;^M;^M;^M;qqq;qqq; "
      when arg(1)="computer" then rslt=" ;c;c;qc;qc;qqqc;nqqc;qc;qqc;qqc;qqc;qqc;qc;0^Mz0^Mz0^Mc;0^Mz0^Mz0^Mc; ;qc;qc;yc;^Hc;^Mc;^Hc;^Mc;^Mc;^Mc;qc;qc; "
      otherwise call _error "unknown argument in _synchronize_vars"
     end /*select*/
    return rslt

/** _waitmux v.1 **/
    _waitmux: procedure expose (globals)
     rslt=zocwaitmux(arg(1))
    return rslt

/** _wait v.1 **/
    _wait: procedure expose (globals)
     rslt=zocwait(arg(1))
    return rslt

/** _get_log_path v.2 **/
    _get_log_path: procedure expose (globals)
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_path"
    return lpath

/** _get_script_path v.1 **/
    _get_script_path: procedure expose (globals)
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     if left(zocgetinfo("VERSION"),1)>4 then spath = zocfilename("RESOLV", spath)
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _get_download_path v.2 **/
    _get_download_path: procedure expose (globals)
     parse value zocgetglobaloption("DownloadAltPath") with . '="' dpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then dpath = zocfilename("RESOLV", dpath)
     dpath=dosfname(dpath)
     if right(dpath,1)\="\" then dpath=dpath||"\"
     if \dosisdir(dpath) then call _error "invalid path in _get_download_path"
    return dpath

/** _setgame v.6 **/
    _setgame: procedure expose (globals)

     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid log path in _setgame"

     if arg(1,"E") then gname=arg(1)
     else do
      list=_ini_list_games(lpath)
      if c=0 then gname="CLEAR"
      else gname=_drequestlist("select a game:", list||";CLEAR", ";", "c")
     end /*if*/
     if gname="CLEAR" | gname="" then do
      gname="%ZOCORHOST% %OPTIONS%"
      call zoclogging 0, 1
      call zoclogname "zoc_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="zoc_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end/*if*/
     else do
      call zoclogging 0, 1
      call zoclogname gname||"_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="'||gname||'_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end /*else*/
     call zocsetglobaloption 'WindowTitle="'||gname||'"'
    return gname

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

    _ini_is_section: procedure expose (globals)
     s=strip(arg(1))
     if left(s,1)="[" & left(reverse(s),1)="]" then return 1
    return 0

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=_wait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

/** _online_load_rank_names v.1 **/
    _online_load_rank_names: procedure expose (globals)
     _online.!red.0="12 10 7 8 9 11 22 13 1 2 3 15 4 5 6 14 21 17 18 19 20 16"
     _online.!red.1="Nuisance 3rd Class"
     _online.!red.2="Nuisance 2nd Class"
     _online.!red.3="Nuisance 1st Class"
     _online.!red.4="Menace 3rd Class"
     _online.!red.5="Menace 2nd Class"
     _online.!red.6="Menace 1st Class"
     _online.!red.7="Smuggler 3rd Class"
     _online.!red.8="Smuggler 2nd Class"
     _online.!red.9="Smuggler 1st Class"
     _online.!red.10="Smuggler Savant"
     _online.!red.11="Robber"
     _online.!red.12="Terrorist"
     _online.!red.13="Pirate"
     _online.!red.14="Infamous Pirate"
     _online.!red.15="Notorious Pirate"
     _online.!red.16="Dread Pirate"
     _online.!red.17="Galactic Scourge"
     _online.!red.18="Enemy of the State"
     _online.!red.19="Enemy of the People"
     _online.!red.20="Enemy of Humankind"
     _online.!red.21="Heinous Overlord"
     _online.!red.22="Prime Evil"

     _online.!blue.0="11 21 7 10 6 20 3 2 14 16 15 4 8 23 13 5 19 17 1 12 18 22 9"
     _online.!blue.1="Civilian"
     _online.!blue.2="Private"            /* match 2 */
     _online.!blue.3="Private 1st Class"  /* match 1 */
     _online.!blue.4="Lance Corporal"
     _online.!blue.5="Corporal"
     _online.!blue.6="Sergeant"           /* match 9 */
     _online.!blue.7="Staff Sergeant"
     _online.!blue.8="Gunnery Sergeant"
     _online.!blue.9="1st Sergeant"
     _online.!blue.10="Sergeant Major"     /* match 5 */
     _online.!blue.11="Warrant Officer"
     _online.!blue.12="Chief Warrant Officer"
     _online.!blue.13="Ensign"
     _online.!blue.14="Lieutenant J.G."      /* match 14 */
     _online.!blue.15="Lieutenant"           /* match 13,15 */
     _online.!blue.16="Lieutenant Commander" /* match 14 */
     _online.!blue.17="Commander"
     _online.!blue.18="Captain"
     _online.!blue.19="Commodore"
     _online.!blue.20="Rear Admiral"
     _online.!blue.21="Vice Admiral"
     _online.!blue.22="Admiral"
     _online.!blue.23="Fleet Admiral"
    return

    /*
    Nuisance 3rd Class
    Nuisance 2nd Class
    Nuisance 1st Class
    Menace 3rd Class
    Menace 2nd Class
    Menace 1st Class
    Smuggler 3rd Class
    Smuggler 2nd Class
    Smuggler 1st Class
    Smuggler Savant
    Robber
    Terrorist
    Pirate
    Infamous Pirate
    Notorious Pirate
    Dread Pirate
    Galactic Scourge
    Enemy of the State
    Enemy of the People
    Enemy of Humankind
    Heinous Overlord
    Prime Evil

    Private
    Private 1st Class
    Lance Corporal
    Corporal
    Sergeant
    Staff Sergeant
    Gunnery Sergeant
    1st Sergeant
    Sergeant Major
    Warrant Officer
    Chief Warrant Officer
    Ensign
    Lieutenant J.G.
    Lieutenant
    Lieutenant Commander
    Commander
    Captain
    Commodore
    Rear Admiral
    Vice Admiral
    Admiral
    Fleet Admiral
    */

    _online_split_rank_name: procedure expose (globals)
     line=arg(1)
     if \_undef(_online.!reset) then call _error "rankings list not loaded"
     do j=1 to 23
      k=word(_online.!blue.0,j)
      if left(line,length(_online.!blue.k))=_online.!blue.k then leave
     end /*do*/
     if j<24 then do
      rank=k-1
      name=substr(line,length(_online.!blue.k)+2)
     end /*if*/
     else do
      do j=1 to 22
       k=word(_online.!red.0,j)
       if left(line,length(_online.!red.k))=_online.!red.k then leave
      end /*do*/
      if j<23 then do
       rank=-k
       name=substr(line,length(_online.!red.k)+2)
      end /*if*/
      else do
       k=0
       rank=0
       name=line
      end /*else*/
     end /*else*/
     rslt=rank";"name
    return rslt

    _attack_strip_manufacturer: procedure expose (globals)
     line=arg(1)
     shiplist=arg(2)
     rslt=line
     do i=1 to _dwords(shiplist,";")
      n=reverse(_dword(shiplist,i,";"))
      if pos(n||" ",reverse(line))=1 then do
       rslt=reverse(n)
       leave
      end /*if*/
     end /*do*/
    return rslt

    /* _list_select v.2 */
    _list_select: procedure expose (globals)
     f=arg(1)
     a=arg(2)
     b=arg(3)
     if arg(4,"E") then d=arg(4); else d=";"
     if arg(5,"E") then rslt=arg(5); else rslt=""
     do i=1 to _dwords(a,d)
      if f=_dword(a,i,d) then do; rslt=_dword(b,i,d); leave; end
     end /*do*/
    return rslt

    _online_split_name_corp: procedure expose (globals)
     name=arg(1)
     parse value reverse(name) with temp1 "]" num "[" temp2
     corp=0
     if _stripint(num)=num & temp1="" & strip(temp2)\="" then do
      corp=reverse(num)
      name=reverse(substr(reverse(name),4+length(num)))
     end /*if*/
     rslt=name||";"||num
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenw"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN WRITE"
       call stream arg(1), "C", "SEEK <0"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _ini_list_games v.1 **/
    _ini_list_games: procedure expose (globals)
     lpath=arg(1)
     parse value zoclistfiles(lpath||"*_data.ini", ";") with c list
     if c=0 then rslt=""
     else do
      n=_dword(list,1,";")
      rslt=left(n,lastpos("_data.ini",n)-1)
      do i=2 to c
       n=_dword(list,i,";")
       rslt=rslt||";"||left(n,lastpos("_data.ini",n)-1)
      end /*do*/
     end /*else*/
    return rslt

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1
