/* REXX _port_summary.zrx by the reverend (build 144)                         */
/*-       built by rev-builder version 1.3a on 22 Mar 2014 at 00:15:39       -*/
/*- ------------------------------------------------------------------------ -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author.                -*/
/*-                                                                          -*/
/*- This script is provided to you WITHOUT ANY WARRANTY, even the implied    -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         -*/
/*-                                                                          -*/
/*-                       Copyright (C) 2009 Ron Wilson                      -*/
/*- ------------------------------------------------------------------------ -*/
/*- ------------------*/ _g.!sname="_port_summary.zrx" /*------------------- -*/
/*- --------------*/ _g.!sbuild=144; _g.!sdate="2014-03-22" /*-------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* description:  first used in uso 2001, this script checks your cim data for */
/*               ports that are upgraded for megarob, and creates a report of */
/*               them all in order by when they will be ready to buydown      */
/*               again. you can post this report to a corp memo automatically.*/
/* rev. 0 - initial release                                                   */

globals=_setglobals()
call _timeout 120
call zocsynctime 500
call on halt name _halt

pmpt=_synchronize()
select
 when pmpt="command" then do
  wait1="Command ["
  corpkey="t"
 end /*when*/
 when pmpt="citadel" then do
  wait1="Citadel command"
  corpkey="x"
 end /*when*/
 otherwise call _error "please start at the command prompt or citadel prompt."
end /*select*/

/* load ini variables */
   sl=_ini_load_settings()
   do i=1 to _dwords(sl,";")
    s=_dword(sl,i,";")
    globals=globals||" !"||s
    interpret '!'||s||'="!"||s'
   end; drop sl s
   load="ns gname pname production_rate port_max dname lpath ldefault"
   f=0; l=""
   do i=1 to words(load)
    s=word(load,i)
    x="!"||s
    interpret s||"=_ini.!settings.x"
    interpret 'if '||s||'="##UNDEF##" then do; l=l s; f=1; end'
   end; if f then do; call _error "missing config variable(s):"||l; exit; end; drop load s x f l

max1=3000
max2=(port_max%100)*100

time=_getservertime("minutes")

cutoff.=""
cutoff.1=100
cutoff.2=95
cutoff.3=90
cutoff.4=80
cutoff.5=70
cutoff.6=60
cutoff.7=50
cutoff.8=0

buyequ.=""
sellequ.=""
buyorg.=""
sellorg.=""
buyore.=""
sellore.=""

bbb=""
bbs=""
bsb=""
bss=""
sbb=""
sbs=""
ssb=""
sss=""

if _yesno("refresh cim data?") then call _logcim lpath, gname, "portcim", ldefault
call _ports_load pname

do sector=1 to ns
 if _p.sector\="" then do
  parse var _p.sector type ";" ore "," pore ";" org "," porg ";" equ "," pequ

  ore=abs(ore)
  org=abs(org)
  equ=abs(equ)

  if pore>0 then more=trunc(ore/pore)*100
  else more=trunc(ore/.9)*100
  if porg>0 then morg=trunc(org/porg)*100
  else morg=trunc(org/.9)*100
  if pequ>0 then mequ=trunc(equ/pequ)*100
  else mequ=trunc(equ/.9)*100

  if more>port_max then more=port_max
  if morg>port_max then morg=port_max
  if mequ>port_max then mequ=port_max

  if mequ>=max2 & right(type,1)="B" then do
   i=1
   done=0
   do while \done
    if pequ>=cutoff.i then do
     if i>1 & i<=3 then do
      ready=trunc((1-(equ/mequ))*(100/production_rate)*24*60)+time
      hrs=trunc(ready/60)
      mins=trunc((ready/60-hrs)*60)
      if mins<10 then mins="0"||mins
      if hrs>24 then hrs=hrs-24
      buyequ.i=buyequ.i||sector||"-"||hrs||":"||mins||" "
     end /*if*/
     else buyequ.i=buyequ.i||sector||" "
     done=1
    end /*if*/
    else i=i+1
   end /*do*/
  end /*if*/

  if mequ>=max2 & right(type,1)="S" then do
   i=1
   done=0
   do while \done
    if pequ>=cutoff.i then do
     if i>1 & i<=3 then do
      ready=trunc((1-(equ/mequ))*(100/production_rate)*24*60)+time
      hrs=trunc(ready/60)
      mins=trunc((ready/60-hrs)*60)
      if mins<10 then mins="0"||mins
      if hrs>24 then hrs=hrs-24
      sellequ.i=sellequ.i||sector||"-"||hrs||":"||mins||" "
     end /*if*/
     else sellequ.i=sellequ.i||sector||" "
     done=1
    end /*if*/
    else i=i+1
   end /*do*/
  end /*if*/

  if morg>=max2 & substr(type,2,1)="B" then do
   i=1
   done=0
   do while \done
    if porg>=cutoff.i then do
     if i>1 & i<=3 then do
      ready=trunc((1-(org/morg))*(100/production_rate)*24*60)+time
      hrs=trunc(ready/60)
      mins=trunc((ready/60-hrs)*60)
      if mins<10 then mins="0"||mins
      if hrs>24 then hrs=hrs-24
      buyorg.i=buyorg.i||sector||"-"||hrs||":"||mins||" "
     end /*if*/
     else buyorg.i=buyorg.i||sector||" "
     done=1
    end /*if*/
    else i=i+1
   end /*do*/
  end /*if*/

  if morg>=max2 & substr(type,2,1)="S" then do
   i=1
   done=0
   do while \done
    if porg>=cutoff.i then do
     if i>1 & i<=3 then do
      ready=trunc((1-(org/morg))*(100/production_rate)*24*60)+time
      hrs=trunc(ready/60)
      mins=trunc((ready/60-hrs)*60)
      if mins<10 then mins="0"||mins
      if hrs>24 then hrs=hrs-24
      sellorg.i=sellorg.i||sector||"-"||hrs||":"||mins||" "
     end /*if*/
     else sellorg.i=sellorg.i||sector||" "
     done=1
    end /*if*/
    else i=i+1
   end /*do*/
  end /*if*/

  if more>=max2 & left(type,1)="B" then do
   i=1
   done=0
   do while \done
    if pore>=cutoff.i then do
     if i>1 & i<=3 then do
      ready=trunc((1-(ore/more))*(100/production_rate)*24*60)+time
      hrs=trunc(ready/60)
      mins=trunc((ready/60-hrs)*60)
      if mins<10 then mins="0"||mins
      if hrs>24 then hrs=hrs-24
      buyore.i=buyore.i||sector||"-"||hrs||":"||mins||" "
     end /*if*/
     else buyore.i=buyore.i||sector||" "
     done=1
    end /*if*/
    else i=i+1
   end /*do*/
  end /*if*/

  if more>=max2 & left(type,1)="S" then do
   i=1
   done=0
   do while \done
    if pore>=cutoff.i then do
     if i>1 & i<=3 then do
      ready=trunc((1-(ore/more))*(100/production_rate)*24*60)+time
      hrs=trunc(ready/60)
      mins=trunc((ready/60-hrs)*60)
      if mins<10 then mins="0"||mins
      if hrs>24 then hrs=hrs-24
      sellore.i=sellore.i||sector||"-"||hrs||":"||mins||" "
     end /*if*/
     else sellore.i=sellore.i||sector||" "
     done=1
    end /*if*/
    else i=i+1
   end /*do*/
  end /*if*/

  select
   when type="BBB" then do
    pstr=""
    if more>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if morg>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if mequ>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if more>max1 | morg>max1 | mequ>max1 then bbb=bbb||sector||"-"||pstr||" "
   end /*when*/
   when type="BBS" then do
    pstr=""
    if more>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if morg>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if mequ>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if more>max1 | morg>max1 | mequ>max1 then bbs=bbs||sector||"-"||pstr||" "
   end /*when*/
   when type="BSB" then do
    pstr=""
    if more>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if morg>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if mequ>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if more>max1 | morg>max1 | mequ>max1 then bsb=bsb||sector||"-"||pstr||" "
   end /*when*/
   when type="BSS" then do
    pstr=""
    if more>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if morg>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if mequ>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if more>max1 | morg>max1 | mequ>max1 then bss=bss||sector||"-"||pstr||" "
   end /*when*/
   when type="SBB" then do
    pstr=""
    if more>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if morg>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if mequ>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if more>max1 | morg>max1 | mequ>max1 then sbb=sbb||sector||"-"||pstr||" "
   end /*when*/
   when type="SBS" then do
    pstr=""
    if more>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if morg>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if mequ>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if more>max1 | morg>max1 | mequ>max1 then sbs=sbs||sector||"-"||pstr||" "
   end /*when*/
   when type="SSB" then do
    pstr=""
    if more>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if morg>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if mequ>=max2 then pstr=pstr||"B"
    else pstr=pstr||"b"
    if more>max1 | morg>max1 | mequ>max1 then ssb=ssb||sector||"-"||pstr||" "
   end /*when*/
   when type="SSS" then do
    pstr=""
    if more>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if morg>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if mequ>=max2 then pstr=pstr||"S"
    else pstr=pstr||"s"
    if more>max1 | morg>max1 | mequ>max1 then sss=sss||sector||"-"||pstr||" "
   end /*when*/
   otherwise nop
  end /*select*/

 end /*if*/

end /*do*/

call _fileclose(fname)

call zocwriteln _ansi("bt;fwh")
call _notice 70, "general report:"
call _notice 70, "BBB - "||bbb
call _notice 70, "BBS - "||bbs
call _notice 70, "BSB - "||bsb
call _notice 70, "BSS - "||bss
call _notice 70, "SBB - "||sbb
call _notice 70, "SBS - "||sbs
call _notice 70, "SSB - "||ssb
call _notice 70, "SSS - "||sss
call _notice 70, "."

call _notice 70, "equipment buydown (xxS) report:"
i=1
do while cutoff.i>0
 if sellequ.i\="" then call _notice 70, ">"||cutoff.i||"% - "||sellequ.i
 i=i+1
end /*do*/
j=i-1
if sellequ.i\="" then call _notice 70, "<"||cutoff.j||"% - "||sellequ.i
call _notice 70, "."

call _notice 70, "organics buydown (xSx) report:"
i=1
do while cutoff.i>0
 if sellorg.i\="" then call _notice 70, ">"||cutoff.i||"% - "||sellorg.i
 i=i+1
end /*do*/
j=i-1
if sellorg.i\="" then call _notice 70, "<"||cutoff.j||"% - "||sellorg.i
call _notice 70, "."

call _notice 70, "fuel ore buydown (Sxx) report:"
i=1
do while cutoff.i>0
 if sellore.i\="" then call _notice 70, ">"||cutoff.i||"% - "||sellore.i
 i=i+1
end /*do*/
j=i-1
if sellore.i\="" then call _notice 70, "<"||cutoff.j||"% - "||sellore.i
call _notice 70, "."

call _notice 70, "equipment selloff (xxB) report:"
i=1
do while cutoff.i>0
 if buyequ.i\="" then call _notice 70, ">"||cutoff.i||"% - "||buyequ.i
 i=i+1
end /*do*/
j=i-1
if buyequ.i\="" then call _notice 70, "<"||cutoff.j||"% - "||buyequ.i
call _notice 70, "."

call _notice 70, "organics selloff (xBx) report:"
i=1
do while cutoff.i>0
 if buyorg.i\="" then call _notice 70, ">"||cutoff.i||"% - "||buyorg.i
 i=i+1
end /*do*/
j=i-1
if buyorg.i\="" then call _notice 70, "<"||cutoff.j||"% - "||buyorg.i
call _notice 70, "."

call _notice 70, "fuel ore selloff (Bxx) report:"
i=1
do while cutoff.i>0
 if buyore.i\="" then call _notice 70, ">"||cutoff.i||"% - "||buyore.i
 i=i+1
end /*do*/
j=i-1
if buyore.i\="" then call _notice 70, "<"||cutoff.j||"% - "||buyore.i
call zocwriteln _ansi("fmg")

if _yesno("leave corp memo?") then do
 call zocsend corpkey||"t"
 if zocwait("C:")=640 then call _error "timeout"

 call zocsend " / \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \^M"
 call zocsend " / \/ \/ \/ \/ \/   the re\/erend's port summary   \/ \/ \/ \/ \/ \^M"
 call zocsend " / \/ \/ \/ \/ \/  (times listed are server time)  \/ \/ \/ \/ \/ \^M"
 call zocsend " / \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \^M"
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 call zocsend "general report:^M"
 hdr=" BBB - "
 do while bbb\=""
  if length(bbb)<=59 then k=length(bbb)
  else k=lastpos(" ",bbb,59)
  call zocsend hdr||strip(left(bbb,k))||"^M"
  bbb=strip(substr(bbb,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 hdr=" BBS - "
 do while bbs\=""
  if length(bbs)<=59 then k=length(bbs)
  else k=lastpos(" ",bbs,59)
  call zocsend hdr||strip(left(bbs,k))||"^M"
  bbs=strip(substr(bbs,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 hdr=" BSB - "
 do while bsb\=""
  if length(bsb)<=59 then k=length(bsb)
  else k=lastpos(" ",bsb,59)
  call zocsend hdr||strip(left(bsb,k))||"^M"
  bsb=strip(substr(bsb,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 hdr=" BSS - "
 do while bss\=""
  if length(bss)<=59 then k=length(bss)
  else k=lastpos(" ",bss,59)
  call zocsend hdr||strip(left(bss,k))||"^M"
  bss=strip(substr(bss,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 hdr=" SBB - "
 do while sbb\=""
  if length(sbb)<=59 then k=length(sbb)
  else k=lastpos(" ",sbb,59)
  call zocsend hdr||strip(left(sbb,k))||"^M"
  sbb=strip(substr(sbb,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 hdr=" SBS - "
 do while sbs\=""
  if length(sbs)<=59 then k=length(sbs)
  else k=lastpos(" ",sbs,59)
  call zocsend hdr||strip(left(sbs,k))||"^M"
  sbs=strip(substr(sbs,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 hdr=" SSB - "
 do while ssb\=""
  if length(ssb)<=59 then k=length(ssb)
  else k=lastpos(" ",ssb,59)
  call zocsend hdr||strip(left(ssb,k))||"^M"
  ssb=strip(substr(ssb,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 hdr=" SSS - "
 do while sss\=""
  if length(sss)<=59 then k=length(sss)
  else k=lastpos(" ",sss,59)
  call zocsend hdr||strip(left(sss,k))||"^M"
  sss=strip(substr(sss,k+1))
  hdr="       "
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 call zocsend "equipment buydown (xxS) report:^M"
 i=1
 do while cutoff.i>=0
  if sellequ.i\="" then do
   if length(sellequ.i)<=59 then k=length(sellequ.i)
   else k=lastpos(" ",sellequ.i,59)
   i1=i-1
   if cutoff.i=0 then call zocsend " <"||cutoff.i1||"%"||copies(" ",4-length(cutoff.i1))||"- "||strip(left(sellequ.i,k))||"^M"
   else call zocsend " >"||cutoff.i||"%"||copies(" ",4-length(cutoff.i))||"- "||strip(left(sellequ.i,k))||"^M"
   sellequ.i=strip(substr(sellequ.i,k+1))
   do while sellequ.i\=""
    if length(sellequ.i)<=59 then k=length(sellequ.i)
    else k=lastpos(" ",sellequ.i,59)
    call zocsend "         "||strip(left(sellequ.i,k))||"^M"
    sellequ.i=strip(substr(sellequ.i,k+1))
   end /*do*/
  end /*if*/
  i=i+1
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 call zocsend "organics buydown (xSx) report:^M"
 i=1
 do while cutoff.i>=0
  if sellorg.i\="" then do
   if length(sellorg.i)<=59 then k=length(sellorg.i)
   else k=lastpos(" ",sellorg.i,59)
   i1=i-1
   if cutoff.i=0 then call zocsend " <"||cutoff.i1||"%"||copies(" ",4-length(cutoff.i1))||"- "||strip(left(sellorg.i,k))||"^M"
   else call zocsend " >"||cutoff.i||"%"||copies(" ",4-length(cutoff.i))||"- "||strip(left(sellorg.i,k))||"^M"
   sellorg.i=strip(substr(sellorg.i,k+1))
   do while sellorg.i\=""
    if length(sellorg.i)<=59 then k=length(sellorg.i)
    else k=lastpos(" ",sellorg.i,59)
    call zocsend "         "||strip(left(sellorg.i,k))||"^M"
    sellorg.i=strip(substr(sellorg.i,k+1))
   end /*do*/
  end /*if*/
  i=i+1
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 call zocsend "fuel ore buydown (Sxx) report:^M"
 i=1
 do while cutoff.i>=0
  if sellore.i\="" then do
   if length(sellore.i)<=59 then k=length(sellore.i)
   else k=lastpos(" ",sellore.i,59)
   i1=i-1
   if cutoff.i=0 then call zocsend " <"||cutoff.i1||"%"||copies(" ",4-length(cutoff.i1))||"- "||strip(left(sellore.i,k))||"^M"
   else call zocsend " >"||cutoff.i||"%"||copies(" ",4-length(cutoff.i))||"- "||strip(left(sellore.i,k))||"^M"
   sellore.i=strip(substr(sellore.i,k+1))
   do while sellore.i\=""
    if length(sellore.i)<=59 then k=length(sellore.i)
    else k=lastpos(" ",sellore.i,59)
    call zocsend "         "||strip(left(sellore.i,k))||"^M"
    sellore.i=strip(substr(sellore.i,k+1))
   end /*do*/
  end /*if*/
  i=i+1
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 call zocsend "equipment selloff (xxB) report:^M"
 i=1
 do while cutoff.i>=0
  if buyequ.i\="" then do
   if length(buyequ.i)<=59 then k=length(buyequ.i)
   else k=lastpos(" ",buyequ.i,59)
   i1=i-1
   if cutoff.i=0 then call zocsend " <"||cutoff.i1||"%"||copies(" ",4-length(cutoff.i1))||"- "||strip(left(buyequ.i,k))||"^M"
   else call zocsend " >"||cutoff.i||"%"||copies(" ",4-length(cutoff.i))||"- "||strip(left(buyequ.i,k))||"^M"
   buyequ.i=strip(substr(buyequ.i,k+1))
   do while buyequ.i\=""
    if length(buyequ.i)<=59 then k=length(buyequ.i)
    else k=lastpos(" ",buyequ.i,59)
    call zocsend "         "||strip(left(buyequ.i,k))||"^M"
    buyequ.i=strip(substr(buyequ.i,k+1))
   end /*do*/
  end /*if*/
  i=i+1
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 call zocsend "organics selloff (xBx) report:^M"
 i=1
 do while cutoff.i>=0
  if buyorg.i\="" then do
   if length(buyorg.i)<=59 then k=length(buyorg.i)
   else k=lastpos(" ",buyorg.i,59)
   i1=i-1
   if cutoff.i=0 then call zocsend " <"||cutoff.i1||"%"||copies(" ",4-length(cutoff.i1))||"- "||strip(left(buyorg.i,k))||"^M"
   else call zocsend " >"||cutoff.i||"%"||copies(" ",4-length(cutoff.i))||"- "||strip(left(buyorg.i,k))||"^M"
   buyorg.i=strip(substr(buyorg.i,k+1))
   do while buyorg.i\=""
    if length(buyorg.i)<=59 then k=length(buyorg.i)
    else k=lastpos(" ",buyorg.i,59)
    call zocsend "         "||strip(left(buyorg.i,k))||"^M"
    buyorg.i=strip(substr(buyorg.i,k+1))
   end /*do*/
  end /*if*/
  i=i+1
 end /*do*/
 call zocsend "."
 if zocwait(".")=640 then call _error "timeout"
 call zocsend "^(08)"

 call zocsend "fuel ore selloff (Bxx) report:^M"
 i=1
 do while cutoff.i>=0
  if buyore.i\="" then do
   if length(buyore.i)<=59 then k=length(buyore.i)
   else k=lastpos(" ",buyore.i,59)
   i1=i-1
   if cutoff.i=0 then call zocsend " <"||cutoff.i1||"%"||copies(" ",4-length(cutoff.i1))||"- "||strip(left(buyore.i,k))||"^M"
   else call zocsend " >"||cutoff.i||"%"||copies(" ",4-length(cutoff.i))||"- "||strip(left(buyore.i,k))||"^M"
   buyore.i=strip(substr(buyore.i,k+1))
   do while buyorg.i\=""
    if length(buyore.i)<=59 then k=length(buyore.i)
    else k=lastpos(" ",buyore.i,59)
    call zocsend "         "||strip(left(buyore.i,k))||"^M"
    buyore.i=strip(substr(buyore.i,k+1))
   end /*do*/
  end /*if*/
  i=i+1
 end /*do*/

 call zocsend " / \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \^M"
 call zocsend " / \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \^M"

 call zocsend "^Mq"
 if zocwait(wait1)=640 then call _error "timeout"

end /*if*/
else nop

call _quit
exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.5 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. _debug (globals)

     _debug=0
     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118 + 1 /* +1 added 6/23/2008 */
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365
     _baseday.2009=_baseday.2008+365+1
     _baseday.2010=_baseday.2009+365
     _baseday.2011=_baseday.2010+365
     _baseday.2012=_baseday.2011+365
     _baseday.2013=_baseday.2012+365+1
     _baseday.2014=_baseday.2013+365
     _baseday.2015=_baseday.2014+365
     _baseday.2016=_baseday.2015+365
     _baseday.2017=_baseday.2016+365+1
     _baseday.2018=_baseday.2013+365
     _baseday.2019=_baseday.2014+365
     _baseday.2020=_baseday.2015+365
     _baseday.2021=_baseday.2016+365+1
     _baseday.2022=_baseday.2013+365
     _baseday.2023=_baseday.2014+365
     _baseday.2024=_baseday.2015+365
     _baseday.2025=_baseday.2016+365+1
     _baseday.2026=_baseday.2013+365
     _baseday.2027=_baseday.2014+365
     _baseday.2028=_baseday.2015+365
     _baseday.2029=_baseday.2016+365+1
     _baseday.2030=_baseday.2013+365
     _baseday.2031=_baseday.2014+365
     _baseday.2032=_baseday.2015+365
     _baseday.2033=_baseday.2016+365+1

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _efc. _es. _et. _ep. _fc. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _bd. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _vs. _vn. _vi. _mcic. _fh. _fhp. "
     rslt=rslt||"_clv. _online. _msg _msg. _debug "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.4 **/
    _halt: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _synchronize v.5 **/
    _synchronize: procedure expose (globals)

     if arg(1,"E") then checkcitprompts=arg(1); else checkcitprompts=1

     synchw=_synchronize_vars("w")
     synchr=_synchronize_vars("r")

     call zocsend "&&"
     ans=_waitmux("&&|Pausing is")
     select
      when ans=0 then return "unknown_text_entry"
      when ans=1 then nop
      when ans=640 then return "timeout"
      otherwise nop
     end /*select*/

     ans=_waitmux(synchw)
     select
      when ans=640 then rslt="timeout"
      when ans>0 then do
       if _wait("Pausing is")=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=_dword(synchr,ans+1,";")

     select
      when \checkcitprompts then nop
      when rslt="computer" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _error v.9 **/
    _error: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwrite _ansi("clearline;bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: revhelper_at_thereverend_dot_org > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call _beep "error.wav"
    exit

/** _ini_load_settings v.1 **/
    _ini_load_settings: procedure expose (globals)

     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     if left(zocgetinfo("VERSION"),1)>4 then ldefault = zocfilename("RESOLV", ldefault)
     parse value zocgetglobaloption("WindowTitle") with . '="' gname '"'

     lpath=_get_log_path()
     spath=_get_script_path()
     dpath=_get_download_path()

     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then gname=_setgame()
     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then exit
     dname=dosfname(lpath||gname||"_data.ini")

     _ini.="##UNDEF##"

     sectionlist=""
     if _fileopenr(dname) then do
      insection=0
      do while \_fileeof(dname)
       line=strip(linein(dname))
       if _ini_is_section(line) then do
        insection=1
        parse var line "[" section "]"
        section=strip(section)
        if sectionlist="" then sectionlist=section; else sectionlist=sectionlist||";"||section
       end /*if*/
       else do
        if insection then do
         parse var line k "=" v
         v=_ini_format_value(v)
         k="!"||section||".!"||strip(k)
         if k\="!"||section||".!" then _ini.k=strip(v)
        end /*if*/
       end /*else*/
      end /*while*/
      call _fileclose dname
     end /*if*/

     call _iniv "!settings", "!ldefault", ldefault
     call _iniv "!settings", "!lpath",  lpath
     call _iniv "!settings", "!spath",  spath
     call _iniv "!settings", "!dpath",  dpath
     call _iniv "!settings", "!dname",  dname
     call _iniv "!settings", "!gname",  gname
     call _iniv "!settings", "!lname",  lpath||gname||"_log.txt"
     call _iniv "!settings", "!fname",  lpath||gname||"_figs.txt"
     call _iniv "!settings", "!vname",  lpath||gname||"_voids.txt"
     call _iniv "!settings", "!vwname", lpath||gname||"_view.txt"
     call _iniv "!settings", "!pname",  lpath||gname||".prt"
     call _iniv "!settings", "!sname",  lpath||gname||".sct"
     call _iniv "!settings", "!rpname", lpath||gname||"_ref.prt"
     call _iniv "!settings", "!rsname", lpath||gname||"_ref.sct"
     call _iniv "!settings", "!mname",  lpath||gname||".map"
     call _iniv "!settings", "!zname",  lpath||gname||".ztm"
     call _iniv "!settings", "!nfname", lpath||gname||"_nearfig.txt"

    return sectionlist

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _getservertime v.7 **/
    _getservertime: procedure expose (globals)

     /* get real date/time values */
        parse value date("N") with . . year
        parse value date("O") with . "/" month "/" day
        sod=time("S")
        parse value time("N") with hr ":" mn ":" sc
        doy=date("D")
        base=date("B")
        leapyear=abs((year//4=0)-1)
        base=base-_baseday.2000
        base_sec=base*86400+sod

     /* get game date/time values */
        if _g.!timediff="_G.!TIMEDIFF" then do
         if _sendwait("ct","(?=Help)? T")=640 then call _error "timeout"
         if _waitmux(", "||year+27||"|, "||year+28||"|, "||year+29)=640 then call _error "timeout"
         parse value _lastline() with g_hr ":" g_min ":" g_sec g_ampm . g_month g_day ", " g_year .
         call zocsend "q"
         if _waitmux("(?=Help)? :|(?=help)")=640 then call _error "timeout"
         g_year=g_year-12
         if g_ampm="PM" & g_hr\=12 then g_hr=g_hr+12
         g_month=lower(g_month)
         do i=12 to 1 by -1
          if g_month=_dword(_monthnames,i,";") then leave
         end /*do*/
         g_month=i
         parse value _calc_base_date(g_year, g_month, g_day, g_hr, g_min, g_sec) with g_base ";" g_doy ";" g_sod ";" g_base_sec
         _g.!timediff=base_sec-g_base_sec
        end /*if*/
        else do
         g_base_sec=base_sec-_g.!timediff
         g_sod=g_base_sec//86400
         g_base=g_base_sec%86400
         do i=2000 to 2008
          if (_baseday.i-_baseday.2000)<=g_base then g_year=i
         end /*do*/
         g_doy=g_base-_baseday.g_year+_baseday.2000
        end /*else*/

     select
      when arg(1)="seconds"   then rslt=g_sod
      when arg(1)="minutes"   then rslt=g_sod%60
      when arg(1)="hours"     then rslt=g_sod%3600
      when arg(1)="stamp_old" then rslt=g_year-2000||copies("0",3-length(g_doy))||g_doy||copies("0",5-length(g_sod))||g_sod
      when arg(1)="stamp"     then rslt=g_base_sec
      otherwise                    rslt=g_base_sec
     end /*select*/
    return rslt

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user.", "nocopy"
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user.", "nocopy"
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _logcim v.4 **/
    _logcim: procedure expose (globals)

     path=arg(1)
     fname=arg(2)
     tasks=arg(3)
     default=arg(4)

     if zocgetinfo("VERSION")>=4.03 then call zoclogging 0, 1
     else call zoclogging 0
     call zocsend "^^?"
     if zocwait("Interrogation Modes")=640 then call _error "timeout"
     if zocwait(":")=640 then call _error "timeout"
     call zocwriteln
     call zocrespond "[Pause]", " "
     t=_timeout(60)

     do while tasks\=""

      parse var tasks task ";" tasks
      select
       when task="portcim" then ext=".prt"
       when task="sectorcim" then ext=".sct"
       otherwise task=""
      end /*select*/

      if task\="" then do
       if _fileexists(path||fname||ext) then call dosdel path||fname||ext
       call zoclogname fname||ext
       call zoclogging 1, 1
       call _timeout 3000
       select
        when task="portcim" then call zocsend "r"
        when task="sectorcim" then call zocsend "i"
        otherwise nop
       end /*select*/
       if zocwait(":")=640 then call _error "timeout"
       call zoclogging 0, 1
      end /*if*/

     end /*do*/

     call _timeout t
     call zocsend "q"
     if zocwait("ENDINTERROG")=640 then call _error "timeout"
     call zocrespond "[Pause]"
     call zoclogname default
     if zocgetinfo("VERSION")>=4.03 then call zoclogging 1, 1
     else call zoclogging 1

    return

/** _ports_load v.1 **/
    _ports_load: procedure expose (globals)
     infile=arg(1)
     _p.=""; c=0
     if _fileopenr(infile) then do
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"loading ports from" infile "... "
      do while \_fileeof(infile)
       line=strip(linein(infile))
       parse var line row line
       if line\="" & row\="" then do
        c=c+1
        line=_space(translate(line," ","%"))
        line=zocstring("REPLACE",line,"- ","-")
        line=word(line,1)||","||word(line,2)||";"||word(line,3)||","||word(line,4)||";"||word(line,5)||","||word(line,6)
        if _dword(_dword(line,1,";"),1,",")<0 then _p.row="B"
        else _p.row="S"
        if _dword(_dword(line,2,";"),1,",")<0 then _p.row=_p.row||"B"
        else _p.row=_p.row||"S"
        if _dword(_dword(line,3,";"),1,",")<0 then _p.row=_p.row||"B"
        else _p.row=_p.row||"S"
        _p.row=_p.row||";"||line
       end /*if*/
      end /*do*/
      call _fileclose infile
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" ports loaded. "
     end /*if*/
    return c

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _notice v.3 **/
    _notice: procedure expose (globals)
     width=arg(1)
     if width>75 then width=75
     line=arg(2)

     i=3
     do while arg(i)\=""
      nw1=length(arg(i))
      if nw1+width>250 then width=250-nw1
      i=i+1
     end /*do*/
     if width<20 then call _error "notice error"

     i=3
     do while length(line)>0
      if length(line)<=width & arg(i)\="" then do
       line=line||arg(i)
       i=i+1
      end /*if*/
      if length(line)<=width then do
       call zocwriteln "<< "||_pad(line,width,"L")||">>"
       line=""
      end /*if*/
      else do
       np=width
       do while substr(line,np,1)\=" "
        np=np-1
       end /*do*/
       call zocwriteln "<< "||_pad(left(line,np),width,"L")||">>"
       line=substr(line,np+1)
      end /*else*/
     end /*do*/
    return

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _debug v.5 **/
    _debug: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _debug"
     mode=strip(left(lower(arg(1)),3))
     msg=arg(2)
     if arg(3,"E") then logname=strip(arg(3))
     else logname="_debug.txt"
     select
      when mode="scr" then call zocwriteln "^[[1;34mREV-DEBUG <"||msg||">^[[0m"
      when mode="fed" then call zocsend "`REV-DEBUG <"||msg||">^M"
      when mode="sub" then call zocsend "'REV-DEBUG <"||msg||">^M"
      when mode="log" then do
       if _fileopenw(logname) then do
        call lineout logname, msg
        call _fileclose logname
       end /*if*/
       else call _error "unable to open rev-log.txt."
      end /*when*/
      otherwise nop
     end /*select*/
    return

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _cleanup v.1 **/
    _cleanup: procedure expose (globals)
     /* put code here to do custom cleanup
        for specific scripts and override
        it in your main program */
    return 1

/** _synchronize_vars v.1 **/
    _synchronize_vars: procedure expose (globals)
     select
      when arg(1)="w" then rslt="Pausing",
                              ||"|Command [",
                              ||"|Citadel command",
                              ||"|Planet command",
                              ||"|<StarDock>",
                              ||"|ship to sell",
                              ||"|Still interested ?",
                              ||"|wish to buy? (A,B,C,Q,?)",
                              ||"|<Galactic Bank>",
                              ||"|<Hardware Emporium>",
                              ||"|<Shipyards>",
                              ||"|<Tavern>",
                              ||"|Enter your choice [T] ?",
                              ||"|do you want to sell [",
                              ||"|do you want to buy [",
                              ||"|Computer command",
                              ||"|Corporate command",
                              ||"|Colonists? [T]",
                              ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]",
                              ||"|`",
                              ||"|F: ",
                              ||"|'",
                              ||"|S: ",
                              ||"|M: ",
                              ||"|P: "
      when arg(1)="r" then rslt="unknown;command;citadel;planet;stardock;ship_sell;ship_sell_interested;class_0",
                             ||";bank;hardware;shipyards;tavern;port_menu;port_haggle;port_haggle;computer",
                             ||";corporate;terra;stop_in_this_sector?;fedcom_text_entry_1;fedcom_text_entry_2",
                             ||";subspace_text_entry_1;subspace_text_entry_2;mail_text_entry;private_text_entry",
                             ||";corporate_cit;computer_cit;unknown_text_entry" /* <-- these unmatched in the wait string above */
      when arg(1)="command" then rslt=" ; ;qq;q;q;qqq;nqq;q;qq;qq;qq;qq;q;0^Mz0^Mz0^M;0^Mz0^Mz0^M;q;q;q;y;^H;^M;^H;^M;^M;^M;qqq;qqq; "
      when arg(1)="computer" then rslt=" ;c;c;qc;qc;qqqc;nqqc;qc;qqc;qqc;qqc;qqc;qc;0^Mz0^Mz0^Mc;0^Mz0^Mz0^Mc; ;qc;qc;yc;^Hc;^Mc;^Hc;^Mc;^Mc;^Mc;qc;qc; "
      otherwise call _error "unknown argument in _synchronize_vars"
     end /*select*/
    return rslt

/** _waitmux v.1 **/
    _waitmux: procedure expose (globals)
     rslt=zocwaitmux(arg(1))
    return rslt

/** _wait v.1 **/
    _wait: procedure expose (globals)
     rslt=zocwait(arg(1))
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _get_log_path v.2 **/
    _get_log_path: procedure expose (globals)
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_path"
    return lpath

/** _get_script_path v.1 **/
    _get_script_path: procedure expose (globals)
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     if left(zocgetinfo("VERSION"),1)>4 then spath = zocfilename("RESOLV", spath)
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _get_download_path v.2 **/
    _get_download_path: procedure expose (globals)
     parse value zocgetglobaloption("DownloadAltPath") with . '="' dpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then dpath = zocfilename("RESOLV", dpath)
     dpath=dosfname(dpath)
     if right(dpath,1)\="\" then dpath=dpath||"\"
     if \dosisdir(dpath) then call _error "invalid path in _get_download_path"
    return dpath

/** _setgame v.6 **/
    _setgame: procedure expose (globals)

     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid log path in _setgame"

     if arg(1,"E") then gname=arg(1)
     else do
      list=_ini_list_games(lpath)
      if c=0 then gname="CLEAR"
      else gname=_drequestlist("select a game:", list||";CLEAR", ";", "c")
     end /*if*/
     if gname="CLEAR" | gname="" then do
      gname="%ZOCORHOST% %OPTIONS%"
      call zoclogging 0, 1
      call zoclogname "zoc_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="zoc_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end/*if*/
     else do
      call zoclogging 0, 1
      call zoclogname gname||"_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="'||gname||'_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end /*else*/
     call zocsetglobaloption 'WindowTitle="'||gname||'"'
    return gname

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

    _ini_is_section: procedure expose (globals)
     s=strip(arg(1))
     if left(s,1)="[" & left(reverse(s),1)="]" then return 1
    return 0

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

    _iniv: procedure expose (globals)
     s=arg(1); v=arg(2)
     if arg(3,"E") then _ini.s.v=arg(3)
    return _ini.s.v

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=_wait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _calc_base_date v.3 **/
    /* v.3 tested */
    _calc_base_date: procedure expose (globals)

     yr=arg(1); mm=arg(2); dd=arg(3); hr=arg(4); mn=arg(5); sc=arg(6)

     /* leapyear? */
        leapyear=abs((yr//4=0)-1)

     /* day of year */
        doy=dd
        do i=1 to mm-1
         doy=doy+_dword(_monthdays,i,";")
        end /*do*/
        if mm>2 & leapyear then doy=doy+1

     /* base day since 2000 */
        base=_baseday.yr-_baseday.2000+doy

     /* seconds of day */
        sod=((hr*60)+mn)*60+sc

     /* base day in seconds */
        base_sec=base*86400+sod

     rslt=base||";"||doy||";"||sod||";"||base_sec

    return rslt

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _pad v.3 **/
    _pad: procedure expose (globals)
     rslt=arg(1)
     if arg(2,"E") then w=arg(2); else return rslt
     if \arg(3,"E") then m="l"; else m=lower(arg(3))
     if \arg(4,"E") then p=" "; else p=left(arg(4),1)
     select
      when m="l" then rslt=left(rslt,w,p)
      when m="r" then rslt=reverse(left(reverse(rslt),w,p))
      when m="c" then rslt=center(rslt,w,p)
      otherwise       rslt=left(rslt,w,p)
     end /*select*/
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenw"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN WRITE"
       call stream arg(1), "C", "SEEK <0"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _ini_list_games v.1 **/
    _ini_list_games: procedure expose (globals)
     lpath=arg(1)
     parse value zoclistfiles(lpath||"*_data.ini", ";") with c list
     if c=0 then rslt=""
     else do
      n=_dword(list,1,";")
      rslt=left(n,lastpos("_data.ini",n)-1)
      do i=2 to c
       n=_dword(list,i,";")
       rslt=rslt||";"||left(n,lastpos("_data.ini",n)-1)
      end /*do*/
     end /*else*/
    return rslt

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt
