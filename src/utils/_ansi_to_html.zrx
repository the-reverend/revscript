/* REXX _ansi_to_html.zrx by the reverend (build 134)                         */
/*-       built by rev-builder version 1.3a on 22 Mar 2014 at 00:15:39       -*/
/*- ------------------------------------------------------------------------ -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author.                -*/
/*-                                                                          -*/
/*- This script is provided to you WITHOUT ANY WARRANTY, even the implied    -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         -*/
/*-                                                                          -*/
/*-                       Copyright (C) 2009 Ron Wilson                      -*/
/*- ------------------------------------------------------------------------ -*/
/*- ------------------*/ _g.!sname="_ansi_to_html.zrx" /*------------------- -*/
/*- --------------*/ _g.!sbuild=134; _g.!sdate="2014-03-22" /*-------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* description:  this script converts ansi text to html.                      */
/* rev. 0 - initial release                                                   */
/* rev. 1 - code cleanup and translation enhancements                         */
/* rev. 2 - ansi converter upgrade                                            */

globals=""

parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
if arg(1)="" then infile=zocgetfilename("choose a file", spath||"\*.*")
else infile=arg(1)
if infile="##CANCEL##" then exit
outfile=infile||".html"

call _ansi_to_html infile, outfile

exit

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _ansi_to_html v.4 **/
    _ansi_to_html: procedure expose (globals)
     do i=1 to 2
      if arg(i,"O") | \arg(i,"E") then call _error "missing parameter in _ansi_to_html"
     end /*do*/
     infile=arg(1)
     outfile=arg(2)
     if arg(3,"E") then title=arg(3)
     else title="REV-SCRIPT"
     success=0

     /* define constants */
     esc=d2c(27)
     cr=d2c(13)
     lf=d2c(10)
     fface='Terminal'
     fsize=2

     /* define colors */
     color.=""
     color.30='#000000' /* black   */
     color.31='#6A0000' /* red     */
     color.32='#006A00' /* green   */
     color.33='#6A6A00' /* yellow  */
     color.34='#00006A' /* blue    */
     color.35='#800080' /* magenta */
     color.36='#006A6A' /* cyan    */
     color.37='#A0A0A0' /* white   */
     color.130='#A0A0A0'
     color.131='#D40000'
     color.132='#00FF00'
     color.133='#D4D400'
     color.134='#0000D4'
     color.135='#D400D4'
     color.136='#00D4D4'
     color.137='#FFFFFF'
     do i=30 to 37
      temp=i+10
      color.temp=color.i
      temp=i+110
      color.temp=color.i
     end /*do*/

     /* initialize colors */
     reset=1
     bright=0    /* 1 */
     underline=0 /* 4 */
     blink=0     /* 5 */
     reverse=0   /* 7 */
     hidden=0    /* 8 */
     bg=30
     fg=37

     /* initialize counters */
     incode=0
     count=0
     ignore=0
     lastspace=1
     html=""

     if _fileopenr(infile) then do
      if _filenew(outfile,"delete") then do
       call _newline
       call zocwrite _ansi("bt;fwh;bbk")||'writing file: "'||outfile||'" '
       mon=_spinner(0,25)
       call lineout outfile, '<html><title>'||title||'</title>'
       call lineout outfile, '<body bgcolor="'||color.bg||'" text="#808080" link="#FF0000" vlink="#800000" alink="#FF0000">'
       call lineout outfile, '<font size='||fsize||' face="'||fface||'">'
       call charout outfile, '<span style="background-color:'||color.bg||';color:'||color.fg||'">'
       do while \_fileeof(infile)
        ch=charin(infile)
        select

         when ch=esc then do
          mon=_spinner(mon,25)
          incode=1
          count=count+1
          codes=""
         end /*when*/

         when incode & \_in("0123456789;[",ch) then do
          incode=0
          select
           when ch="H" then do              /* esc[<row>;<col>H positions cursor at row, col  */
            call charout outfile, "<!-- ansi code ignored: reposition cursor at row "||_dword(codes,1,";")||", col "||_dword(codes,2,";")||". -->"
            ignore=ignore+1
           end /*when*/
           when ch="f" then do              /* esc[<row>;<col>f positions cursor at row, col  */
            call charout outfile, "<!-- ansi code ignored: reposition cursor at row "||_dword(codes,1,";")||", col "||_dword(codes,2,";")||". -->"
            ignore=ignore+1
           end /*when*/
           when ch="A" then do              /* esc[<n>A - moves cursor up n lines             */
            call charout outfile, "<!-- ansi code ignored: move cursor up "||_dword(codes,1,";")||" line(s) -->"
            ignore=ignore+1
           end /*when*/
           when ch="B" then do              /* esc[<n>B - moves cursor down n line(s)         */
            do i=1 to _dword(codes,1,";")
             call charout outfile, "<br>"
            end /*do*/
           end /*when*/
           when ch="C" then do              /* esc[<n>C - moves cursor right n column(s)      */
            do i=1 to _dword(codes,1,";")
             call charout outfile, "&nbsp;"
            end /*do*/
           end /*when*/
           when ch="D" then do              /* esc[<n>D - moves cursor left n column(s)       */
            call charout outfile, "<!-- ansi code ignored: move cursor left "||_dword(codes,1,";")||" column(s) -->"
            ignore=ignore+1
           end /*when*/
           when ch="s" then do              /* esc[s - saves current position                 */
            call charout outfile, "<!-- ansi code ignored: save current cursor position -->"
            ignore=ignore+1
           end /*when*/
           when ch="u" then do              /* esc[u - restores saved position                */
            call charout outfile, "<!-- ansi code ignored: restore saved cursor position -->"
            ignore=ignore+1
           end /*when*/
           when ch="J" then do              /* esc[<n>J - clears the screen for any integer n */
            call charout outfile, "<br><!-- ansi code ignored: clear screen -->"
            ignore=ignore+1
           end /*when*/
           when ch="K" then do              /* esc[K - clears from cursor to eoln             */
            call charout outfile, "<!-- ansi code ignored: clear to end-of-line -->"
            ignore=ignore+1
           end /*when*/
           when ch="h" then do              /* esc[<num>h - changes display mode              */
            call charout outfile, "<!-- ansi code ignored: display mode -->"
            ignore=ignore+1
           end /*when*/
           when ch="l" then do              /* esc[<num>l - changes display mode              */
            call charout outfile, "<!-- ansi code ignored: display mode -->"
            ignore=ignore+1
           end /*when*/
           when ch="m" then do              /* esc[<num>m - changes text and background color */
            do i=1 to _dwords(codes,";")
             c=_dword(codes,i,";")
             select
              when c=0 then do
               reset=1
               bright=0    /* 1 */
               underline=0 /* 4 */
               blink=0     /* 5 */
               reverse=0   /* 7 */
               hidden=0    /* 8 */
               bg=40
               fg=37
              end /*when*/
              when c=1 then bright=1
              when c=4 then underline=1
              when c=5 then blink=1
              when c=7 then reverse=1
              when c=8 then hidden=1
              when c>=30 & c<=37 then do
               fg=c
               reset=0
              end /*when*/
              when c>=40 & c<=47 then bg=c
              otherwise nop
             end /*select*/
            end /*do*/
            if bright & \reset then fg=(fg//100)+100
            if hidden then visibility="hidden"
            else visibility="visible"
            select
             when blink then textdec="blink"
             when underline then textdec="underline"
             otherwise textdec="none"
            end /*select*/
            bg1=bg
            fg1=fg
            if reverse then do
             bg1=(87-(bg//100))+100
             fg1=(67-(fg//100))+100
            end /*if*/
            html='</span><span style="background-color:'||color.bg1||';color:'||color.fg1||';text-decoration:'||textdec||';visibility:'||visibility||'">'
           end /*if*/
           otherwise do
            call charout outfile, "<!-- ansi code ignored: unknown -->"
            ignore=ignore+1
           end /*otherwise*/
          end /*select*/
         end /*when*/

         when incode & ch\="[" then codes=codes||ch

         when \incode then do
          ch=translate(ch,"¶¶¶¶¶¶¶++¶¶++++++--+-+¶¶++--¶-+----++++++++¶_¶¶Ø", ,
                          "∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ")

          if html\="" & ch\=lf then call charout outfile, html
          html=""

          select
           when ch=lf then nop
           when ch=cr then do
            call lineout outfile, "<br>"
            lastspace=1
           end /*when*/
           when ch="<" then call charout outfile, "&lt;"
           when ch=">" then call charout outfile, "&gt;"
           when ch="&" then call charout outfile, "&amp;"
           when ch='"' then call charout outfile, "&quot;"
           when ch=" " & lastspace then call charout outfile, "&nbsp;"
           when ch=" " then do
            call charout outfile, " "
            lastspace=1
           end /*when*/
           otherwise call charout outfile, ch
          end /*select*/
          if ch\=" " & ch\=cr & ch\=lf then lastspace=0
         end /*when*/

         otherwise nop

        end /*select*/
       end /*do*/
       call lineout outfile, "</span></font><br><br>"
       call lineout outfile, '<div align="center"><font size='||fsize||' face="'||fface||'">Copyright (C) 2001 Ron Wilson</font></div>'
       call lineout outfile, '<div align="center"><a href="http://thereverend.coastgames.com/tradewars/rev-license.html"><font size='||fsize||' face="'||fface||'">REV-LICENSE</font></a></div>'
       call charout outfile, "</body></html>"
       call _fileclose outfile
       call zocwriteln d2c(27)||"[1D."
       call zocwriteln " "||count||" ansi codes converted."
       call zocwriteln " "||ignore||" ansi codes discarded."
       success=1
      end /*if*/
      else call zocwriteln 'unable to create file: "'||outfile||'"'
      call _fileclose infile
     end /*if*/
     else call zocwriteln 'unable to open file: "'||infile||'"'

    return success

/** _error v.9 **/
    _error: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwrite _ansi("clearline;bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: revhelper_at_thereverend_dot_org > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call _beep "error.wav"
    exit

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _newline v.3 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     if arg(1,"E") then call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _spinner v.3 **/
    _spinner: procedure expose (globals)
     if arg(1,"E") then count=arg(1)
                   else call _error "missing parameter in _spinner"
     if arg(2,"E") then width=arg(2)
                   else width=100
     if arg(3,"E") & length(arg(3))=5 then chs=arg(3)
                                      else chs="-\|/."
    /* bs="^H" */
     bs=d2c(27)||"[1D"
     select
      when count=-1        then call zocwrite bs||substr(chs,5,1)
      when count<0         then count=-1
      when count=0         then call zocwrite left(chs,1)
      when count=width     then call zocwrite bs||substr(chs,2,1)
      when count=(width*2) then call zocwrite bs||substr(chs,3,1)
      when count=(width*3) then call zocwrite bs||substr(chs,4,1)
      when count=(width*4) then do
       call zocwrite bs||left(chs,1)
       count=0
      end /*when*/
      otherwise nop
     end /*select*/
     count=count+1
    return count

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

/** _in v.3 **/
    _in: procedure expose (globals)
     if arg(1,"E") & arg(2,"E") & length(arg(1))>0 & verify(arg(2),arg(1),"N")=0 then rslt=1
     else rslt=0
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _cleanup v.1 **/
    _cleanup: procedure expose (globals)
     /* put code here to do custom cleanup
        for specific scripts and override
        it in your main program */
    return 1

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt
