/* REXX _dupe_cop.zrx by the reverend (build 92)                              */
/*-       built by rev-builder version 1.3a on 22 Mar 2014 at 00:15:40       -*/
/*- ------------------------------------------------------------------------ -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author.                -*/
/*-                                                                          -*/
/*- This script is provided to you WITHOUT ANY WARRANTY, even the implied    -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         -*/
/*-                                                                          -*/
/*-                       Copyright (C) 2009 Ron Wilson                      -*/
/*- ------------------------------------------------------------------------ -*/
/*- --------------------*/ _g.!sname="_dupe_cop.zrx" /*--------------------- -*/
/*- --------------*/ _g.!sbuild=92; _g.!sdate="2014-03-22" /*--------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

globals=_setglobals()
call _timeout 10
call zocsynctime 500
call on halt name _halt
call _rseed

/* SET DEFAULT VALUES */
   spath=_get_script_path()
   if arg(1,"E") then iname=spath||strip(arg(1))||".ini"
                 else iname=spath||"_dupe_cop.ini"
   if arg(1,"E") then lname=spath||strip(arg(1))||".txt"
                 else lname=spath||"_dupe_cop.txt"
   gamelist="AB"
   validgames="ABCDEFGHIJKLMNOPRSTUVWXYZ"
   address="127.0.0.1"
   port="2003"
   password="password"

/* GET GLOBAL INFO FROM _DUPE_COP.INI */
   if _fileexists(iname) then do
    gamelist=_ini_askstr("##DEFAULT##", gamelist, iname, "global", "gamelist")
    address=_ini_askstr("##DEFAULT##", address, iname, "global", "address")
    port=_ini_askint("##DEFAULT##", port, iname, "global", "port")
    password=_ini_askstr("##DEFAULT##", password, iname, "global", "password")
   end /*if*/

/* ASK USER TO VERIFY GLOBAL INFO */
   gamelist=upper(_askstr("what games to watch?",gamelist,"c"))
   mask=_space(translate(gamelist," ",ABCDEFGHIJKLMNOPQRSTUVWXYZ," "),0)
   gamelist=_remove_duplicate_chars(_space(translate(gamelist," ",mask," "),0))
   if gamelist="" then call _error "invalid game list"
   address=_askstr("what is the server address?",address,"c")
   port=_askint("what is the admin port number?",port,"c")
   password=_askstr("what is the admin password?",password,"c")

/* WRITE GLOBAL INFO TO _DUPE_COP.INI */
   if \_ini_write(iname, "global", "password", password) then call _error "unable to write to "||iname
   if \_ini_write(iname, "global", "address",  address)  then call _error "unable to write to "||iname
   if \_ini_write(iname, "global", "port",     port)     then call _error "unable to write to "||iname
   if \_ini_write(iname, "global", "gamelist", gamelist) then call _error "unable to write to "||iname

/* LOGIN TO ADMIN ACCOUNT */
   call _newline _ansi("bt;fwh")
   call _domacro "c{"||address||":"||port||"} w{ENTER for none} s{dupe cop^M} w{admin password:} s{"||password||"^M} w{(? for menu):}"

name.=""
bbsname.=""
obs.=0
active.=0
iplist.=""
ip.=""

numgames=length(gamelist)
do i=1 to numgames

 g=substr(gamelist,i,1)
 game.i=g

 /* TEDIT GET USER LIST */
    if _sendwait(g,"[?] :")=640 then call _error "timeout"
    if _sendwait("g","Max # of players:")=640 then call _error "timeout"
    maxplayers.g=_stripint(_grabit(", sectors:"))
    if _sendwait("q","[?] :")=640 then call _error "timeout"
    if _sendwait("u","User ID:")=640 then call _error "timeout"
    call zocsend "1^M"
    j=1
    do while j<=maxplayers.g
     ans=0
     do while ans<6
      ans=zocwaitmux("Userfile record #",,
                     "<A> Name",,
                     "<A> Initialize",,
                     "<B> BBS Name",,
                     "<Y> Observer?",,
                     "<!> Delete this user",,
                     "User edit:")
      select
       when ans=0 then do
        parse value _grabit("^M") with num temp
        if num\=j then call _error "wierd numbering"
        if temp="Observer" then obs.g.j=1
       end /*when*/
       when ans=1 then parse value _grabit("^M") with . ": " name.g.j " (#" .
       when ans=2 then name.g.j=""
       when ans=3 then parse value _grabit("^M") with . ": " bbsname.g.j
       when ans=4 then do
        parse value _grabit("^M") with . ": " temp
        if temp="Yes" then obs.g.j=1
       end /*when*/
       when ans=5 then active.g.j=1
       when ans=6 then nop
       when ans=640 then call _error "timeout"
       otherwise nop
      end /*select*/
     end /*do*/
     call zocsend ">"
     j=j+1
    end /*do*/
    if _sendwait("x","[?] :")=640 then call _error "timeout"
    if _sendwait("q","(? for menu):")=640 then call _error "timeout"

 /* INI FILE GET USER IPS */
    call _newline _ansi("bt;fwh")
    do j=1 to maxplayers.g
     if active.g.j then do
      temp=_ini_read(iname,"game_"||g, "ip_"||copies("0",3-length(j))||j)
      if temp\="##EOF##" then iplist.g.j=temp
      if iplist.g.j\="" then do
       do k=1 to _dwords(iplist.g.j,";")
        temp=_dword(iplist.g.j,k,";")
        if ip.g.temp="" then ip.g.temp=j
                        else ip.g.temp=ip.g.temp||";"||j
       end /*do*/
      end /*if*/
     end /*if*/
    end /*do*/

 /* INI FILE GET LOG DATES */
    start.g=""
    temp=_ini_read(iname,"game_"||g, "log_start")
    if temp\="##EOF##" then start.g=temp
    finish.g=""
    temp=_ini_read(iname,"game_"||g, "log_end")
    if temp\="##EOF##" then finish.g=temp

end /*do*/

if _sendwait("*","Exit RCM")=640 then call _error "timeout"
do FOREVER
 do i=1 to numgames

  reset=0
  g=game.i

  /* READ LOGS */
     if _sendwait("9","(Q for none):")=640 then call _error "timeout"
     if _sendwait(g,"TWGame log initialized")=640 then call _error "timeout"
     temp=_grabit("M")
     temp=word(temp,2)||" "||word(temp,3)||" "||word(temp,1)
     if temp\=start.g then do
      reset=1
      start.g=temp
      if \_ini_write(iname,"game_"||g,"log_start",start.g) then call _error "unable to write to "||iname
     end /*if*/
     else if zocwait(finish.g)=640 then call _error "timeout"
     ans=0
     j=0
     do while ans<2
      ans=zocwaitmux("New Player on Trade Wars",,
                     "Ran Tradewars 2002.",,
                     "(? for menu):")
      select
       when ans=0 then do
        /* 02:55:39 PM 06/04/2002 127.0.0.1 meaty(3): New Player on Trade Wars */
        j=j+1
        parse value _lastline() with user.g.j "): New Player on Trade Wars"
        new.g.j=1
       end /*when*/
       when ans=1 then do
        /* 02:56:41 PM 06/04/2002 127.0.0.1 meaty(3): Ran Tradewars 2002. */
        j=j+1
        parse value _lastline() with user.g.j "): Ran Tradewars 2002."
        new.g.j=0
       end /*when*/
       when ans=640 then call _error "timeout"
       otherwise nop
      end /*select*/
     end /*do*/

  /* ANALYZE ACCOUNTS */
     call _newline _ansi("bt;fye")
     bootlist=""
     bootip=""
     stamp=finish.g
     do k=1 to j
      parse var user.g.k time ampm date userip username
      usernum=substr(username,lastpos("(",username)+1)
      userip=_format_ip(userip)
      if userip\="" then stamp=time||" "||ampm||" "||date
      select
       when userip="" then nop
       when new.g.k & ip.g.userip="" then do
        call zocwriteln "NEW IP FOR NEW USER" usernum userip
        ip.g.userip=usernum
        if iplist.g.usernum="" then iplist.g.usernum=userip
                               else iplist.g.usernum=iplist.g.usernum||";"||userip
        if \_ini_write(iname,"game_"||g,"ip_"||copies("0",3-length(usernum))||usernum,iplist.g.usernum) then call _error "unable to write to "||iname
       end /*when*/
       when new.g.k then do
        call zocwriteln "NEW DUPE IP" usernum userip
        if bootlist="" then bootlist=usernum
                       else bootlist=bootlist||";"||usernum
        if bootip="" then bootip=userip
                     else bootip=bootip||";"||userip
       end /*when*/
       when ip.g.userip="" then do
        call zocwriteln "NEW IP FOR EXISTING USER" usernum userip
        ip.g.userip=usernum
        if iplist.g.usernum="" then iplist.g.usernum=userip
                               else iplist.g.usernum=iplist.g.usernum||";"||userip
        if \_ini_write(iname,"game_"||g,"ip_"||copies("0",3-length(usernum))||usernum,iplist.g.usernum) then call _error "unable to write to "||iname
       end /*when*/
       when _listin(usernum,ip.g.userip) then nop
       otherwise call zocwriteln "INVALID LOGIN"
      end /*select*/
     end /*do*/
     finish.g=stamp
     if \_ini_write(iname,"game_"||g,"log_end",finish.g) then call _error "unable to write to "||iname
     call zocwrite _ansi("bt;fwh")

  /* BOOT INVALID PLAYERS */
     if _sendwait("*","<*> Remote")=640 then call _error "timeout"
     if _sendwait(g,"[?] :")=640 then call _error "timeout"
     do j=1 to _dwords(bootlist,";")
      if _sendwait("u","User ID:")=640 then call _error "timeout"
      ans=0
      dusernum=_dword(bootlist,j,";")
      duserip=_dword(bootip,j,";")
      call zocsend dusernum||"^M"
      do while ans<8
       ans=zocwaitmux("<A> Name",,
                      "<Z> Password",,
                      "<F> Turns left",,
                      "<G> Location",,
                      "<H> Credits",,
                      "<K> Experience Pts",,
                      "<L> Morals Ranking",,
                      "<U> Bank Balance",,
                      "User edit:")
       select
        when ans=0 then parse value _grabit(" (#") with . ": " dname " (#" .
        when ans=1 then parse value _grabit("^M") with . ": " dpwd
        when ans=2 then parse value _grabit("^M") with . ": " dturns
        when ans=3 then parse value _grabit("^M") with . ": Sector " dloc .
        when ans=4 then parse value _grabit("^M") with . ": " dcreds
        when ans=5 then parse value _grabit("^M") with . ": " dexp .
        when ans=6 then parse value _grabit("^M") with . ": " daln .
        when ans=7 then parse value _grabit("^M") with . ": " dbank
        when ans=8 then nop
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*do*/
      if reset then do
       if _fileopenw(lname) then do
        call lineout lname, ""
        call charout lname, "#"||dusernum||" "||dname||" shares an ip with user(s) "||translate(ip.g.userip," ",";")||"."
        call _fileclose(lname)
       end /*if*/
      end /*if*/
      else do
       /* max name width=41 */
       nname=strip(left(dname,26))||" ("||copies("0",3-length(dusernum))||dusernum||" busted by dupe cop)"
       npwd=_random_pwd(8)
       if _sendwait("a"||nname||"^M","User edit:")=640 then call _error "timeout"
       if _sendwait("z"||npwd||"^M","User edit:")=640 then call _error "timeout"
       if _sendwait("f0^M","User edit:")=640 then call _error "timeout"
       if _sendwait("g1^M","User edit:")=640 then call _error "timeout"
       if _sendwait("h0^M","User edit:")=640 then call _error "timeout"
       if _sendwait("k0^M","User edit:")=640 then call _error "timeout"
       if _sendwait("l0^M","User edit:")=640 then call _error "timeout"
       if _sendwait("u0^M","User edit:")=640 then call _error "timeout"
       if _sendwait("x","[?] :")=640 then call _error "timeout"
       if _fileopenw(lname) then do
        call lineout lname, ""
        call lineout lname, "#"||dusernum||" "||dname||" caught at "||date("U")||" "||time("N")
        call lineout lname, " ip "||duserip||" is already in use by user(s) "||translate(ip.g.userip," ",";")||"."
        call lineout lname, " password changed from '"||dpwd||"' to '"||npwd||"'"
        call charout lname, " found in sector "||strip(dloc)||" with "||strip(dturns)||" turns, "||strip(dcreds)||" creds, "||strip(dexp)||" exp, "||strip(daln)||" aln, "||strip(dbank)||" bank"
        call _fileclose(lname)
       end /*if*/
      end /*do*/
     end /*else*/
     reset=0
     if _sendwait("q","(? for menu):")=640 then call _error "timeout"
     if _sendwait("*","<*> Exit RCM")=640 then call _error "timeout"

 end /*do*/
 call zocdelay 15
end /*do*/

exit
/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.5 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. _debug (globals)

     _debug=0
     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118 + 1 /* +1 added 6/23/2008 */
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365
     _baseday.2009=_baseday.2008+365+1
     _baseday.2010=_baseday.2009+365
     _baseday.2011=_baseday.2010+365
     _baseday.2012=_baseday.2011+365
     _baseday.2013=_baseday.2012+365+1
     _baseday.2014=_baseday.2013+365
     _baseday.2015=_baseday.2014+365
     _baseday.2016=_baseday.2015+365
     _baseday.2017=_baseday.2016+365+1
     _baseday.2018=_baseday.2013+365
     _baseday.2019=_baseday.2014+365
     _baseday.2020=_baseday.2015+365
     _baseday.2021=_baseday.2016+365+1
     _baseday.2022=_baseday.2013+365
     _baseday.2023=_baseday.2014+365
     _baseday.2024=_baseday.2015+365
     _baseday.2025=_baseday.2016+365+1
     _baseday.2026=_baseday.2013+365
     _baseday.2027=_baseday.2014+365
     _baseday.2028=_baseday.2015+365
     _baseday.2029=_baseday.2016+365+1
     _baseday.2030=_baseday.2013+365
     _baseday.2031=_baseday.2014+365
     _baseday.2032=_baseday.2015+365
     _baseday.2033=_baseday.2016+365+1

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _efc. _es. _et. _ep. _fc. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _bd. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _vs. _vn. _vi. _mcic. _fh. _fhp. "
     rslt=rslt||"_clv. _online. _msg _msg. _debug "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.4 **/
    _halt: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _rseed v.7 **/
    _rseed: procedure expose (globals)
     if arg(1,"E") then width=min(max(arg(1),2),86400)
     else width=1000
     parse value time("L") with r1 ":" r2 ":" r3 "." r4
     r4=strip(left(r4,5))
     seed=r4||copies(0,5-length(r4))
     rslt=random(0, 99999, seed)//width
    return rslt

/** _get_script_path v.1 **/
    _get_script_path: procedure expose (globals)
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     if left(zocgetinfo("VERSION"),1)>4 then spath = zocfilename("RESOLV", spath)
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _ini_askstr v.6 **/
    _ini_askstr: procedure expose (globals)
     if \arg(1,"E") then msg="enter a string"; else msg=arg(1)
     do i=2 to 4; if \arg(i,"E") then call _error "missing parameter in _ini_askstr"; end
     default=arg(2)
     section=arg(3); if left(section,1)\="!" then section="!"||section
     key=arg(4); if left(key,1)\="!" then key="!"||key
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini.section.key
     select
      when (rslt="##EOF##" | rslt="##UNDEF##") & msg="##DEFAULT##" then rslt=default
      when  rslt="##EOF##" | rslt="##UNDEF##"                      then rslt=_askstr(msg||" ("||key||"=)",default,"c")
      otherwise                                                         nop
     end /*select*/
     _ini.!section.!key=rslt
    return rslt

/** _ini_askint v.6 **/
    _ini_askint: procedure expose (globals)
     if \arg(1,"E") then msg="enter an integer"; else msg=arg(1)
     do i=2 to 4; if \arg(i,"E") then call _error "missing parameter in _ini_askint"; end
     default=arg(2)
     section=arg(3); if left(section,1)\="!" then section="!"||section
     key=arg(4); if left(key,1)\="!" then key="!"||key
     if _stripint(default)\=default then call _error "invalid parameter in _ini_askint"
     if section="##EOF##" then rslt="##EOF##"
     else rslt=_ini.section.key
     select
      when (rslt="##EOF##" | rslt="##UNDEF##") & msg="##DEFAULT##" then rslt=_stripint(default)
      when  rslt="##EOF##" | rslt="##UNDEF##"                      then rslt=_askint(msg||" ("||key||"=)",default,"c")
      otherwise                                                         rslt=_stripint(rslt)
     end /*select*/
     _ini.!section.!key=rslt
    return rslt

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _remove_duplicate_chars v.1 **/
    _remove_duplicate_chars: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _remove_duplicate_chars"
     list=arg(1)
     rslt=left(list,1)
     do i=2 to length(list)
      ch=substr(list,i,1)
      if \_in(rslt,ch) then rslt=rslt||ch
     end /*do*/
    return rslt

/** _error v.9 **/
    _error: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwrite _ansi("clearline;bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: revhelper_at_thereverend_dot_org > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call _beep "error.wav"
    exit

/** _askint v.2 **/
    _askint: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an integer:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=strip(zocask(msg, default))
     do while _stripint(rslt)\=rslt | rslt=""
      default=rslt||" [please enter an integer or ESC to cancel.]"
      if rslt="##CANCEL##" then leave
      else rslt=strip(zocask(msg, default))
     end /*do*/
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _ini_write v.3 **/
    /*_ v.3 tested -*/
    _ini_write: procedure expose (globals)
     /* argument check */
     do i=1 to 4
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_write."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))
     v=strip(arg(4))

     tname=fname||".tmp"
     written=0

     rslt=0
     if _fileopenr(fname) then do
      if _fileexists(tname) then if \dosdel(tname) then call _error "file delete failed."
      if _fileopenw(tname) then do
       insection=0
       linenum=0
       do while \_fileeof(fname)
        line=strip(linein(fname))
        linenum=linenum+1
        select
         when line="["||s||"]" then do
          insection=1
          if linenum>1 then call lineout tname, ""
          call lineout tname, line
          call charout tname, k||"="||v
          written=1
         end /*when*/
         when insection & left(line,length(k)+1)=k||"=" then nop
         when insection & left(line,1)="[" then do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
          insection=0
         end /*when*/
         when line="" then do
          if linenum>1 then call lineout tname, ""
          call charout tname, ""
         end /*when*/
         otherwise do
          if linenum>1 then call lineout tname, ""
          call charout tname, line
         end /*otherwise*/
        end /*select*/
       end /*do*/
       if \written then do
        if linenum>1 then call lineout tname, ""
        call lineout tname, "["||s||"]"
        call charout tname, k||"="||v
        written=1
       end /*if*/
       call _fileclose(tname)
      end /*if*/
      call _fileclose(fname)
     end /*if*/
     if written then do
      if \dosdel(fname) then call _error "file delete failed."
      if \dosrename(tname,fname) then call _error "file rename failed."
     end /*if*/
     else do
      if \_fileexists(fname) then do
       if _filenew(fname) then do
        call lineout fname, "["||s||"]"
        call charout fname, k||"="||v
        call _fileclose(fname)
        written=1
       end /*if*/
      end /*if*/
     end /*else*/
    return written

/** _newline v.3 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     if arg(1,"E") then call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _domacro v.4 **/
    _domacro: procedure expose (globals)
     list=arg(1)
     n=_dwords(list,"}")
     a=""
     mux=0
     rslt=0
     leav=0
     do i=1 to n
      parse value _dword(list,i,"}") with c "{" s
      if c="s" then do
       s=_dword(s,mux+1,"|")
       if pos("_x",s)>0 then do
        s=zocstring("REMOVE",s,"_x")
        rslt=1
       end /*if*/
       if pos("_c",s)>0 then do
        s=zocstring("REMOVE",s,"_c")
        leav=1
       end /*if*/
      end /*if*/
      c=strip(lower(c))
      select
       when c="s" & a\="" then do
        call zocconnect a
        do while \_isonline(15)
         call zocdisconnect
         call zocconnect a
        end /*do*/
        call zocsend s
        mux=0
        a=""
       end /*when*/
       when c="s" then do
        call zocsend s
        mux=0
       end /*when*/
       when c="w" & a\="" then do
        call zocconnect a
        do while _wait(s)=640
         call zocdisconnect
         call zocconnect a
        end /*do*/
        a=""
       end /*when*/
       when c="w" then if _wait(s)=640 then call _error "timeout"
       when c="m" then do
        mux=_waitmux(s)
        if mux=640 then call _error "timeout"
       end /*when*/
       when c="b" then call zocbeep s
       when c="p" then call zocdelay abs(_stripint(s)/1000)
       when c="d" then call zocdisconnect
       when c="l" | c="c" then a=s
       when c="r" & s="" then nop
       when c="r" then do
        if _fileexists(s) then do; call zocdostring "^RUN="||s; exit; end
       end /*when*/
       otherwise nop
      end /*select*/
      if rslt then leave
      if leav then leave
     end /*do*/
    return rslt

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=_wait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if _wait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _ini_read v.1 **/
    _ini_read: procedure expose (globals)
     /* argument check */
     do i=1 to 3
      if \arg(i,"E") | arg(i,"O") then call _error "missing arguments in _ini_read."
     end /*do*/

     /* name arguments */
     fname=arg(1)
     s=strip(arg(2))
     k=strip(arg(3))

     if _fileopenr(fname) then do
      done=0
      found=0
      insection=0
      do while \done & \_fileeof(fname)
       line=strip(linein(fname))
       select
        when left(line,1)=";" then nop
        when line="["||s||"]" then insection=1
        when insection & left(line,1)="[" then done=1
        when insection & _dwords(line,"=")>1 then do
         if k=strip(_dword(line,1,"=")) then do
          v=strip(_dword(line,2,"="))
          v=_ini_format_value(v)
          done=1
          found=1
         end /*if*/
        end /*when*/
        otherwise nop
       end /*select*/
      end /*do*/
      call _fileclose fname
      if \found then v="##EOF##"
     end /*if*/
     else v="##EOF##"

    return v

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _format_ip v.2 **/
    _format_ip: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _format_ip"
     rslt=""
     ip=strip(translate(arg(1)," ","."))
     c=words(ip)
     if c<4 then rslt=""
     else do
      do i=1 to c
       temp=word(ip,i)
       rslt=rslt||" "||copies("0",3-length(temp))||temp
      end /*do*/
      rslt=translate(strip(rslt),"."," ")
     end /*else*/
    return rslt

/** _listin v.4 **/
    _listin: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listin"
     find=arg(1)
     list=arg(2)
     if arg(3,"E") then delim=left(arg(3),1); else delim=";"
     if arg(4,"E") then abbrv=arg(4); else abbrv=0;
     rslt=0
     do i=1 to _dwords(list,delim)
      select
       when \abbrv & find==_dword(list,i,delim) then do; rslt=1; leave; end
       when \abbrv then nop
       when pos(_dword(list,i,delim),find)>0 then do; rslt=1; leave; end
       otherwise nop
      end /*if*/
     end /*do*/
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenw"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN WRITE"
       call stream arg(1), "C", "SEEK <0"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _random_pwd v.3 **/
    _random_pwd: procedure expose (globals)
     if arg(1,"E") then w=arg(1); else w=6
     if arg(2,"E") then n=arg(2); else n=4
     if n=0 then set.0=arg(3)
     set.1="1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.2="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.3="1234567890abcdefghijklmnopqrstuvwxyz"
     set.4="34679abcdefghijkmnopqrstuvwxyzACDEFGHJKLMNPQRTUVWXY"
     set.5="abcdefghijklmnopqrstuvwxyz"
     set.6="bcdfghjklmnpqrstvwxz"
     set.7="aeiouy"
     set.8="BCDFGHJKLMNPQRSTVWXZ"
     set.9="AEIOUY"
     set.10="1234567890"
     rslt=""
     len=length(set.n)
     do i=1 to w
      ch=substr(set.n,random(1,len),1)
      rslt=rslt||ch
     end /*do*/
    return rslt

/** _debug v.5 **/
    _debug: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _debug"
     mode=strip(left(lower(arg(1)),3))
     msg=arg(2)
     if arg(3,"E") then logname=strip(arg(3))
     else logname="_debug.txt"
     select
      when mode="scr" then call zocwriteln "^[[1;34mREV-DEBUG <"||msg||">^[[0m"
      when mode="fed" then call zocsend "`REV-DEBUG <"||msg||">^M"
      when mode="sub" then call zocsend "'REV-DEBUG <"||msg||">^M"
      when mode="log" then do
       if _fileopenw(logname) then do
        call lineout logname, msg
        call _fileclose logname
       end /*if*/
       else call _error "unable to open rev-log.txt."
      end /*when*/
      otherwise nop
     end /*select*/
    return

/** _cleanup v.1 **/
    _cleanup: procedure expose (globals)
     /* put code here to do custom cleanup
        for specific scripts and override
        it in your main program */
    return 1

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _in v.3 **/
    _in: procedure expose (globals)
     if arg(1,"E") & arg(2,"E") & length(arg(1))>0 & verify(arg(2),arg(1),"N")=0 then rslt=1
     else rslt=0
    return rslt

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _isonline v.3 **/
    _isonline: procedure expose (globals)
     if zocgetinfo("ONLINE")="##YES##" then return 1
     if arg(1,"E") then t=arg(1)
     else call _error "missing parameter in _isonline"
     rslt=0
     o="##NO##"
     call time "R"
     do while time("E")<=t & o\="##YES##"
      o=zocgetinfo("ONLINE")
      if o="##YES##" then rslt=1
     end /*do*/
    return rslt

/** _wait v.1 **/
    _wait: procedure expose (globals)
     rslt=zocwait(arg(1))
    return rslt

/** _waitmux v.1 **/
    _waitmux: procedure expose (globals)
     rslt=zocwaitmux(arg(1))
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt
