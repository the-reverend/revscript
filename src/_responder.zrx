/* REXX _responder.zrx by the reverend (build 182)                            */
/*-       built by rev-builder version 1.3a on 22 Mar 2014 at 00:15:34       -*/
/*- ------------------------------------------------------------------------ -*/
/*- This script is free, and can be modified for your personal use, but you  -*/
/*- cannot copy or distribute this script or any derivative work based upon  -*/
/*- this script without the express permission of the author.                -*/
/*-                                                                          -*/
/*- This script is provided to you WITHOUT ANY WARRANTY, even the implied    -*/
/*- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         -*/
/*-                                                                          -*/
/*-                       Copyright (C) 2009 Ron Wilson                      -*/
/*- ------------------------------------------------------------------------ -*/
/*- --------------------*/ _g.!sname="_responder.zrx" /*-------------------- -*/
/*- --------------*/ _g.!sbuild=182; _g.!sdate="2014-03-22" /*-------------- -*/
/*- ------------------------------------------------------------------------ -*/
/* rev. 0 - initial release                                                   */

globals=_setglobals("targetlist. macro_name")
call _timeout 60
call zocsynctime 300
call on halt name _halt

dontask=1

/* CHECK IF ONLINE */
   if \_isonline(1) then call _error "you must be online to use this script."

/* load ini variables */
   load="ns fname vname mname vwname gname dname"
   sl=_ini_load_settings()
   do i=1 to _dwords(sl,";")
    s=_dword(sl,i,";")
    globals=globals||" !"||s
    interpret '!'||s||'="!"||s'
   end;
   f=0; l=""
   do i=1 to words(load)
    s=word(load,i)
    x="!"||s
    interpret s||"=_ini.!settings.x"
    interpret 'if '||s||'="##UNDEF##" then do; l=l s; f=1; end'
   end; if f then call _error "missing config variable(s):"||l; drop load s sl x f l

   bot_name=_iniv(!settings,"!bot_name")
   if _undef(bot_name) then bot_name=_random_pwd(2)

   warning=_iniv(!settings,"!warning")
   target=_iniv(!settings,"!target")
   ignore=_iniv(!settings,"!ignore")
   if _undef(warning) then warnlist=""; else warnlist=warning
   if _undef(target) then targetlist.1=""; else targetlist.1=target
   if _undef(ignore) then targetlist.2=""; else targetlist.2=ignore

   alpha=_iniv(!settings,"!alpha")
   rylos=_iniv(!settings,"!rylos")
   sd=_iniv(!settings,"!sd")
   if _undef(alpha) then alpha=0
   if _undef(rylos) then rylos=0
   if _undef(sd) then sd=0

   cmc=1
   x="!custom_nam_"||cmc; custom_nam.cmc=_ini.!responder.x
   x="!custom_pmt_"||cmc; custom_pmt.cmc=_ini.!responder.x
   x="!custom_mac_"||cmc; custom_mac.cmc=_ini.!responder.x
   do while \_undef(custom_mac.cmc)
    cmc=cmc+1
    x="!custom_nam_"||cmc; custom_nam.cmc=_ini.!responder.x
    x="!custom_pmt_"||cmc; custom_pmt.cmc=_ini.!responder.x
    x="!custom_mac_"||cmc; custom_mac.cmc=_ini.!responder.x
   end /*do*/
   cmc=cmc-1

/* GET CURRENT PROMPT */
   prompt=_synchronize()

/* GET FIG AND SECTORCIM INFO */
   reclen=_mapinit(mname)
   call _getfigs fname, "file"
   call _getvoids vname, "file"
   call _getviews vwname

/* GET PLANET NUMBER */
   planet=_get_planet_number(prompt)

/* GET MACRO PROTOTYPE */
   proto_names="twarp-drop"
   proto_prompt="command"
   proto_macros="s{m%t^My} m{engage?|blind?|Fuel|NavPoint} s{y^Mayqz9999^Mayqz9999^Mayqz9999^M_x|n_c|_x|q<_x}"

   proto_names=proto_names||";twarp-drop-return"
   proto_prompt=proto_prompt||";command"
   proto_macros=proto_macros||";s{m%t^My} m{engage?|blind?|Fuel|NavPoint} s{y^Mayqz9999^Mayqz9999^Mayqz9999^Mm%c^Myy_x|n_c|_x|q<_x}"

   proto_names=proto_names||";beam-drop"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{b%t^M} m{engage?|blind?|range.|Fuel|order for one?} s{y^Mayqz9999^Mayqz9999^M_x|n_c|_c|_c|_x}"

   proto_names=proto_names||";beam-drop-return"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{b%t^M} m{engage?|blind?|range.|Fuel|order for one?} s{y^Mayqz9999^Mayqz9999^Mm%c^Myy_x|n_c|_c|_c|_x}"

   proto_names=proto_names||";pwarp-drop"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{p%t^My} m{Locked|Blind Jump|enough Fuel} s{'p-drop %t^M_x|'failed^M_c|_x}"

   proto_names=proto_names||";pwarp-drop-return"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{p%t^My} m{Locked|Blind Jump|enough Fuel} s{'p-drop %t^Mp%c^My_x|'failed^M_c|_x}"

   proto_names=proto_names||";pwarp-drop-attack"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{p%t^My} m{Locked|Blind Jump|enough Fuel} s{qq^M ^M ayqz9999^Ml%p^Mc'p-drop %t^M_x|'failed^M_c|_x}"

   proto_names=proto_names||";pwarp-drop-attack-return"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{p%t^My} m{Locked|Blind Jump|enough Fuel} s{qq^M ^M ayqz9999^Ml%p^Mc'p-drop %t^Mp%c^My_x|'failed^M_c|_x}"

   proto_names=proto_names||";twarp-phot"
   proto_prompt=proto_prompt||";command"
   proto_macros=proto_macros||";s{m%a^My} m{engage?|blind?|Fuel|NavPoint} s{y^Mcpy%t^Mq'tw-phot %a->%t^M_x|n_c|_x|q<_x}"

   proto_names=proto_names||";twarp-phot-return"
   proto_prompt=proto_prompt||";command"
   proto_macros=proto_macros||";s{m%a^My} m{engage?|blind?|Fuel|NavPoint} s{y^Mcpy%t^Mqm%c^Myy'tw-phot %a->%t^M_x|n_c|_x|q<_x}"

   proto_names=proto_names||";beam-phot"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{b%a^M} m{engage?|blind?|range.|Fuel|order for one?} s{y^Mcpy%t^Mq'bw-phot %a->%t^M_x|n_c|_c|_c|_x}"

   proto_names=proto_names||";beam-phot-return"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{b%a^M} m{engage?|blind?|range.|Fuel|order for one?} s{y^Mcpy%t^Mq'bw-phot %a->%t^Mshm%c^Myy_x|n_c|_c|_c|_x}"

   proto_names=proto_names||";pwarp-phot"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{p%a^Mycpy%t^Mq} m{All Systems Ready|not an adjacent sector |enough Fuel|disabled.} s{'p-phot %a->%t^M_c|q'blind^M_c|'not enough fuel^M_c|'photons disabled^M_x}"

   proto_names=proto_names||";pwarp-phot-return"
   proto_prompt=proto_prompt||";citadel"
   proto_macros=proto_macros||";s{p%a^Mycpy%t^Mq} m{All Systems Ready|not an adjacent sector |enough Fuel|disabled.} s{'p-phot %a->%t^Mp%c^My_c|q'blind^M_c|'not enough fuel^M_c|'photons disabled^M_x}"

   proto_names=proto_names||";adjacent-move-attack"
   proto_prompt=proto_prompt||";command"
   proto_macros=proto_macros||";s{m%t^M} m{That Warp Lane|Sector  :} s{n_c|za99^M^M^Mayqz240^M<_x}"

   proto_names=proto_names||";sdblock"
   proto_prompt=proto_prompt||";bank"
   proto_macros=proto_macros||";s{qqqncpy%t^M^Mqpsgyg_x}"

   proto_names=proto_names||";sectorblock"
   proto_prompt=proto_prompt||";command"
   proto_macros=proto_macros||";s{cpy%t^M^Mq}"

   proto_names=proto_names||";finder"
   proto_prompt=proto_prompt||";any"
   proto_macros=proto_macros||";b{1}"

   do i=1 to cmc
    proto_names=proto_names||";"||custom_nam.i
    proto_prompt=proto_prompt||";"||custom_pmt.i
    proto_macros=proto_macros||";"||custom_mac.i
   end /*do*/
   proto_names=proto_names||";type your own"
   proto_prompt=proto_prompt||";any"
   proto_macros=proto_macros||";s{'custom^M}"
   ans=_drequestlisti("choose a macro prototype:",proto_names,";","c")
   macro_name=_dword(proto_names,ans,";")
   macro_prompt=_dword(proto_prompt,ans,";")
   macro=_dword(proto_macros,ans,";")

/* DOUBLE CHECK THE PROMPT */
   select
    when macro_prompt="any" then nop
    when macro_prompt=prompt then nop
    otherwise call _error "please start at the "||macro_prompt||" prompt."
   end /*select*/

/* HELP */
   call _newline _ansi("bt;bbl;fye")
   call zocwriteln "REPLACEMENTS"
   call zocwriteln "  %c = current sector"
   call zocwriteln "  %t = target sector"
   call zocwriteln "  %a = adjacent fig to target"
   call zocwriteln "  %s = current ship number"
   call zocwriteln "  %p = current planet number"
   call zocwrite _ansi("bt;bbl;fgr")
   call zocwriteln "MACRO SYNTAX"
   call zocwriteln "  w{waittext}"
   call zocwriteln "  m{waitmuxtext}"
   call zocwriteln "    | delimiter"
   call zocwriteln "  s{sendtext}"
   call zocwriteln "    | delimiter (to send after a waitmux)"
   call zocwriteln "    _x exit script  (put _x in the send string to exit)"
   call zocwriteln "    _c cancel macro (put _c in the send string to cancel)"
   call zocwriteln "  b{beepcount}"
   call zocwrite _ansi("bt;fwh")
   if \dontask & macro_name="type your own" then do
    x="!responder_macro"; temp=_ini.!responder.x
    if \_undef(macro) then macro=temp
    macro=_askstr("enter response macro:", macro, "c")
   end /*if*/
   parse value _getinfo("sect;turns;phot;ship") with home ";" turns ";" photons ";" ship
   current_sector=home

/* spot check for invalid macro */
   macro=zocstring("REPLACE", macro, "%c", home)
   macro=zocstring("REPLACE", macro, "%s", ship)
   if planet=0 & pos("%p",macro)>0 then call _error "please start on a planet if you want to use %p."
   macro=zocstring("REPLACE", macro, "%p", planet)
   tmacro=zocstring("REMOVE", macro, "%t")
   tmacro=zocstring("REMOVE", tmacro, "%a")
   if pos("%",tmacro)>0 then call _error "invalid macro string"

/* spot check for photons on board */
   if pos("cpy",macro)>0 & photons=0 then do
    if \_yesno("CPY detected in macro - no photons on board - CONTINUE?") then exit
   end /*if*/

/* TARGET */
   if \dontask then targetlist.1=zocask("enter a list of players to TARGET separated by semi-colons",targetlist.1)
   if targetlist.1="##CANCEL##" then call _quit "script cancelled by user."
   resetlist.1=targetlist.1

/* IGNORE */
   if \dontask then targetlist.2=zocask("enter a list of players to IGNORE separated by semi-colons",targetlist.2)
   if targetlist.2="##CANCEL##" then call _quit "script cancelled by user."
   resetlist.2=targetlist.2

/* WARNING */
   if warnlist\="" then do
    call zocwriteln _ansi("bt;fwh")||"building warning list"
    do i=1 to words(warnlist)
     if _dwords(word(warnlist,i),",")=2 then do
      s=_dword(word(warnlist,i),1,",")
      d=_dword(word(warnlist,i),2,",")
      call _mapdist s, 0, mname, reclen, 1, d
     end /*if*/
    end /*do*/
   end /*if*/

/* MAIN LOOP - WAIT FOR FIGHTER/LIMPET MESSAGES */
player=""
done=0
call zocsend "'status ::^M"
do while \done
 ans=zocwaitmux("entered sector.",,
                "activated",,
                "Ether Probe.",,
                "I.D. code.",,
                "::",,
                "INACTIVITY WARNING",,
                "] (?=Help)? :",,
                "defending this sector?")
/* Playername disrupted all of your mines in 547 */

 line=strip(_lastline())
 select
  when ans=0 then do
   parse var line temp "Deployed Fighters Report Sector " target ": " player "entered sector." .
   if strip(temp)="" then do
    ship=substr(player,lastpos("'s",player)+3)
    player=left(player,lastpos("'s",player)-1)
    done=_respond(home, target, player, macro, mname, reclen, ns)
    if \done then do
     srch="r:1;f:1"
     find=_mapfind(target,srch,mname,reclen,255)
     if find>0 & \_listinstr(targetlist.2, player) then call _report_find "nearest fig", target, find, srch
     if warnlist\="" then do
      do i=1 to words(warnlist)
       if _dwords(word(warnlist,i),",")=2 then do
        s=_dword(word(warnlist,i),1,",")
        d=_dword(word(warnlist,i),2,",")
        if _dist.target.s<=d then call zocsend "'warning : "||player||" is "||_dist.target.s||" hops from "||s||"^M"
       end /*if*/
      end /*do*/
     end /*if*/
    end /*if*/
    _f.target=0
   end /*if*/
  end /*when*/
  when ans=1 then do
   parse var line temp "Limpet mine in " target " activated"
   if strip(temp)="" then do
    done=_respond(home, target, "", macro, mname, reclen, ns)
    if \done then do
     srch="r:1;f:1"
     find=_mapfind(target,srch,mname,reclen,255)
     if find>0 then call _report_find "nearest fig:", target, find, srch
     if warnlist\="" then do
      do i=1 to words(warnlist)
       if _dwords(word(warnlist,i),",")=2 then do
        s=_dword(word(warnlist,i),1,",")
        d=_dword(word(warnlist,i),2,",")
        if _dist.target.s<=d then call zocsend "'warning : limpet activated "||_dist.target.s||" hops from "||s||"^M"
       end /*if*/
      end /*do*/
     end /*if*/
    end /*if*/
    _f.target=0
   end /*if*/
  end /*when*/
/*
Your fighters in sector 3610 destroyed a Sub Space Ether Probe.
 They traced it's transmission to Darth Bater's I.D. code.
*/
  when ans=2 then call zocsend "'probe hit - need to write some code here^M"
  when ans=3 then nop
  when ans=4 then do
   select
    when left(line,2)="R " then do
     name=strip(substr(line,3,7))
     parse value substr(line,10) with cmd args "::"
    end /*when*/
    when left(line,1)="'" then do
     if zocwait("Message sent")=640 then call _error "timeout"
     name="self"
     parse value substr(line,2) with cmd args "::"
    end /*when*/
    otherwise do
     name=""
     cmd=""
     args=""
    end /*otherwise*/
   end /*select*/
   cmd=lower(cmd)
   args=strip(args)
   done=_command(name, cmd, args, fname, mname, reclen, ns, planet)
  end /*when*/
  when ans=5 then call zocsend "^["
  when ans=6 then do
   parse var line . "]:[" temp "] (?=Help)? :"
   temp=_stripint(temp)
   if temp\="" then current_sector=temp
   _sv.current_sector=1
  end /*when*/
  when ans=7 & current_sector\="" then _f.current_sector=1
  when ans=640 then call zocsend "^["
  otherwise nop
 end /*select*/
end /*do*/

exit

_respond: procedure expose (globals)
 home=arg(1)
 target=_stripint(arg(2))
 player=arg(3)
 macro=arg(4)
 mname=arg(5)
 reclen=arg(6)
 ns=arg(7)

 /* don't respond to voided sectors */
    if _v.target then return 0

 /* verify target lists */
    if target="" then return 0
    if targetlist.1\="" & \_listinstr(targetlist.1, player) then return 0
    if _listinstr(targetlist.2, player) then return 0

 /* check for adjacent fig */
    adjacent=0
    if pos("%a",macro)>0 then do /* skip if no %a in macro */
     call _mapseek mname, reclen, target
     do i=1 to words(_s.target)
      asec=word(_s.target,i)
      awarptype=asec%20000
      asec=asec//20000
      call _mapseek mname, reclen, asec
      if _f.asec>0 & awarptype>0 & \_v.asec then do
       adjacent=asec
       leave
      end /*if*/
     end /*do*/
     if adjacent=0 then return 0
    end /*if*/

 /* replace %a and %t with sector numbers */
    macro=zocstring("REPLACE",macro,"%a",adjacent)
    macro=zocstring("REPLACE",macro,"%t",target)

 rslt=_domacro(macro)
return rslt

_command: procedure expose (globals) warnlist sd
 name=arg(1)
 cmd=arg(2)
 args=arg(3)
 fname=arg(4)
 mname=arg(5)
 reclen=arg(6)
 ns=arg(7)
 planet=arg(8)
 pre="responder"
 rslt=0
 find=0
 select
  when cmd="" then nop
  when cmd=pre then nop
  when cmd="status" then do
   call zocsend "'^M"||pre||" : "||macro_name||"^M"
   if targetlist.1="" then call zocsend "  targeting : everyone^M"
                      else call zocsend "  targeting : "||targetlist.1||"^M"
   if targetlist.2="" then call zocsend "  ignoring : nobody^M"
                      else call zocsend "  ignoring : "||targetlist.2||"^M"
   do i=1 to words(warnlist)
    s=_dword(word(warnlist,i),1,",")
    d=_dword(word(warnlist,i),2,",")
    call zocsend "  warning point : "||_pad(s,length(ns),"R")||", "||_pad(d,2,"R")||" hops^M"
   end /*do*/
   call zocsend "^M"
  end /*when*/
  when cmd="target" & args="" then call zocsend "'"||pre||" : invalid command format^M"
  when cmd="target" & lower(args)="clear" then do
   targetlist.1=""
   call zocsend "'"||pre||" : target list cleared^M"
  end /*when*/
  when cmd="target" then do
   if targetlist.1="" then targetlist.1=args
                      else targetlist.1=targetlist.1||";"||args
   call zocsend "'"||pre||" : target list updated^M"
  end /*when*/
  when cmd="ignore" & args="" then call zocsend "'"||pre||" : invalid command format^M"
  when cmd="ignore" & lower(args)="clear" then do
   targetlist.2=""
   call zocsend "'"||pre||" : ignore list cleared^M"
  end /*when*/
  when cmd="ignore" then do
   if targetlist.2="" then targetlist.2=args
                      else targetlist.2=targetlist.2||";"||args
   call zocsend "'"||pre||" : ignore list updated^M"
  end /*when*/
  when cmd="q" & name="self" then do
   call zocsend "'"||pre||" : goodbye^M"
   rslt=1
  end /*when*/
  when cmd="q" then nop
  when cmd="warn" then do
   s=_stripint(word(args,1))
   d=_stripint(word(args,2))
   select
    when s="" then call zocsend "'"||pre||" : invalid command format^M"
    when d=0 | (d="" & s<0) then do
     templist=""
     do i=1 to words(warnlist)
      s=abs(s)
      s2=_dword(word(warnlist,i),1,",")
      d2=_dword(word(warnlist,i),2,",")
      if s\=s2 then templist=templist||" "||s2||","||d2
     end
     warnlist=strip(templist)
     call zocsend "'"||pre||" : warning removed for sector "||s||"^M"
    end /*when*/
    when d="" then call zocsend "'"||pre||" : invalid command format^M"
    otherwise do
     warnlist=warnlist||" "||s||","||d
     call zocsend "'"||pre||" : mapping...^M"
     call _mapdist s, 0, mname, reclen, 1, d
     call zocsend "'"||pre||" : warning added for sector "||s||" up to "||d||" hops^M"
    end /*otherwise*/
   end /*select*/
  end /* when*/
  when cmd="figs" then do
   pmt=_synchronize()
   if planet=0 then planet=_get_planet_number(pmt)
   select
    when pmt="command" then do
     call zocsend "'"||pre||" : fig refresh in progress^M"
     count=_getfigs(fname)
     call zocsend "'"||pre||" : fig refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
    end /*when*/
    when pmt="planet" & planet>0 then do
     call zocsend "q'"||pre||" : fig refresh in progress^M"
     count=_getfigs(fname)
     call zocsend "l"||planet||"^M'"||pre||" : fig refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
    end /*when*/
    when pmt="citadel" & planet>0 then do
     call zocsend "qq'"||pre||" : fig refresh in progress^M"
     count=_getfigs(fname)
     call zocsend "l"||planet||"^Mc'"||pre||" : fig refresh complete : "||count||" sectors ("||trunc(count/ns*1000)/10||"%)^M"
    end /*when*/
    otherwise call zocsend "'"||pre||" : fig refresh failed, player at "||pmt||" prompt^M"
   end /*select*/
  end /*when*/
  when cmd="figta" then do
   pmt=_synchronize()
   if pmt="citadel" then do
    sector=_stripint(word(args,1))
    if sector="" then do
     call zocsend "x"
     sector=_get_corpie_ta(name)
     call zocsend "q"
    end /*if*/
    select
     when sector="" then call zocsend "'"||pre||" : invalid sector^M"
     when sector>ns then call zocsend "'"||pre||" : invalid sector^M"
     when sector<1  then call zocsend "'"||pre||" : invalid sector^M"
     otherwise do
      _f.sector=1
      call zocsend "'recorded^M"
     end /*otherwise*/
    end /*select*/
   end /*if*/
   else call zocsend "'"||pre||" : figta failed : script owner not in the citadel^M"
  end /*when*/
  when cmd="pickup" | cmd="saveme" then do
   pmt=_synchronize()
   if pmt="citadel" then do
    sector=_stripint(word(args,1))
    if sector="" then do
     call zocsend "x"
     sector=_get_corpie_ta(name)
     call zocsend "q"
    end /*if*/
    select
     when sector="" then call zocsend "'"||pre||" : invalid sector^M"
     when sector>ns then call zocsend "'"||pre||" : invalid sector^M"
     when sector<1  then call zocsend "'"||pre||" : invalid sector^M"
     otherwise call zocsend "p"||sector||"^My'"||_dword("here i am!;you rang?;BOOM!;shazaam!;that'll be 12 tons of fuel ore please.;QUASAR ANYONE?!?",random(1,6),";")||"^M"
    end /*select*/
   end /*if*/
   else call zocsend "'"||pre||" : pickup failed : script owner not in the citadel^M"
  end /*when*/
  when cmd="f" then do
   strt=_stripint(word(args,1))
   select
    when strt="" & name="self" then strt=_getinfo("sect")
    when strt="" then do
     call zocsend "x"
     strt=_get_corpie_ta(name)
     call zocsend "q"
    end /*when*/
    otherwise nop
   end /*select*/
   select
    when strt="" then call zocsend "'"||pre||" : invalid sector^M"
    when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
    when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
    otherwise do
     if word(args,2)="v" then srch="r:1;f:1;uv:1"
     else srch="r:1;f:1"
     find=_mapfind(strt,srch,mname,reclen,255)
     if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
               else call _report_find "nearest fig", strt, find, srch
    end /*otherwise*/
   end /*select*/
  end /*when*/
  when cmd="nf" then do
   strt=_stripint(word(args,1))
   select
    when strt="" & name="self" then strt=_getinfo("sect")
    when strt="" then do
     call zocsend "x"
     strt=_get_corpie_ta(name)
     call zocsend "q"
    end /*when*/
    otherwise nop
   end /*select*/
   select
    when strt="" then call zocsend "'"||pre||" : invalid sector^M"
    when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
    when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
    otherwise do
     _f.1=1; _f.2=1; _f.3=1; _f.4=1; _f.5=1; _f.6=1; _f.7=1; _f.8=1; _f.9=1; _f.10=1; _f.sd=1;
     srch="f:0"
     find=_mapfind(strt,srch,mname,reclen,255)
     if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
               else call _report_find "nearest no-fig", strt, find, srch
     _f.1=0; _f.2=0; _f.3=0; _f.4=0; _f.5=0; _f.6=0; _f.7=0; _f.8=0; _f.9=0; _f.10=0; _f.sd=0;
    end /*otherwise*/
   end /*select*/
  end /*when*/
  when cmd="de" then do
   strt=_stripint(word(args,1))
   select
    when strt="" & name="self" then strt=_getinfo("sect")
    when strt="" then do
     call zocsend "x"
     strt=_get_corpie_ta(name)
     call zocsend "q"
    end /*when*/
    otherwise nop
   end /*select*/
   select
    when strt="" then call zocsend "'"||pre||" : invalid sector^M"
    when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
    when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
    otherwise do
     srch="f:0;d:1;e:0"
     find=_mapfind(strt,srch,mname,reclen,255)
     if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
               else call _report_find "nearest unexp deadend", strt, find, srch
     _sv.find=1
    end /*otherwise*/
   end /*select*/
  end /*when*/
  when cmd="p" then do
   strt=_stripint(word(args,1))
   select
    when strt="" & name="self" then do
     strt=_getinfo("sect")
     type=lower(word(args,1))
    end /*when*/
    when strt="" then do
     call zocsend "x"
     strt=_get_corpie_ta(name)
     call zocsend "q"
     type=lower(word(args,1))
    end /*when*/
    otherwise type=lower(word(args,2))
   end /*select*/
   select
    when strt="" then call zocsend "'"||pre||" : invalid sector^M"
    when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
    when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
    when \(verify(type,"xbs")=0 & length(type)=3) then call zocsend "'"||pre||" : invalid port type "||type||"^M"
    otherwise do
     srch="pt:"||type
     find=_mapfind(strt,srch,mname,reclen,255)
     if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
               else call _report_find "nearest port", strt, find, srch
    end /*otherwise*/
   end /*select*/
  end /*when*/
  when cmd="fp" then do
   strt=_stripint(word(args,1))
   select
    when strt="" & name="self" then do
     strt=_getinfo("sect")
     type=lower(word(args,1))
    end /*when*/
    when strt="" then do
     call zocsend "x"
     strt=_get_corpie_ta(name)
     call zocsend "q"
     type=lower(word(args,1))
    end /*when*/
    otherwise type=lower(word(args,2))
   end /*select*/
   select
    when strt="" then call zocsend "'"||pre||" : invalid sector^M"
    when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
    when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
    when \(verify(type,"xbs")=0 & length(type)=3) then call zocsend "'"||pre||" : invalid port type "||type||"^M"
    otherwise do
     srch="f:1;pt:"||type
     find=_mapfind(strt,srch,mname,reclen,255)
     if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
               else call _report_find "nearest port", strt, find, srch
    end /*otherwise*/
   end /*select*/
  end /*when*/
  when cmd="cs" then do
   strt=_stripint(word(args,1))
   if strt\=word(args,1) then strt=""
   select
    when strt="" & name="self" then do
     strt=_getinfo("sect")
     srch=word(args,1)
    end /*when*/
    when strt="" then do
     call zocsend "x"
     strt=_get_corpie_ta(name)
     call zocsend "q"
     srch=word(args,1)
    end /*when*/
    otherwise srch=word(args,2)
   end /*select*/
   select
    when strt="" then call zocsend "'"||pre||" : invalid sector^M"
    when strt>ns then call zocsend "'"||pre||" : invalid sector^M"
    when strt<1  then call zocsend "'"||pre||" : invalid sector^M"
    otherwise do
     find=_mapfind(strt,srch,mname,reclen,255)
     if find=0 then call zocsend "'"||pre||" : find failed : insufficient cim data^M"
               else call _report_find "nearest matching", strt, find, srch
    end /*otherwise*/
   end /*select*/
  end /*when*/
  when cmd="wipe" then call zocsend "'^Mwiping "||name||"'s butt...^M.^M.^M.^Mdamn this is taking a while^Mtask complete.^M^M"
  when cmd="help" then do
   call zocsend "'^M"||pre||" : help^M",
              ||" status :;               <-- script status^M",
              ||" help :;                 <-- this screen^M",
              ||" figs :;                 <-- refresh fig list^M",
              ||" warn [sector] [hops] :; <-- add a warning for a sector^M"
   call zocsend " f [sector] :;           <-- nearest fig^M",
              ||" nf [sector] :;          <-- nearest sector with no fig^M",
              ||" p [sector] [type] :;    <-- nearest port type sxb, e.g. sxx for ore^M",
              ||" fp [sector] [type] :;   <-- nearest port with fig^M"
   call zocsend " target [name] :;        <-- target a player^M",
              ||" target clear :;         <-- clear target list^M",
              ||" ignore [name] :;        <-- ignore a player^M",
              ||" ignore clear :;         <-- clear ignore list^M"
   call zocsend " pickup [sector] :;      <-- fly planet to sector^M",
              ||" pickup :;               <-- fly planet to your TA^M",
              ||" figta :;                <-- record a fig placed at your TA^M",
              ||"^M"
  end /*when*/
  otherwise nop /* call zocsend "'"||pre||" : unknown command "||upper(cmd)||"^M" */
 end /*select*/

return rslt

_report_find: procedure expose (globals)
  prefix=arg(1)
  strt=arg(2)
  find=arg(3)
  srch=arg(4)
  msg=find
  if _p.find\="" then msg=msg||" "||_dword(_p.find,1,";")
  if pos("r:1",srch)>0 ,
   then msg=msg||" - ("||_dist.find.strt||" hops)" translate(_path.find.strt,">",";")
   else msg=msg||" - ("||_dist.strt.find||" hops)" translate(_path.strt.find,">",";")
  call zocsend "'"||prefix||" : "||msg||"^M"
return

/***                 THE REVEREND'S TW LIBRARY FOR ZOC/REXX                 ***/

/** _setglobals v.5 **/
    _setglobals: procedure expose _verbose _monthdays _monthnames _baseday. _g. _msg. _debug (globals)

     _debug=0
     _verbose=0
     _msg.=""; _msg.0=0
     _monthdays="31;28;31;30;31;30;31;31;30;31;30;31"
     _monthnames="jan;feb;mar;apr;may;jun;jul;aug;sep;oct;nov;dec"
     _baseday.2000=730118 + 1 /* +1 added 6/23/2008 */
     _baseday.2001=_baseday.2000+365+1
     _baseday.2002=_baseday.2001+365
     _baseday.2003=_baseday.2002+365
     _baseday.2004=_baseday.2003+365
     _baseday.2005=_baseday.2004+365+1
     _baseday.2006=_baseday.2005+365
     _baseday.2007=_baseday.2006+365
     _baseday.2008=_baseday.2007+365
     _baseday.2009=_baseday.2008+365+1
     _baseday.2010=_baseday.2009+365
     _baseday.2011=_baseday.2010+365
     _baseday.2012=_baseday.2011+365
     _baseday.2013=_baseday.2012+365+1
     _baseday.2014=_baseday.2013+365
     _baseday.2015=_baseday.2014+365
     _baseday.2016=_baseday.2015+365
     _baseday.2017=_baseday.2016+365+1
     _baseday.2018=_baseday.2013+365
     _baseday.2019=_baseday.2014+365
     _baseday.2020=_baseday.2015+365
     _baseday.2021=_baseday.2016+365+1
     _baseday.2022=_baseday.2013+365
     _baseday.2023=_baseday.2014+365
     _baseday.2024=_baseday.2015+365
     _baseday.2025=_baseday.2016+365+1
     _baseday.2026=_baseday.2013+365
     _baseday.2027=_baseday.2014+365
     _baseday.2028=_baseday.2015+365
     _baseday.2029=_baseday.2016+365+1
     _baseday.2030=_baseday.2013+365
     _baseday.2031=_baseday.2014+365
     _baseday.2032=_baseday.2015+365
     _baseday.2033=_baseday.2016+365+1

     i=lastpos(".",_g.!sname)
     if i=0 then _g.!sname1=_g.!sname
            else _g.!sname1=left(_g.!sname,i-1)

     rslt="_g. _ini. _s. _p. _d. _v. _f. _m. _l. _q. _sl. _ex. _qs. "
     rslt=rslt||"_ef. _efc. _es. _et. _ep. _fc. "
     rslt=rslt||"_path. _dist. _dtomsl. _dfrmsl. "
     rslt=rslt||"_bg. _bd. _nwi. _nwo. _nw. _nwt. _od. _sv. _pv. _vs. _vn. _vi. _mcic. _fh. _fhp. "
     rslt=rslt||"_clv. _online. _msg _msg. _debug "
     rslt=rslt||"_verbose _monthdays _monthnames _baseday. "
     rslt=rslt||"globals "
     if arg(1,"E") then rslt=rslt||arg(1)

     rslt=_space(rslt)
    return rslt

/** _timeout v.1 **/
    _timeout: procedure expose (globals)
     if _g.!timeout="_G.!TIMEOUT" then _g.!timeout=60
     rslt=_g.!timeout
     nt=_stripint(arg(1))
     if arg(1,"E") & nt>0 then do
      call zoctimeout nt
      _g.!timeout=nt
     end /*if*/
    return rslt

/** _halt v.4 **/
    _halt: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwriteln "^[[1;33m< user abort >^[[0m "
     exit
    return

/** _isonline v.3 **/
    _isonline: procedure expose (globals)
     if zocgetinfo("ONLINE")="##YES##" then return 1
     if arg(1,"E") then t=arg(1)
     else call _error "missing parameter in _isonline"
     rslt=0
     o="##NO##"
     call time "R"
     do while time("E")<=t & o\="##YES##"
      o=zocgetinfo("ONLINE")
      if o="##YES##" then rslt=1
     end /*do*/
    return rslt

/** _error v.9 **/
    _error: procedure expose (globals)
     call off halt
     call _cleanup
     call zocwrite _ansi("clearline;bt;frd")||"< script error ("||_g.!sname||" b."||_g.!sbuild||")"
     if arg(1,"E") then call zocwrite " : "||arg(1)
     call zocwriteln " >"
     call zocwriteln _ansi("bt;fye")||"< if this is a serious problem, email me at: revhelper_at_thereverend_dot_org > "
     call zocwriteln "< SCRIPT "||_g.!sname||", BUILD "||_g.!sbuild||", DATE "||_g.!sdate||" > "
     call zocwriteln "< ZOC VERSION '"||zocgetinfo("VERSION")||"', OS '"||zocgetinfo("OSYS")||"', LOCATION '"||zocgetinfo("CONNECTEDTO")||"' >"
     if arg(2,"E") then call zocwriteln _ansi("bt;fgr")||"< "||arg(2)||" >"
     call _beep "error.wav"
    exit

/** _ini_load_settings v.1 **/
    _ini_load_settings: procedure expose (globals)

     parse value zocgetoption("CaptDefaultName") with . '="' ldefault '"'
     if left(zocgetinfo("VERSION"),1)>4 then ldefault = zocfilename("RESOLV", ldefault)
     parse value zocgetglobaloption("WindowTitle") with . '="' gname '"'

     lpath=_get_log_path()
     spath=_get_script_path()
     dpath=_get_download_path()

     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then gname=_setgame()
     if gname="" | gname="%ZOCORHOST% %OPTIONS%" then exit
     dname=dosfname(lpath||gname||"_data.ini")

     _ini.="##UNDEF##"

     sectionlist=""
     if _fileopenr(dname) then do
      insection=0
      do while \_fileeof(dname)
       line=strip(linein(dname))
       if _ini_is_section(line) then do
        insection=1
        parse var line "[" section "]"
        section=strip(section)
        if sectionlist="" then sectionlist=section; else sectionlist=sectionlist||";"||section
       end /*if*/
       else do
        if insection then do
         parse var line k "=" v
         v=_ini_format_value(v)
         k="!"||section||".!"||strip(k)
         if k\="!"||section||".!" then _ini.k=strip(v)
        end /*if*/
       end /*else*/
      end /*while*/
      call _fileclose dname
     end /*if*/

     call _iniv "!settings", "!ldefault", ldefault
     call _iniv "!settings", "!lpath",  lpath
     call _iniv "!settings", "!spath",  spath
     call _iniv "!settings", "!dpath",  dpath
     call _iniv "!settings", "!dname",  dname
     call _iniv "!settings", "!gname",  gname
     call _iniv "!settings", "!lname",  lpath||gname||"_log.txt"
     call _iniv "!settings", "!fname",  lpath||gname||"_figs.txt"
     call _iniv "!settings", "!vname",  lpath||gname||"_voids.txt"
     call _iniv "!settings", "!vwname", lpath||gname||"_view.txt"
     call _iniv "!settings", "!pname",  lpath||gname||".prt"
     call _iniv "!settings", "!sname",  lpath||gname||".sct"
     call _iniv "!settings", "!rpname", lpath||gname||"_ref.prt"
     call _iniv "!settings", "!rsname", lpath||gname||"_ref.sct"
     call _iniv "!settings", "!mname",  lpath||gname||".map"
     call _iniv "!settings", "!zname",  lpath||gname||".ztm"
     call _iniv "!settings", "!nfname", lpath||gname||"_nearfig.txt"

    return sectionlist

/** _dwords v.2 **/
    _dwords: procedure expose (globals)
     rslt=words(translate(arg(1),arg(2)||" "," "||arg(2)))
    return rslt

/** _dword v.2 **/
    _dword: procedure expose (globals)
     rslt=translate(word(translate(arg(1),arg(3)||" "," "||arg(3)),arg(2))," "||arg(3),arg(3)||" ")
    return rslt

    _iniv: procedure expose (globals)
     s=arg(1); v=arg(2)
     if arg(3,"E") then _ini.s.v=arg(3)
    return _ini.s.v

    _undef: procedure expose (globals)
     if arg(1)="##UNDEF##" then return 1; else return 0

/** _random_pwd v.3 **/
    _random_pwd: procedure expose (globals)
     if arg(1,"E") then w=arg(1); else w=6
     if arg(2,"E") then n=arg(2); else n=4
     if n=0 then set.0=arg(3)
     set.1="1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.2="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
     set.3="1234567890abcdefghijklmnopqrstuvwxyz"
     set.4="34679abcdefghijkmnopqrstuvwxyzACDEFGHJKLMNPQRTUVWXY"
     set.5="abcdefghijklmnopqrstuvwxyz"
     set.6="bcdfghjklmnpqrstvwxz"
     set.7="aeiouy"
     set.8="BCDFGHJKLMNPQRSTVWXZ"
     set.9="AEIOUY"
     set.10="1234567890"
     rslt=""
     len=length(set.n)
     do i=1 to w
      ch=substr(set.n,random(1,len),1)
      rslt=rslt||ch
     end /*do*/
    return rslt

/** _synchronize v.5 **/
    _synchronize: procedure expose (globals)

     if arg(1,"E") then checkcitprompts=arg(1); else checkcitprompts=1

     synchw=_synchronize_vars("w")
     synchr=_synchronize_vars("r")

     call zocsend "&&"
     ans=_waitmux("&&|Pausing is")
     select
      when ans=0 then return "unknown_text_entry"
      when ans=1 then nop
      when ans=640 then return "timeout"
      otherwise nop
     end /*select*/

     ans=_waitmux(synchw)
     select
      when ans=640 then rslt="timeout"
      when ans>0 then do
       if _wait("Pausing is")=640 then call _error "timeout"
      end /*when*/
      otherwise nop
     end /*select*/
     rslt=_dword(synchr,ans+1,";")

     select
      when \checkcitprompts then nop
      when rslt="computer" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then nop
        when ans=1 then rslt="computer_cit"
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
       call zocsend "c"
      end /*when*/
      when rslt="corporate" then do
       call zocsend "q"
       ans=_waitmux("Command [|Citadel command")
       select
        when ans=0 then call zocsend "t"
        when ans=1 then do
         rslt="corporate_cit"
         call zocsend "x"
        end /*when*/
        when ans=640 then call _error "timeout"
        otherwise nop
       end /*select*/
      end /*when*/
      otherwise nop
     end /*select*/

    return rslt

/** _mapinit v.5 **/
    _mapinit: procedure expose (globals)
     fname=arg(1)
     if arg(2,"E") then m=arg(2); else m=0
     select
      when m=0 then nop
      when m=1 then drop _p. _s. _dist. _path. _dtomsl. _dfrmsl. _bg. _bd. _nwt. _nwi. _nwo. _nw. _od. _sv. _pv.
      otherwise nop
     end /*select*/
     if _f.0="_F.0" then _f.=0
     if _l.0="_L.0" then _l.=0
     if _m.0="_M.0" then _m.=0
     if _s.0="_S.0" then _s.=""
     if _p.0="_P.0" then _p.=""
     if _dist.0.0="_DIST.0.0" then _dist.=255
     if _path.0.0="_PATH.0.0" then _path.=""
     if _dtomsl.0="_DTOMSL.0" then _dtomsl.=255
     if _dfrmsl.0="_DFRMSL.0" then _dfrmsl.=255
     if _bg.0="_BG.0" then _bg.=0
     if _bd.0="_BD.0" then _bd.=0 /* bubble door, results from _mapbubbles */
     if _nwt.0="_NWT.0" then _nwt.=0
     if _nwi.0="_NWI.0" then _nwi.=0
     if _nwo.0="_NWO.0" then _nwo.=0
     if _nw.0="_NW.0" then _nw.=0
     if _od.0="_OD.0" then _od.=0
     if _sv.0="_SV.0" then _sv.=0
     if _pv.0="_PV.0" then _pv.=0
     if _sl.0="_SL.0" then _sl.=0
     if _ex.0="_EX.0" then _ex.=0
     if _v.0="_V.0" then _v.=0
     if _vs.0="_VS.0" then _vs.=0
     if _vn.0="_VN.0" then _vn.="(na)"
     if \_fileopenr(fname) then call _error "unable to open map file: "||fname
     recordlen=c2d(charin(fname))
    return recordlen

/** _getfigs v.15 **/
    _getfigs: procedure expose (globals)
     fname=arg(1)
     mode=arg(2)
     report=arg(3)
     _f.=0
     c=0
     if lower(mode)="file" then parse value _figs_load(fname) with c m
     else do
      parse value _figs_get(fname) with c m cf pf df of tf tot dif
      call _figs_save fname, m
     end /*else*/
    select
     when report=0 then return c
     when report=1 then return c cf pf df of tf tot dif
     otherwise return c
    end /*select*/

/** _getvoids v.8 **/
    _getvoids: procedure expose (globals)
     vname=arg(1)
     mode=arg(2)
     _v.=0
     c=0
     if lower(mode)="file" then parse value _voids_load(vname) with c m
     else do
      parse value _voids_get() with c m
      call _voids_save vname, m
     end /*else*/
    return c

/** _getviews v.1 **/
    _getviews: procedure expose (globals)
     if \arg(1,"E") then call _error "missing parameter in _getviews"
     fname=arg(1)
     _vs.=0
     _vn.="(na)"
     _vi.=""
     c=0
     if _fileopenr(fname) then do
      call zocwrite _ansi("clearline;bt;fwh")||"reading views... "
      do while \_fileeof(fname)
       line=linein(fname)
       if line\="" then do
        parse var line vs . s . note . . . . info
        _vs.s=vs
        _vn.s=note
        _vi.s=info
        c=c+1
       end /*if*/
      end /*do*/
      call _fileclose(fname)
      call zocwrite _ansi("clearline;bt;fwh")||c||" views read. "
     end /*if*/
    return c

/** _get_planet_number v.2 **/
    _get_planet_number: procedure expose (globals)
     if arg(1,"E") then prompt=arg(1)
                   else prompt=_synchronize()
     select
      when prompt="citadel" then do
       if _sendwait("qd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("c","Citadel command (?=help)")=640 then call _error "timeout"
      end /*when*/
      when prompt="computer_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cc","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="corporate_cit" then do
       if _sendwait("qqd","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
       if _sendwait("cx","Computer command [")=640 then call _error "timeout"
      end /*when*/
      when prompt="planet" then do
       if _sendwait("d","Planet #")=640 then call _error "timeout"
       parse value _grabit("in sector") with planet " in sector"
      end /*when*/
      otherwise planet=0
     end /*select*/
    return planet

/** _drequestlisti v.2 **/
    _drequestlisti: procedure expose (globals)
     do i=1 to 3
      if \arg(i,"E") then call _error "missing parameter in _drequestlisti"
     end /*do*/
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     if i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
                                else rslt=i+1
    return rslt

/** _newline v.3 **/
    _newline: procedure expose (globals)
     if zocgetinfo("CURSOR-X")>0 then call zocwriteln
     if arg(1,"E") then call zocwrite arg(1)
    return

/** _ansi v.3 **/
    _ansi: procedure expose (globals)
     rslt="0"
     pre=""
     do i=1 to _dwords(arg(1),";")
      w=_dword(arg(1),i,";")
      select
       when w="clearline" then pre=pre||"^[[100D^[[K"
       when w="dl"  then rslt=rslt||";"||0  /* dull               */
       when w="bt"  then rslt=rslt||";"||1  /* bright             */
       when w="ul"  then rslt=rslt||";"||4  /* underlined         */
       when w="blk" then rslt=rslt||";"||5  /* blinking           */
       when w="fbk" then rslt=rslt||";"||30 /* black foreground   */
       when w="frd" then rslt=rslt||";"||31 /* red foreground     */
       when w="fgr" then rslt=rslt||";"||32 /* green foreground   */
       when w="fye" then rslt=rslt||";"||33 /* yellow foreground  */
       when w="fbl" then rslt=rslt||";"||34 /* blue foreground    */
       when w="fmg" then rslt=rslt||";"||35 /* magenta foreground */
       when w="fcy" then rslt=rslt||";"||36 /* cyan foreground    */
       when w="fwh" then rslt=rslt||";"||37 /* white foreground   */
       when w="bbk" then rslt=rslt||";"||40 /* black background   */
       when w="brd" then rslt=rslt||";"||41 /* red background     */
       when w="bgr" then rslt=rslt||";"||42 /* green background   */
       when w="bye" then rslt=rslt||";"||43 /* yellow background  */
       when w="bbl" then rslt=rslt||";"||44 /* blue background    */
       when w="bmg" then rslt=rslt||";"||45 /* magenta background */
       when w="bcy" then rslt=rslt||";"||46 /* cyan background    */
       when w="bwh" then rslt=rslt||";"||47 /* white background   */
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=pre||"^[["||rslt||"m"
    return rslt

/** _askstr v.1 **/
    _askstr: procedure expose (globals)
     do i=1 to 3
      select
       when i=1 & arg(i,"E") then msg=arg(i)
       when i=1              then msg="enter an string:"
       when i=2 & arg(i,"E") then default=arg(i)
       when i=2              then default=""
       when i=3 & arg(i,"E") then cflag=min(verify(lower(arg(i)),"c","M"),1)
       when i=3              then cflag=0
       otherwise nop
      end /*select*/
     end /*do*/
     rslt=zocask(msg, default)
     if cflag & rslt="##CANCEL##" then call _quit "script cancelled by user.", "nocopy"
    return rslt

/** _getinfo v.6 **/
    _getinfo: procedure expose (globals)
     args=lower(arg(1))
     bufflen=32*1024

     /* grab a buffer of text containing the quickstats and strip lf/nul */
     call zocreceivebuf bufflen
     call zocsend "/"
     if _wait("Sect ")=640 then call _error "timeout"
     if _wait("Ship ")=640 then call _error "timeout"
     if _wait("^M")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)>=bufflen then call zocwrite "<buffer overflow>"

     /* reduce buffer to just the quickstats info and change bars to semicolons */
     i=pos("Sect ",buff)
     j=pos("Ship",buff,i)
     j=pos(d2c(13),buff,j)
     buff=substr(buff,i,j-i)
     buff=_space(translate(buff, ";", d2c(179)),1)

     /* strip commas from numbers */
     buff=translate(_space(translate(buff,", "," ,"),0),", "," ,")

     /* remove newlines, strip spaces, and condense to semi-delimited string */
     cr=d2c(13)
     buff2=strip(_dword(buff,1,cr))
     do i=2 to _dwords(buff,cr)
      buff2=buff2||";"||strip(_dword(buff,i,cr))
     end
     buff=buff2
     drop buff2

     /* analyze buffer */
     vr.=""
     vl.=""
     c=0
     do j=1 to _dwords(buff,";")
      c=c+1
      vr.c=strip(_dword(buff,j,";"))
      vl.c=word(vr.c,2)
      vr.c=lower(word(vr.c,1))
      if vr.c="ship" then do
       c=c+1
       vr.c=strip(_dword(buff,j,";"))
       vl.c=word(vr.c,3)
       vr.c="shiptype"
      end /*if*/
     end /*do*/
     c=c+1
     vr.c="all"
     vl.c=buff

     /* set global vars */
     _qs.!corp=0
     do i=1 to c
      tag="!"||upper(vr.i)
      _qs.tag=vl.i
     end /*do*/

     /* pass out requested stats */
     rslt=""
     do i=1 to _dwords(args,";")
      found=0
      do j=1 to c
       if vr.j=_dword(args,i,";") then do
        rslt=rslt||";"||vl.j
        found=1
       end /*if*/
      end /*do*/
      if \found then rslt=rslt||";"||"##NA##"
     end /*do*/
     if rslt\="" then rslt=substr(rslt,2)

    return rslt

/** _yesno v.3 **/
    _yesno: procedure expose (globals)
     if arg(1,"E") then msg=arg(1)
     else msg="yes or no"
     if arg(2)="yn" then rslt=zocrequest(msg||" (ESC=no)", "yes", "no")
                    else rslt=zocrequest(msg, "yes", "no", "cancel")
     select
      when rslt="cancel" then call _quit "script cancelled by user.", "nocopy"
      when rslt="##CANCEL##" & arg(2)\="yn" then call _quit "script cancelled by user.", "nocopy"
      when rslt="yes" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _quit v.7 **/
    _quit: procedure expose (globals)
     lcpy=1
     arg1=""
     do i=1 to 2 /* manage arguments */
      select
       when arg(i,"E") & lower(arg(i))="nocopy" then lcpy=0
       when arg(i,"E") & arg1="" then arg1=arg(i)
       otherwise nop
      end /*select*/
     end /*do*/
     line=zocgetscreen(0, zocgetinfo("CURSOR-Y"), zocgetinfo("CURSOR-X"))
     select /* define message */
      when  lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m^M^J"||line
      when \lcpy & arg1="" then msg="^[[1;32m< end script >^[[0m "
      when  lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m^M^J"||line
      when \lcpy           then msg="^[[1;32m^M^J< end script: "||arg1||" >^[[0m "
      otherwise nop
     end /*select*/
     call zocwrite msg
     select /* choose a beep */
      when lower(arg1)="script cancelled by user." then call _beep "cancel.wav"
      otherwise call _beep "quit.wav"
     end /*select*/
     exit
    return 1

/** _mapdist v.2 **/
    _mapdist: procedure expose (globals)
     start=arg(1)
     finish=arg(2)
     mapname=arg(3)
     recordlen=arg(4)
     reverse=arg(5)
     if reverse="" then reverse=0
     maxdist=arg(6)
     if maxdist="" | maxdist<1 then maxdist=255

     call _mapseek mapname, recordlen, start
     _dist.start.start=0
     _path.start.start=start

     /* initialize arrays */
     inqueue.=0
     queue.=""
     queue.1=start
     inqueue.start=1
     tail=1
     do i=1 to words(_s.start)
      code=word(_s.start,i)
      warptype=code%20000
      sector=code//20000
      if (warptype<2 & \reverse) | (warptype>0 & reverse) then do
       tail=tail+1
       queue.tail=sector
       inqueue.sector=1
      end /*if*/
     end /*do*/
     head=2

     done=0
     do while \done & tail>=head

      current=queue.head
      call _mapseek mapname, recordlen, current

      do i=1 to words(_s.current)

       code=word(_s.current,i)
       warptype=code%20000
       adjacent=code//20000

       /* if adjacent not in queue, then add to tail */
       if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & \inqueue.adjacent then do
        tail=tail+1
        queue.tail=adjacent
        inqueue.adjacent=1
       end /*if*/

       /* assign shortest warp distance */
       if warptype>0 & \reverse then do
        tdist=_dist.start.current
        _dist.start.current=min(_dist.start.current,_dist.start.adjacent+1)
        if tdist>_dist.start.current then _path.start.current=_path.start.adjacent||";"||current
       end /*if*/

       if warptype<2 & reverse then do
        tdist=_dist.current.start
        _dist.current.start=min(_dist.current.start,_dist.adjacent.start+1)
        if tdist>_dist.current.start then _path.current.start=current||";"||_path.adjacent.start
       end /*if*/

      end /*do*/

      /* have we found the destination? */
      select
       when current=finish then done=1
       when _dist.start.current>maxdist & \reverse then done=1
       when _dist.current.start>maxdist & reverse then done=1
       when head=tail then done=1
       otherwise head=head+1
      end /*select*/

     end /*do*/

    return _dist.start.finish

/** _lastline v.3 **/
    _lastline: procedure expose (globals)
     rslt=zoclastline()
     select
      when lower(arg(1))="raw" then nop
      when pos(d2c(7),rslt)>0  then rslt=translate(zocstring("REMOVE", rslt, d2c(7)),"  ",d2c(0)||d2c(10))
      otherwise                     rslt=translate(rslt,"  ",d2c(0)||d2c(10))
     end /*select*/
    return rslt

/** _mapfind v.6 **/
    _mapfind: procedure expose (globals)
     start=arg(1)
     searchstring=arg(2)
     mapname=arg(3)
     recordlen=arg(4)
     maxdist=255; mindist=1
     select
      when arg(5,"E") & arg(6,"E") then do
       mindist=min(max(_stripint(arg(5)),1),255)
       maxdist=max(min(_stripint(arg(6)),255),1)
      end /*when*/
      when arg(6,"E") then maxdist=max(min(_stripint(arg(6)),255),1)
      when arg(5,"E") then maxdist=max(min(_stripint(arg(5)),255),1)
      otherwise nop
     end /*select*/
     if arg(7,"E") then useexclusions=arg(7); else useexclusions=1
     if arg(8,"E") then matchcount=arg(8); else matchcount=1

     usevoids=0
     reverse=0
     secnum=-1
     void=-1
     busted=-1
     figs=-1
     expl=-1
     list=-1
     pvis=-1
     deadend=-1
     bubble=-1
     tomsl=-1; frmsl=-1
     ptype=-1
     pore=-1;  porg=-1;  pequ=-1
     ppore=-1; pporg=-1; ppequ=-1
     viewed=-1
     /* parse search string */
     do i=1 to _dwords(searchstring,";")
      criteria=_dword(searchstring,i,";")
      tag=_dword(criteria,1,":")
      val=_dword(criteria,2,":")
      select
       when tag="mx"  then maxdist=val
       when tag="mn"  then mindist=val
       when tag="ue"  then useexclusions=val
       when tag="mc"  then matchcount=val
       when tag="r"   then reverse=val
       when tag="s"   then secnum=val
       when tag="uv"  then usevoids=val
       when tag="v"   then void=val
       when tag="f"   then figs=val
       when tag="e"   then expl=val
       when tag="sl"  then list=val
       when tag="pt"  then ptype=lower(val)
       when tag="p1"  then pore=val
       when tag="p2"  then porg=val
       when tag="p3"  then pequ=val
       when tag="pp1" then ppore=val
       when tag="pp2" then pporg=val
       when tag="pp3" then ppequ=val
       when tag="pv"  then pvis=val
       when tag="pb"  then busted=val
       when tag="d"   then deadend=val
       when tag="b"   then bubble=val
       when tag="tm"  then tomsl=val
       when tag="fm"  then frmsl=val
       when tag="vw"  then viewed=val
       when tag="nw"  then nw=val
       when tag="nwo" then nwo=val
       when tag="nw0" then nw0=val
       when tag="nw1" then nw1=val
       when tag="nw2" then nw2=val
       otherwise nop
      end /*select*/
     end /*do*/

     call _mapseek mapname, recordlen, start
     _dist.start.start=0
     _path.start.start=start

     /* initialize arrays */
     inqueue.=0
     queue.=""
     queue.1=start
     inqueue.start=1
     tail=1
     do i=1 to words(_s.start)
      code=word(_s.start,i)
      warptype=code%20000
      sector=code//20000
      if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & (usevoids\=1 | \_v.sector) then do
       tail=tail+1
       queue.tail=sector
       inqueue.sector=1
      end /*if*/
     end /*do*/

     rslt=""
     current=start
     head=1
     found=0
     do while tail>=head

      /* have we found the destination? */
      select
       when _dist.start.current>maxdist & \reverse then do; found=0; leave; end
       when _dist.current.start>maxdist &  reverse then do; found=0; leave; end
       when found then do
        rslt=rslt current
        if words(rslt)=matchcount | head=tail then leave
        found=0
        head=head+1
       end /*when*/
       when head=tail then leave
       otherwise head=head+1
      end /*select*/

      current=queue.head
      call _mapseek mapname, recordlen, current

      do i=1 to words(_s.current)

       adjacent=word(_s.current.!num,i)
       warptype=word(_s.current.!wt,i)

       /* add to tail */
       if ((warptype<2 & \reverse) | (warptype>0 & reverse)) & (usevoids\=1 | \_v.adjacent) & \inqueue.adjacent then do
        tail=tail+1
        queue.tail=adjacent
        inqueue.adjacent=1
       end /*if*/

       /* assign shortest warp distance */
       if warptype>0 & \reverse then do
        tdist=_dist.start.current
        _dist.start.current=min(_dist.start.current,_dist.start.adjacent+1)
        if tdist>_dist.start.current then _path.start.current=_path.start.adjacent||";"||current
       end /*if*/

       if warptype<2 & reverse then do
        tdist=_dist.current.start
        _dist.current.start=min(_dist.current.start,_dist.adjacent.start+1)
        if tdist>_dist.current.start then _path.current.start=current||";"||_path.adjacent.start
       end /*if*/

      end /*do*/

      /* evaluate the criteria */
      found=1

      if _dist.start.current<mindist & \reverse then do; found=0; iterate; end
      if _dist.current.start<mindist &  reverse then do; found=0; iterate; end
      if useexclusions & _ex.current            then do; found=0; iterate; end
      if secnum\=-1  & secnum\=current          then do; found=0; iterate; end
      if void\=-1    & void=\_v.current         then do; found=0; iterate; end
      if figs\=-1    & figs=\_f.current         then do; found=0; iterate; end
      if expl\=-1    & expl=\_sv.current        then do; found=0; iterate; end
      if list\=-1    & list=\_sl.current        then do; found=0; iterate; end
      if pvis\=-1    & pvis=\_pv.current        then do; found=0; iterate; end
      if deadend\=-1 & deadend=\_od.current     then do; found=0; iterate; end

      bstamp=_iniv("!bust", "!"||current)
      if busted\=-1  & ((busted=1 & _undef(bstamp)) | (busted=0 & \_undef(bstamp))) then do; found=0; iterate; end

      if bubble\=-1 then do
       if bubble & _bg.current=0 then do; found=0; iterate; end
       if \bubble & _bg.current\=0 then do; found=0; iterate; end
      end /*if*/

      if viewed\=-1 then do
       select
        when left(viewed,2)="<=" & _vs.current>substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)="<=" then nop
        when left(viewed,2)=">=" & _vs.current<substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)=">=" then nop
        when left(viewed,2)="\=" & _vs.current=substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)="\=" then nop
        when left(viewed,2)="<>" & _vs.current=substr(viewed,3)  then do; found=0; iterate; end
        when left(viewed,2)="<>" then nop
        when left(viewed,1)="<"  & _vs.current>=substr(viewed,2) then do; found=0; iterate; end
        when left(viewed,1)=">"  & _vs.current<=substr(viewed,2) then do; found=0; iterate; end
        when left(viewed,1)="="  & _vs.current\=substr(viewed,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if tomsl\=-1 then do
       select
        when left(tomsl,2)="<=" & _dtomsl.current>substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)="<=" then nop
        when left(tomsl,2)=">=" & _dtomsl.current<substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)=">=" then nop
        when left(tomsl,2)="\=" & _dtomsl.current=substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)="\=" then nop
        when left(tomsl,2)="<>" & _dtomsl.current=substr(tomsl,3)  then do; found=0; iterate; end
        when left(tomsl,2)="<>" then nop
        when left(tomsl,1)="<"  & _dtomsl.current>=substr(tomsl,2) then do; found=0; iterate; end
        when left(tomsl,1)=">"  & _dtomsl.current<=substr(tomsl,2) then do; found=0; iterate; end
        when left(tomsl,1)="="  & _dtomsl.current\=substr(tomsl,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if frmsl\=-1 then do
       select
        when left(frmsl,2)="<=" & _dfrmsl.current>substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)="<=" then nop
        when left(frmsl,2)=">=" & _dfrmsl.current<substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)=">=" then nop
        when left(frmsl,2)="\=" & _dfrmsl.current=substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)="\=" then nop
        when left(frmsl,2)="<>" & _dfrmsl.current=substr(frmsl,3)  then do; found=0; iterate; end
        when left(frmsl,2)="<>" then nop
        when left(frmsl,1)="<"  & _dfrmsl.current>=substr(frmsl,2) then do; found=0; iterate; end
        when left(frmsl,1)=">"  & _dfrmsl.current<=substr(frmsl,2) then do; found=0; iterate; end
        when left(frmsl,1)="="  & _dfrmsl.current\=substr(frmsl,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if (ptype\=-1 | pore\=-1 | porg\=-1 | pequ\=-1) then cptype=_dword(_p.current,1,";")

      if ptype\=-1 then do
       select
        when ptype=0 & cptype\="" then do; found=0; iterate; end
        when ptype=0 then nop
        when ptype=1 & cptype="" then do; found=0; iterate; end
        when ptype=1 then nop
        when \_portmatch(cptype,ptype) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if pore\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cpore=_dword(_dword(_p.current,2,";"),1,",")
        select
         when left(pore,2)="<=" & cpore>substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)="<=" then nop
         when left(pore,2)=">=" & cpore<substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)=">=" then nop
         when left(pore,2)="\=" & cpore=substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)="\=" then nop
         when left(pore,2)="<>" & cpore=substr(pore,3)  then do; found=0; iterate; end
         when left(pore,2)="<>" then nop
         when left(pore,1)="<"  & cpore>=substr(pore,2) then do; found=0; iterate; end
         when left(pore,1)=">"  & cpore<=substr(pore,2) then do; found=0; iterate; end
         when left(pore,1)="="  & cpore\=substr(pore,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if porg\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cporg=_dword(_dword(_p.current,3,";"),1,",")
        select
         when left(porg,2)="<=" & cporg>substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)="<=" then nop
         when left(porg,2)=">=" & cporg<substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)=">=" then nop
         when left(porg,2)="\=" & cporg=substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)="\=" then nop
         when left(porg,2)="<>" & cporg=substr(porg,3)  then do; found=0; iterate; end
         when left(porg,2)="<>" then nop
         when left(porg,1)="<"  & cporg>=substr(porg,2) then do; found=0; iterate; end
         when left(porg,1)=">"  & cporg<=substr(porg,2) then do; found=0; iterate; end
         when left(porg,1)="="  & cporg\=substr(porg,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if pequ\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cpequ=_dword(_dword(_p.current,4,";"),1,",")
        select
         when left(pequ,2)="<=" & cpequ>substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)="<=" then nop
         when left(pequ,2)=">=" & cpequ<substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)=">=" then nop
         when left(pequ,2)="\=" & cpequ=substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)="\=" then nop
         when left(pequ,2)="<>" & cpequ=substr(pequ,3)  then do; found=0; iterate; end
         when left(pequ,2)="<>" then nop
         when left(pequ,1)="<"  & cpequ>=substr(pequ,2) then do; found=0; iterate; end
         when left(pequ,1)=">"  & cpequ<=substr(pequ,2) then do; found=0; iterate; end
         when left(pequ,1)="="  & cpequ\=substr(pequ,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if ppore\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cppore=_dword(_dword(_p.current,2,";"),2,",")
        select
         when left(ppore,2)="<=" & cppore>substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)="<=" then nop
         when left(ppore,2)=">=" & cppore<substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)=">=" then nop
         when left(ppore,2)="\=" & cppore=substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)="\=" then nop
         when left(ppore,2)="<>" & cppore=substr(ppore,3)  then do; found=0; iterate; end
         when left(ppore,2)="<>" then nop
         when left(ppore,1)="<"  & cppore>=substr(ppore,2) then do; found=0; iterate; end
         when left(ppore,1)=">"  & cppore<=substr(ppore,2) then do; found=0; iterate; end
         when left(ppore,1)="="  & cppore\=substr(ppore,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if pporg\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cpporg=_dword(_dword(_p.current,3,";"),2,",")
        select
         when left(pporg,2)="<=" & cpporg>substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)="<=" then nop
         when left(pporg,2)=">=" & cpporg<substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)=">=" then nop
         when left(pporg,2)="\=" & cpporg=substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)="\=" then nop
         when left(pporg,2)="<>" & cpporg=substr(pporg,3)  then do; found=0; iterate; end
         when left(pporg,2)="<>" then nop
         when left(pporg,1)="<"  & cpporg>=substr(pporg,2) then do; found=0; iterate; end
         when left(pporg,1)=">"  & cpporg<=substr(pporg,2) then do; found=0; iterate; end
         when left(pporg,1)="="  & cpporg\=substr(pporg,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if ppequ\=-1 then do
       if cptype="" then do; found=0; iterate; end
       else do
        cppequ=_dword(_dword(_p.current,4,";"),2,",")
        select
         when left(ppequ,2)="<=" & cppequ>substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)="<=" then nop
         when left(ppequ,2)=">=" & cppequ<substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)=">=" then nop
         when left(ppequ,2)="\=" & cppequ=substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)="\=" then nop
         when left(ppequ,2)="<>" & cppequ=substr(ppequ,3)  then do; found=0; iterate; end
         when left(ppequ,2)="<>" then nop
         when left(ppequ,1)="<"  & cppequ>=substr(ppequ,2) then do; found=0; iterate; end
         when left(ppequ,1)=">"  & cppequ<=substr(ppequ,2) then do; found=0; iterate; end
         when left(ppequ,1)="="  & cppequ\=substr(ppequ,2) then do; found=0; iterate; end
         otherwise nop
        end /*select*/
       end /*else*/
      end /*if*/

      if nw\=-1 then do
       select
        when left(nw,2)="<=" & _nw.current>substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)="<=" then nop
        when left(nw,2)=">=" & _nw.current<substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)=">=" then nop
        when left(nw,2)="\=" & _nw.current=substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)="\=" then nop
        when left(nw,2)="<>" & _nw.current=substr(nw,3)  then do; found=0; iterate; end
        when left(nw,2)="<>" then nop
        when left(nw,1)="<"  & _nw.current>=substr(nw,2) then do; found=0; iterate; end
        when left(nw,1)=">"  & _nw.current<=substr(nw,2) then do; found=0; iterate; end
        when left(nw,1)="="  & _nw.current\=substr(nw,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nwo\=-1 then do
       select
        when left(nwo,2)="<=" & _nwo.current>substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)="<=" then nop
        when left(nwo,2)=">=" & _nwo.current<substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)=">=" then nop
        when left(nwo,2)="\=" & _nwo.current=substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)="\=" then nop
        when left(nwo,2)="<>" & _nwo.current=substr(nwo,3)  then do; found=0; iterate; end
        when left(nwo,2)="<>" then nop
        when left(nwo,1)="<"  & _nwo.current>=substr(nwo,2) then do; found=0; iterate; end
        when left(nwo,1)=">"  & _nwo.current<=substr(nwo,2) then do; found=0; iterate; end
        when left(nwo,1)="="  & _nwo.current\=substr(nwo,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nw0\=-1 then do
       select
        when left(nw0,2)="<=" & _nwt.current.0>substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)="<=" then nop
        when left(nw0,2)=">=" & _nwt.current.0<substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)=">=" then nop
        when left(nw0,2)="\=" & _nwt.current.0=substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)="\=" then nop
        when left(nw0,2)="<>" & _nwt.current.0=substr(nw0,3)  then do; found=0; iterate; end
        when left(nw0,2)="<>" then nop
        when left(nw0,1)="<"  & _nwt.current.0>=substr(nw0,2) then do; found=0; iterate; end
        when left(nw0,1)=">"  & _nwt.current.0<=substr(nw0,2) then do; found=0; iterate; end
        when left(nw0,1)="="  & _nwt.current.0\=substr(nw0,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nw1\=-1 then do
       select
        when left(nw1,2)="<=" & _nwt.current.1>substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)="<=" then nop
        when left(nw1,2)=">=" & _nwt.current.1<substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)=">=" then nop
        when left(nw1,2)="\=" & _nwt.current.1=substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)="\=" then nop
        when left(nw1,2)="<>" & _nwt.current.1=substr(nw1,3)  then do; found=0; iterate; end
        when left(nw1,2)="<>" then nop
        when left(nw1,1)="<"  & _nwt.current.1>=substr(nw1,2) then do; found=0; iterate; end
        when left(nw1,1)=">"  & _nwt.current.1<=substr(nw1,2) then do; found=0; iterate; end
        when left(nw1,1)="="  & _nwt.current.1\=substr(nw1,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

      if nw2\=-1 then do
       select
        when left(nw2,2)="<=" & _nwt.current.2>substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)="<=" then nop
        when left(nw2,2)=">=" & _nwt.current.2<substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)=">=" then nop
        when left(nw2,2)="\=" & _nwt.current.2=substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)="\=" then nop
        when left(nw2,2)="<>" & _nwt.current.2=substr(nw2,3)  then do; found=0; iterate; end
        when left(nw2,2)="<>" then nop
        when left(nw2,1)="<"  & _nwt.current.2>=substr(nw2,2) then do; found=0; iterate; end
        when left(nw2,1)=">"  & _nwt.current.2<=substr(nw2,2) then do; found=0; iterate; end
        when left(nw2,1)="="  & _nwt.current.2\=substr(nw2,2) then do; found=0; iterate; end
        otherwise nop
       end /*select*/
      end /*if*/

     end /*do*/

     rslt=strip(rslt)
     if rslt="" then rslt=0

    return rslt

/** _listinstr v.3 **/
    _listinstr: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _listinstr"
     abbrlist=arg(1)
     archetype=arg(2)
     if arg(3,"E") then mode=arg(3)
     else mode=""
     if arg(4,"E") then delim=left(arg(4),1)
     else delim=";"
     if mode\="cs" then do
      abbrlist=lower(abbrlist)
      archetype=lower(archetype)
     end /*if*/
     rslt=0
     if archetype="" then rslt=1
     else do
      do i=1 to _dwords(abbrlist,delim)
       if pos(_dword(abbrlist,i,delim), archetype)>0 then do
        rslt=1
        leave
       end /*if*/
      end /*do*/
     end /*else*/
    return rslt

/** _stripint v.4 **/
    _stripint: procedure expose (globals)
     mask=_space(translate(arg(1)," ","-0123456789,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripint"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if length(rslt)>9 then rslt=left(rslt,9)
      rslt=neg||rslt
     end /*else*/
    return rslt

/** _mapseek v.4 **/
    _mapseek: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") | \arg(3,"E") then call _error "missing parameter in _mapseek"
     fname=arg(1)
     recordlen=arg(2)
     sector=arg(3)

     if _s.sector="_S."||sector then _s.=""
     if _s.sector="" then do

      call stream fname, "C", "SEEK "||(sector-1)*recordlen+2

      vis=0
      one=0
      prt=0
      pvis=0
      bore=0
      borg=0
      bequ=0
      flags=c2d(charin(fname))
      if flags%128=1 then do
       bequ=1
       flags=flags-128
      end /*if*/
      if flags%64=1 then do
       borg=1
       flags=flags-64
      end /*if*/
      if flags%32=1 then do
       bore=1
       flags=flags-32
      end /*if*/
      if flags%16=1 then do
       _pv.sector=1
       flags=flags-16
      end /*if*/
      if flags%8=1 then do
       prt=1
       flags=flags-8
      end /*if*/
      if flags%4=1 then flags=flags-4
      if flags%2=1 then do
       _od.sector=1
       flags=flags-2
      end /*if*/
      if flags%1=1 then do
       _sv.sector=1
       flags=flags-1
      end /*if*/

      if prt & _undef(_iniv(!port_kills,"!"||sector)) then do
       _p.sector=word("S B",bore+1)||word("S B",borg+1)||word("S B",bequ+1)
       _p.sector.!type=_p.sector
       do i=1 to 3
        ms1=charin(fname)
        ms2=charin(fname)
        ms3=charin(fname)
        quan=c2d(ms1)+c2d(ms2)*256; perc=c2d(ms3)
        _p.sector=_p.sector||";"||quan||","||perc
        x1=word("!pore !porg !pequ",i); x2=word("!qore !qorg !qequ",i)
        _p.sector.x1=perc; _p.sector.x2=quan
       end /*do*/
      end /*if*/
      else do
       _p.sector=""; _p.sector.!type=""
       _p.sector.!pore=0; _p.sector.!porg=0; _p.sector.!pequ=0
       _p.sector.!qore=0; _p.sector.!qorg=0; _p.sector.!qequ=0
       call stream fname, "C", "SEEK "||1+(sector-1)*recordlen+11
      end /*else*/
      _dtomsl.sector=c2d(charin(fname))
      _dfrmsl.sector=c2d(charin(fname))
      _bg.sector=c2d(charin(fname))+c2d(charin(fname))*256
      _nwi.sector=c2d(charin(fname))

      ms1=c2d(charin(fname))+c2d(charin(fname))*256
      if ms1=0 then _s.sector=""
      else do
       _s.sector=ms1
       _nw.sector=1
       wt=ms1%20000
       _s.sector.!num=ms1//20000
       _s.sector.!wt=wt
       _nwt.sector.wt=_nwt.sector.wt+1
       do i=1 to ((recordlen-15)%2-1)
        ms1=c2d(charin(fname))+c2d(charin(fname))*256
        if ms1>0 then do
         _s.sector=_s.sector ms1
         _nw.sector=_nw.sector+1
         wt=ms1%20000
         _s.sector.!num=_s.sector.!num ms1//20000
         _s.sector.!wt=_s.sector.!wt wt
         _nwt.sector.wt=_nwt.sector.wt+1
        end /*if*/
       end /*do*/
      end /*else*/

      _nwo.sector=_nwt.sector.1 + _nwt.sector.0
     end /*if*/
    return

/** _domacro v.4 **/
    _domacro: procedure expose (globals)
     list=arg(1)
     n=_dwords(list,"}")
     a=""
     mux=0
     rslt=0
     leav=0
     do i=1 to n
      parse value _dword(list,i,"}") with c "{" s
      if c="s" then do
       s=_dword(s,mux+1,"|")
       if pos("_x",s)>0 then do
        s=zocstring("REMOVE",s,"_x")
        rslt=1
       end /*if*/
       if pos("_c",s)>0 then do
        s=zocstring("REMOVE",s,"_c")
        leav=1
       end /*if*/
      end /*if*/
      c=strip(lower(c))
      select
       when c="s" & a\="" then do
        call zocconnect a
        do while \_isonline(15)
         call zocdisconnect
         call zocconnect a
        end /*do*/
        call zocsend s
        mux=0
        a=""
       end /*when*/
       when c="s" then do
        call zocsend s
        mux=0
       end /*when*/
       when c="w" & a\="" then do
        call zocconnect a
        do while _wait(s)=640
         call zocdisconnect
         call zocconnect a
        end /*do*/
        a=""
       end /*when*/
       when c="w" then if _wait(s)=640 then call _error "timeout"
       when c="m" then do
        mux=_waitmux(s)
        if mux=640 then call _error "timeout"
       end /*when*/
       when c="b" then call zocbeep s
       when c="p" then call zocdelay abs(_stripint(s)/1000)
       when c="d" then call zocdisconnect
       when c="l" | c="c" then a=s
       when c="r" & s="" then nop
       when c="r" then do
        if _fileexists(s) then do; call zocdostring "^RUN="||s; exit; end
       end /*when*/
       otherwise nop
      end /*select*/
      if rslt then leave
      if leav then leave
     end /*do*/
    return rslt

/** _pad v.3 **/
    _pad: procedure expose (globals)
     rslt=arg(1)
     if arg(2,"E") then w=arg(2); else return rslt
     if \arg(3,"E") then m="l"; else m=lower(arg(3))
     if \arg(4,"E") then p=" "; else p=left(arg(4),1)
     select
      when m="l" then rslt=left(rslt,w,p)
      when m="r" then rslt=reverse(left(reverse(rslt),w,p))
      when m="c" then rslt=center(rslt,w,p)
      otherwise       rslt=left(rslt,w,p)
     end /*select*/
    return rslt

/** _get_corpie_ta v.1 **/
    _get_corpie_ta: procedure expose (globals)
     name=arg(1)
     if _sendwait("a","Corp Member Name")=640 then call _error "timeout"
     if _wait("-----")=640 then call _error "timeout"
     ans=_waitmux(name||"|Corporate command")
     select
      when ans=0 then do
       parse value reverse(_grabit("^M")) with . . . . rslt .
       rslt=_stripint(reverse(rslt))
      end /*when*/
      when ans=1 then rslt=0
      when ans=640 then call _error "timeout"
      otherwise nop
     end /*select*/
    return rslt

/** _debug v.5 **/
    _debug: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _debug"
     mode=strip(left(lower(arg(1)),3))
     msg=arg(2)
     if arg(3,"E") then logname=strip(arg(3))
     else logname="_debug.txt"
     select
      when mode="scr" then call zocwriteln "^[[1;34mREV-DEBUG <"||msg||">^[[0m"
      when mode="fed" then call zocsend "`REV-DEBUG <"||msg||">^M"
      when mode="sub" then call zocsend "'REV-DEBUG <"||msg||">^M"
      when mode="log" then do
       if _fileopenw(logname) then do
        call lineout logname, msg
        call _fileclose logname
       end /*if*/
       else call _error "unable to open rev-log.txt."
      end /*when*/
      otherwise nop
     end /*select*/
    return

/** _space v.1 **/
    _space: procedure expose (globals)
     str=strip(arg(1))
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then pad=arg(3); else pad=" "
     rslt=word(str,1)
     do i=2 to words(str)
      rslt=rslt||copies(pad,n)||word(str,i)
     end /*do*/
    return rslt

/** _cleanup v.1 **/
    _cleanup: procedure expose (globals)
     /* put code here to do custom cleanup
        for specific scripts and override
        it in your main program */
    return 1

/** _beep v.2 **/
    _beep: procedure expose (globals)
     if arg(2,"E") then n=arg(2); else n=1
     if arg(3,"E") then d=arg(3); else d=0
     select
      when arg(1,"O") then call zocwrite copies(d2c(7),n)
      when _fileexists(arg(1)) then do
       do i=1 to n
        call zocplaysound arg(1)
        if i\=n & d>0 then call zocdelay d
       end /*do*/
      end /*when*/
      otherwise call zocwrite copies(d2c(7),n)
     end /*select*/
    return

/** _get_log_path v.2 **/
    _get_log_path: procedure expose (globals)
     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid path in _get_log_path"
    return lpath

/** _get_script_path v.1 **/
    _get_script_path: procedure expose (globals)
     parse value zocgetglobaloption("ScriptPath") with . '="' spath '"'
     if left(zocgetinfo("VERSION"),1)>4 then spath = zocfilename("RESOLV", spath)
     spath=dosfname(spath)
     if right(spath,1)\="\" then spath=spath||"\"
     if \dosisdir(spath) then call _error "invalid path in _get_script_path"
    return spath

/** _get_download_path v.2 **/
    _get_download_path: procedure expose (globals)
     parse value zocgetglobaloption("DownloadAltPath") with . '="' dpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then dpath = zocfilename("RESOLV", dpath)
     dpath=dosfname(dpath)
     if right(dpath,1)\="\" then dpath=dpath||"\"
     if \dosisdir(dpath) then call _error "invalid path in _get_download_path"
    return dpath

/** _setgame v.6 **/
    _setgame: procedure expose (globals)

     parse value zocgetglobaloption("CapturePath") with . '="' lpath '"'
     if left(zocgetinfo("VERSION"),1)>4 then lpath = zocfilename("RESOLV", lpath)
     lpath=dosfname(lpath)
     if right(lpath,1)\="\" then lpath=lpath||"\"
     if \dosisdir(lpath) then call _error "invalid log path in _setgame"

     if arg(1,"E") then gname=arg(1)
     else do
      list=_ini_list_games(lpath)
      if c=0 then gname="CLEAR"
      else gname=_drequestlist("select a game:", list||";CLEAR", ";", "c")
     end /*if*/
     if gname="CLEAR" | gname="" then do
      gname="%ZOCORHOST% %OPTIONS%"
      call zoclogging 0, 1
      call zoclogname "zoc_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="zoc_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end/*if*/
     else do
      call zoclogging 0, 1
      call zoclogname gname||"_log_^3^2^1_^8.txt"
      call zocsetoption 'CaptDefaultName="'||gname||'_log_^3^2^1_^8.txt"'
      call zoclogging 1, 1
     end /*else*/
     call zocsetglobaloption 'WindowTitle="'||gname||'"'
    return gname

/** _fileopenr v.4 **/
    _fileopenr: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenr"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN READ"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _fileeof v.4 **/
    _fileeof: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileeof"
      when arg(1)="" then rslt=0
      otherwise rslt=\lines(arg(1))
     end /*select*/
    return rslt

    _ini_is_section: procedure expose (globals)
     s=strip(arg(1))
     if left(s,1)="[" & left(reverse(s),1)="]" then return 1
    return 0

/** _ini_format_value **/
    _ini_format_value: procedure expose (globals)
     v=arg(1)
     if _dwords(v,"=")=2 then do
      t=lower(_dword(v,1,"="))
      v=_dword(v,2,"=")
      select
       when t="i" then v=_stripint(v)
       when t="f" then v=_stripnum(v)
       when t="b" then do; v=_stripint(v); if v>0 then v=1; else v=0; end
       when t="s" then nop
       otherwise nop
      end /*select*/
     end /*if*/
    return v

/** _fileclose v.3 **/
    _fileclose: procedure expose (globals)
     if \arg(1,"E") then call _error "missing argument in _fileclose"
     select
      when arg(1)="" then nop
      otherwise call stream arg(1), "C", "CLOSE"
     end /*select*/
    return

/** _synchronize_vars v.1 **/
    _synchronize_vars: procedure expose (globals)
     select
      when arg(1)="w" then rslt="Pausing",
                              ||"|Command [",
                              ||"|Citadel command",
                              ||"|Planet command",
                              ||"|<StarDock>",
                              ||"|ship to sell",
                              ||"|Still interested ?",
                              ||"|wish to buy? (A,B,C,Q,?)",
                              ||"|<Galactic Bank>",
                              ||"|<Hardware Emporium>",
                              ||"|<Shipyards>",
                              ||"|<Tavern>",
                              ||"|Enter your choice [T] ?",
                              ||"|do you want to sell [",
                              ||"|do you want to buy [",
                              ||"|Computer command",
                              ||"|Corporate command",
                              ||"|Colonists? [T]",
                              ||"|Stop in this sector (Y,N,E,I,R,S,D,P,?) (?=Help) [N]",
                              ||"|`",
                              ||"|F: ",
                              ||"|'",
                              ||"|S: ",
                              ||"|M: ",
                              ||"|P: "
      when arg(1)="r" then rslt="unknown;command;citadel;planet;stardock;ship_sell;ship_sell_interested;class_0",
                             ||";bank;hardware;shipyards;tavern;port_menu;port_haggle;port_haggle;computer",
                             ||";corporate;terra;stop_in_this_sector?;fedcom_text_entry_1;fedcom_text_entry_2",
                             ||";subspace_text_entry_1;subspace_text_entry_2;mail_text_entry;private_text_entry",
                             ||";corporate_cit;computer_cit;unknown_text_entry" /* <-- these unmatched in the wait string above */
      when arg(1)="command" then rslt=" ; ;qq;q;q;qqq;nqq;q;qq;qq;qq;qq;q;0^Mz0^Mz0^M;0^Mz0^Mz0^M;q;q;q;y;^H;^M;^H;^M;^M;^M;qqq;qqq; "
      when arg(1)="computer" then rslt=" ;c;c;qc;qc;qqqc;nqqc;qc;qqc;qqc;qqc;qqc;qc;0^Mz0^Mz0^Mc;0^Mz0^Mz0^Mc; ;qc;qc;yc;^Hc;^Mc;^Hc;^Mc;^Mc;^Mc;qc;qc; "
      otherwise call _error "unknown argument in _synchronize_vars"
     end /*select*/
    return rslt

/** _waitmux v.1 **/
    _waitmux: procedure expose (globals)
     rslt=zocwaitmux(arg(1))
    return rslt

/** _wait v.1 **/
    _wait: procedure expose (globals)
     rslt=zocwait(arg(1))
    return rslt

/** _figs_load v.1 **/
    _figs_load: procedure expose (globals)
     infile=arg(1)
     _f.=0
     c=0; n=1
     if _fileopenr(infile) then do
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"loading figs from" infile "... "
      do while \_fileeof(infile)
       n=word(strip(linein(infile)),1)
       select
        when _stripint(n)\=n then nop
        when n<1 then nop
        otherwise do
         _f.n=1
         c=c+1
        end /*otherwise*/
       end /*select*/
      end /*do*/
      call _fileclose(infile)
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" figs loaded. "
     end /*if*/
     rslt=c n
    return rslt

/** _figs_get v.2 **/
    _figs_get: procedure expose (globals)
     c1=0
     if arg(1,"E") then do
      fname=arg(1)
      parse value _figs_load(fname) with c1 m .
     end /*if*/
     _f.=0
     c=0 /* total count */
     cf=0 /* crp figs */
     pf=0 /* per figs */
     df=0 /* def figs */
     of=0 /* off figs */
     tf=0 /* tol figs */
     tot=0 /* amount */
     buflen=2048*1024
     call zocreceivebuf buflen
     call zocsend "g"
     if _wait("Deployed  Fighter  Scan")=640 then call _error "timeout"
     ans=0
     do while ans=0
      ans=_waitmux("r|Total|deployed")
     end /*do*/
     if ans=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)=buflen then call _error "buffer overflow"
     m=0; i=0; j=0
     i=pos(d2c(13),buff,pos("==",buff)+1)+1
     if i>1 then j=pos(d2c(13),buff,i)
     finish=pos("Total",buff,i)
     do while j>0 & j<finish
      line=strip(substr(buff,i,j-i))
      parse var line s1 amt type mode .
      if (type="Corp" | type="Personal") & _stripint(s1)=s1 then do
       amt=zocstring("REPLACE",amt,"T","000")
       amt=zocstring("REPLACE",amt,"M","000000")
       if datatype(amt,'N') then tot=tot+amt
       if (type="Personal") then pf=pf+1
       else cf=cf+1
       if (mode="Defensive") then df=df+1
       if (mode="Offensive") then of=of+1
       if (mode="Toll") then tf=tf+1
       _f.s1=1
       c=c+1
       m=max(m,s1)
      end /*if*/
      i=j+1
      j=pos(d2c(13),buff,i)
     end /*do*/
     if _verbose then call zocwrite _ansi("clearline;bt;fwh")||c||" figs read. "
     rslt=c m cf pf df of tf tot c-c1
    return rslt

/** _figs_save v.1 **/
    _figs_save: procedure expose (globals)
     outfile=arg(1)
     m=arg(2)
     c=0
     if outfile\="" then do
      if _filenew(outfile, "delete") then do
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"saving figs to" outfile "... "
       do i=1 to m
        if _f.i then do
         c=c+1
         call lineout outfile, i
        end /*if*/
       end /*do*/
       call _fileclose(outfile)
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" figs saved. "
      end /*if*/
     end /*if*/
    return c

/** _voids_load v.1 **/
    _voids_load: procedure expose (globals)
     infile=arg(1)
     _v.=0
     c=0; n=1
     if _fileopenr(infile) then do
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"loading voids from" infile "... "
      do while \_fileeof(infile)
       n=word(strip(linein(infile)),1)
       select
        when _stripint(n)\=n then nop
        when n<1 then nop
        otherwise do
         _v.n=1
         c=c+1
        end /*otherwise*/
       end /*select*/
      end /*do*/
      call _fileclose(infile)
      if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" voids loaded. "
     end /*if*/
     rslt=c n
    return rslt

/** _voids_get v.1 **/
    _voids_get: procedure expose (globals)
     _v.=0
     c=0
     buflen=32*1024
     call zocreceivebuf buflen
     if _sendwait("cx","<List Avoided Sectors>")=640 then call _error "timeout"
     if _wait("Computer command")=640 then call _error "timeout"
     call zocsend "q"
     if _waitmux("Command [|Citadel command")=640 then call _error "timeout"
     buff=translate(zocreceivebuf(0),"  ",d2c(10)||d2c(0))
     if length(buff)=buflen then call _error "buffer overflow"
     m=0; i=0; j=0
     i=pos("<List Avoided Sectors>",buff)
     i=pos(d2c(13),buff,i)+1
     i=pos(d2c(13),buff,i)+1
     j=pos(d2c(13),buff,i)
     do while j>0
      line=_space(substr(buff,i,j-i),1)
      if line="" then leave
      if line="No Sectors are currently being avoided." then leave
      do k=1 to words(line)
       s1=word(line,k)
       if _stripint(s1)=s1 then do
        _v.s1=1
        c=c+1
        m=max(m,s1)
       end /*if*/
      end /*do*/
      i=j+1
      j=pos(d2c(13),buff,i)
     end /*do*/
     if _verbose then call zocwrite _ansi("clearline;bt;fwh")||c||" voids read. "
     rslt=c m
    return rslt

/** _voids_save v.1 **/
    _voids_save: procedure expose (globals)
     outfile=arg(1)
     m=arg(2)
     c=0
     if outfile\="" then do
      if _filenew(outfile, "delete") then do
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||"saving voids to" outfile "... "
       do i=1 to m
        if _v.i then do
         c=c+1
         call lineout outfile, i
        end /*if*/
       end /*do*/
       call _fileclose(outfile)
       if _verbose then call zocwriteln _ansi("clearline;bt;fwh")||c||" voids saved. "
      end /*if*/
     end /*if*/
    return c

/** _sendwait v.1 **/
    _sendwait: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _sendwait"
     call zocsend arg(1)
     rslt=_wait(arg(2))
     select
      when \arg(3,"E") | arg(3)=""             then nop
      when lower(arg(3))="timeout"  & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline" & rslt=640 then call _error "timeout"
      when lower(arg(3))="lastline"            then rslt=_lastline()
      otherwise nop
     end /*select*/
    return rslt

/** _grabit v.2 **/
    _grabit: procedure expose (globals)
     if _wait(arg(1))=640 then call _error "timeout"
     rslt=_lastline()
     if lower(arg(2))="s" then rslt=reverse(substr(reverse(rslt),length(arg(1))+1))
    return rslt

/** _portmatch v.1 **/
    _portmatch: procedure expose (globals)
     if \arg(1,"E") | \arg(2,"E") then call _error "missing parameter in _portmatch"
     m1=lower(strip(arg(1)))
     m2=lower(strip(arg(2)))
     rslt=0
     select
      when length(m1)\=3 then nop
      when length(m2)\=3 then nop
      when m1=m2 then rslt=1
      otherwise do
       mm1=0
       if left(m1,1)="x" then mm1=1
       if left(m2,1)="x" then mm1=1
       if left(m1,1)=left(m2,1) then mm1=1
       mm2=0
       if substr(m1,2,1)="x" then mm2=1
       if substr(m2,2,1)="x" then mm2=1
       if substr(m1,2,1)=substr(m2,2,1) then mm2=1
       mm3=0
       if substr(m1,3,1)="x" then mm3=1
       if substr(m2,3,1)="x" then mm3=1
       if substr(m1,3,1)=substr(m2,3,1) then mm3=1
       if mm1 & mm2 & mm3 then rslt=1
      end /*otherwise*/
     end /*select*/
    return rslt

/** _stripcomma v.1 **/
    _stripcomma: procedure expose (globals)
     rslt=translate(_space(translate(arg(1),", "," ,"),0)," ",",")
    return rslt

    _set_msg: procedure expose (globals)
     i=_msg.0
     if i="_MSG.0" then do; _msg.=""; _msg.0=0; i=0; end
     i=i+1; _msg.0=i; _msg=""
     if arg(1,"E") then do; _msg.i=arg(1); _msg=arg(1); end;
     if arg(2,"E") then _msg.i.!source=arg(2)
     if arg(3,"E") then _msg.i.!comment=arg(3)
    return i

/** _fileexists v.4 **/
    _fileexists: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileexists"
      when arg(1)="" then rslt=0
      when stream(arg(1), "C", "QUERY EXISTS")="" then rslt=0
      otherwise rslt=1
     end /*select*/
    return rslt

/** _fileopenw v.3 **/
    _fileopenw: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileopenw"
      when arg(1)="" then rslt=0
      when _fileexists(arg(1)) then do
       call stream arg(1), "C", "OPEN WRITE"
       call stream arg(1), "C", "SEEK <0"
       rslt=_fileready(arg(1))
       if \rslt then call _fileclose arg(1)
      end /*when*/
      otherwise rslt=_filenew(arg(1))
     end /*select*/
    return rslt

/** _ini_list_games v.1 **/
    _ini_list_games: procedure expose (globals)
     lpath=arg(1)
     parse value zoclistfiles(lpath||"*_data.ini", ";") with c list
     if c=0 then rslt=""
     else do
      n=_dword(list,1,";")
      rslt=left(n,lastpos("_data.ini",n)-1)
      do i=2 to c
       n=_dword(list,i,";")
       rslt=rslt||";"||left(n,lastpos("_data.ini",n)-1)
      end /*do*/
     end /*else*/
    return rslt

/** _drequestlist v.3 **/
    _drequestlist: procedure expose (globals)
     i=zocrequestlist(arg(1),translate(arg(2),"|"||arg(3),arg(3)||"|"))
     select
      when i<0 & lower(arg(4))="c" then call _quit "script cancelled by user.", "nocopy"
      when i<0 then rslt="##CANCEL##"
      otherwise rslt=_dword(arg(2),i+1,arg(3))
     end /*select*/
    return rslt

/** _fileready v.2 **/
    _fileready: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _fileready"
      when arg(1)="" then rslt=0
      when stream(arg(1), "S")\="NOTREADY" then rslt=1
      otherwise rslt=0
     end /*select*/
    return rslt

/** _filenew v.4 **/
    _filenew: procedure expose (globals)
     select
      when \arg(1,"E") then call _error "missing parameter in _filenew"
      when arg(1)="" then rslt=0
      otherwise do
       if arg(2,"E") & lower(arg(2))="delete" then call dosdel arg(1)
       if _fileexists(arg(1)) then rslt=0
       else do
        call stream arg(1), "C", "OPEN WRITE"
        rslt=_fileready(arg(1))
        if \rslt then call _fileclose arg(1)
       end /*else*/
      end /*otherwise*/
     end /*select*/
    return rslt

/** _stripnum v.3 **/
    _stripnum: procedure expose (globals)
     w=9
     mask=_space(translate(arg(1)," ","-0123456789.,"," "),0)
     rslt=word(_space(translate(_stripcomma(arg(1))," ",mask," ")),1)
     if rslt="" | rslt="-" then do; call _set_msg "##NAN##", "_stripnum"; rslt=0; end
     else do
      if left(rslt,1)="-" then neg="-"; else neg=""
      rslt=_space(translate(rslt," ","-"),0)
      if left(rslt,1)="." then rslt="0"||rslt
      r=_dword(rslt,1,".")
      m=_dword(rslt,2,".")
      select
       when r=0 & length(m)>w then m=left(m,w)
       when length(r)>w then do; r=left(r,w); m=""; end
       when length(r)=w then m=""
       when length(m)>(w-length(r)) then m=left(m,w-length(r))
       otherwise nop
      end /*select*/
      if m="" then rslt=neg||r; else rstl=neg||r||"."||m
     end /*else*/
    return rslt
